//
// LiveTvAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import PromiseKit

open class LiveTvAPI {
    /**
     Adds a listings provider.
     
     - parameter pw: (query) Password. (optional)
     - parameter validateListings: (query) Validate listings. (optional, default to false)
     - parameter validateLogin: (query) Validate login. (optional, default to false)
     - parameter listingsProviderInfo: (body) New listings info. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ListingsProviderInfo>
     */
    open class func addListingProvider( pw: String? = nil,  validateListings: Bool? = nil,  validateLogin: Bool? = nil,  listingsProviderInfo: ListingsProviderInfo? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<ListingsProviderInfo> {
        let deferred = Promise<ListingsProviderInfo>.pending()
        addListingProviderWithRequestBuilder(pw: pw, validateListings: validateListings, validateLogin: validateLogin, listingsProviderInfo: listingsProviderInfo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Adds a listings provider.
     - POST /LiveTv/ListingProviders
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter pw: (query) Password. (optional)
     - parameter validateListings: (query) Validate listings. (optional, default to false)
     - parameter validateLogin: (query) Validate login. (optional, default to false)
     - parameter listingsProviderInfo: (body) New listings info. (optional)
     - returns: RequestBuilder<ListingsProviderInfo> 
     */
    open class func addListingProviderWithRequestBuilder(pw: String? = nil, validateListings: Bool? = nil, validateLogin: Bool? = nil, listingsProviderInfo: ListingsProviderInfo? = nil) -> RequestBuilder<ListingsProviderInfo> {
        let urlPath = "/LiveTv/ListingProviders"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: listingsProviderInfo)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pw": pw?.encodeToJSON(),
            "validateListings": validateListings?.encodeToJSON(),
            "validateLogin": validateLogin?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ListingsProviderInfo>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Adds a tuner host.
     
     - parameter tunerHostInfo: (body) New tuner host. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TunerHostInfo>
     */
    open class func addTunerHost( tunerHostInfo: TunerHostInfo? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<TunerHostInfo> {
        let deferred = Promise<TunerHostInfo>.pending()
        addTunerHostWithRequestBuilder(tunerHostInfo: tunerHostInfo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Adds a tuner host.
     - POST /LiveTv/TunerHosts
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter tunerHostInfo: (body) New tuner host. (optional)
     - returns: RequestBuilder<TunerHostInfo> 
     */
    open class func addTunerHostWithRequestBuilder(tunerHostInfo: TunerHostInfo? = nil) -> RequestBuilder<TunerHostInfo> {
        let urlPath = "/LiveTv/TunerHosts"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tunerHostInfo)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TunerHostInfo>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Cancels a live tv series timer.
     
     - parameter timerId: (path) Timer id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func cancelSeriesTimer( timerId: String, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        cancelSeriesTimerWithRequestBuilder(timerId: timerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Cancels a live tv series timer.
     - DELETE /LiveTv/SeriesTimers/{timerId}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter timerId: (path) Timer id. 
     - returns: RequestBuilder<Void> 
     */
    open class func cancelSeriesTimerWithRequestBuilder(timerId: String) -> RequestBuilder<Void> {
        var urlPath = "/LiveTv/SeriesTimers/{timerId}"
        let timerIdPreEscape = "\(APIHelper.mapValueToPathItem(timerId))"
        let timerIdPostEscape = timerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{timerId}", with: timerIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Cancels a live tv timer.
     
     - parameter timerId: (path) Timer id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func cancelTimer( timerId: String, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        cancelTimerWithRequestBuilder(timerId: timerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Cancels a live tv timer.
     - DELETE /LiveTv/Timers/{timerId}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter timerId: (path) Timer id. 
     - returns: RequestBuilder<Void> 
     */
    open class func cancelTimerWithRequestBuilder(timerId: String) -> RequestBuilder<Void> {
        var urlPath = "/LiveTv/Timers/{timerId}"
        let timerIdPreEscape = "\(APIHelper.mapValueToPathItem(timerId))"
        let timerIdPostEscape = timerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{timerId}", with: timerIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Creates a live tv series timer.
     
     - parameter seriesTimerInfoDto: (body) New series timer info. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func createSeriesTimer( seriesTimerInfoDto: SeriesTimerInfoDto? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        createSeriesTimerWithRequestBuilder(seriesTimerInfoDto: seriesTimerInfoDto).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Creates a live tv series timer.
     - POST /LiveTv/SeriesTimers
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter seriesTimerInfoDto: (body) New series timer info. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func createSeriesTimerWithRequestBuilder(seriesTimerInfoDto: SeriesTimerInfoDto? = nil) -> RequestBuilder<Void> {
        let urlPath = "/LiveTv/SeriesTimers"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: seriesTimerInfoDto)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Creates a live tv timer.
     
     - parameter timerInfoDto: (body) New timer info. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func createTimer( timerInfoDto: TimerInfoDto? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        createTimerWithRequestBuilder(timerInfoDto: timerInfoDto).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Creates a live tv timer.
     - POST /LiveTv/Timers
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter timerInfoDto: (body) New timer info. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func createTimerWithRequestBuilder(timerInfoDto: TimerInfoDto? = nil) -> RequestBuilder<Void> {
        let urlPath = "/LiveTv/Timers"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: timerInfoDto)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete listing provider.
     
     - parameter id: (query) Listing provider id. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteListingProvider( id: String? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteListingProviderWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete listing provider.
     - DELETE /LiveTv/ListingProviders
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter id: (query) Listing provider id. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteListingProviderWithRequestBuilder(id: String? = nil) -> RequestBuilder<Void> {
        let urlPath = "/LiveTv/ListingProviders"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Deletes a live tv recording.
     
     - parameter recordingId: (path) Recording id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteRecording( recordingId: String, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteRecordingWithRequestBuilder(recordingId: recordingId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Deletes a live tv recording.
     - DELETE /LiveTv/Recordings/{recordingId}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter recordingId: (path) Recording id. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteRecordingWithRequestBuilder(recordingId: String) -> RequestBuilder<Void> {
        var urlPath = "/LiveTv/Recordings/{recordingId}"
        let recordingIdPreEscape = "\(APIHelper.mapValueToPathItem(recordingId))"
        let recordingIdPostEscape = recordingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{recordingId}", with: recordingIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Deletes a tuner host.
     
     - parameter id: (query) Tuner host id. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteTunerHost( id: String? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteTunerHostWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Deletes a tuner host.
     - DELETE /LiveTv/TunerHosts
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter id: (query) Tuner host id. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteTunerHostWithRequestBuilder(id: String? = nil) -> RequestBuilder<Void> {
        let urlPath = "/LiveTv/TunerHosts"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Discover tuners.
     
     - parameter newDevicesOnly: (query) Only discover new tuners. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[TunerHostInfo]>
     */
    open class func discoverTuners( newDevicesOnly: Bool? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<[TunerHostInfo]> {
        let deferred = Promise<[TunerHostInfo]>.pending()
        discoverTunersWithRequestBuilder(newDevicesOnly: newDevicesOnly).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Discover tuners.
     - GET /LiveTv/Tuners/Discover
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter newDevicesOnly: (query) Only discover new tuners. (optional, default to false)
     - returns: RequestBuilder<[TunerHostInfo]> 
     */
    open class func discoverTunersWithRequestBuilder(newDevicesOnly: Bool? = nil) -> RequestBuilder<[TunerHostInfo]> {
        let urlPath = "/LiveTv/Tuners/Discover"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "newDevicesOnly": newDevicesOnly?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[TunerHostInfo]>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Discover tuners.
     
     - parameter newDevicesOnly: (query) Only discover new tuners. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[TunerHostInfo]>
     */
    open class func discvoverTuners( newDevicesOnly: Bool? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<[TunerHostInfo]> {
        let deferred = Promise<[TunerHostInfo]>.pending()
        discvoverTunersWithRequestBuilder(newDevicesOnly: newDevicesOnly).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Discover tuners.
     - GET /LiveTv/Tuners/Discvover
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter newDevicesOnly: (query) Only discover new tuners. (optional, default to false)
     - returns: RequestBuilder<[TunerHostInfo]> 
     */
    open class func discvoverTunersWithRequestBuilder(newDevicesOnly: Bool? = nil) -> RequestBuilder<[TunerHostInfo]> {
        let urlPath = "/LiveTv/Tuners/Discvover"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "newDevicesOnly": newDevicesOnly?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[TunerHostInfo]>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a live tv channel.
     
     - parameter channelId: (path) Channel id. 
     - parameter userId: (query) Optional. Attach user data. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BaseItemDto>
     */
    open class func getChannel( channelId: String,  userId: String? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<BaseItemDto> {
        let deferred = Promise<BaseItemDto>.pending()
        getChannelWithRequestBuilder(channelId: channelId, userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets a live tv channel.
     - GET /LiveTv/Channels/{channelId}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter channelId: (path) Channel id. 
     - parameter userId: (query) Optional. Attach user data. (optional)
     - returns: RequestBuilder<BaseItemDto> 
     */
    open class func getChannelWithRequestBuilder(channelId: String, userId: String? = nil) -> RequestBuilder<BaseItemDto> {
        var urlPath = "/LiveTv/Channels/{channelId}"
        let channelIdPreEscape = "\(APIHelper.mapValueToPathItem(channelId))"
        let channelIdPostEscape = channelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{channelId}", with: channelIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BaseItemDto>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get channel mapping options.
     
     - parameter providerId: (query) Provider id. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ChannelMappingOptionsDto>
     */
    open class func getChannelMappingOptions( providerId: String? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<ChannelMappingOptionsDto> {
        let deferred = Promise<ChannelMappingOptionsDto>.pending()
        getChannelMappingOptionsWithRequestBuilder(providerId: providerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get channel mapping options.
     - GET /LiveTv/ChannelMappingOptions
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter providerId: (query) Provider id. (optional)
     - returns: RequestBuilder<ChannelMappingOptionsDto> 
     */
    open class func getChannelMappingOptionsWithRequestBuilder(providerId: String? = nil) -> RequestBuilder<ChannelMappingOptionsDto> {
        let urlPath = "/LiveTv/ChannelMappingOptions"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "providerId": providerId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ChannelMappingOptionsDto>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets default listings provider info.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ListingsProviderInfo>
     */
    open class func getDefaultListingProvider(apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<ListingsProviderInfo> {
        let deferred = Promise<ListingsProviderInfo>.pending()
        getDefaultListingProviderWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets default listings provider info.
     - GET /LiveTv/ListingProviders/Default
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<ListingsProviderInfo> 
     */
    open class func getDefaultListingProviderWithRequestBuilder() -> RequestBuilder<ListingsProviderInfo> {
        let urlPath = "/LiveTv/ListingProviders/Default"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ListingsProviderInfo>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets the default values for a new timer.
     
     - parameter programId: (query) Optional. To attach default values based on a program. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<SeriesTimerInfoDto>
     */
    open class func getDefaultTimer( programId: String? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<SeriesTimerInfoDto> {
        let deferred = Promise<SeriesTimerInfoDto>.pending()
        getDefaultTimerWithRequestBuilder(programId: programId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets the default values for a new timer.
     - GET /LiveTv/Timers/Defaults
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter programId: (query) Optional. To attach default values based on a program. (optional)
     - returns: RequestBuilder<SeriesTimerInfoDto> 
     */
    open class func getDefaultTimerWithRequestBuilder(programId: String? = nil) -> RequestBuilder<SeriesTimerInfoDto> {
        let urlPath = "/LiveTv/Timers/Defaults"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "programId": programId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SeriesTimerInfoDto>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get guid info.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<GuideInfo>
     */
    open class func getGuideInfo(apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<GuideInfo> {
        let deferred = Promise<GuideInfo>.pending()
        getGuideInfoWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get guid info.
     - GET /LiveTv/GuideInfo
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<GuideInfo> 
     */
    open class func getGuideInfoWithRequestBuilder() -> RequestBuilder<GuideInfo> {
        let urlPath = "/LiveTv/GuideInfo"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GuideInfo>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets available lineups.
     
     - parameter id: (query) Provider id. (optional)
     - parameter type: (query) Provider type. (optional)
     - parameter location: (query) Location. (optional)
     - parameter country: (query) Country. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[NameIdPair]>
     */
    open class func getLineups( id: String? = nil,  type: String? = nil,  location: String? = nil,  country: String? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<[NameIdPair]> {
        let deferred = Promise<[NameIdPair]>.pending()
        getLineupsWithRequestBuilder(id: id, type: type, location: location, country: country).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets available lineups.
     - GET /LiveTv/ListingProviders/Lineups
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter id: (query) Provider id. (optional)
     - parameter type: (query) Provider type. (optional)
     - parameter location: (query) Location. (optional)
     - parameter country: (query) Country. (optional)
     - returns: RequestBuilder<[NameIdPair]> 
     */
    open class func getLineupsWithRequestBuilder(id: String? = nil, type: String? = nil, location: String? = nil, country: String? = nil) -> RequestBuilder<[NameIdPair]> {
        let urlPath = "/LiveTv/ListingProviders/Lineups"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id?.encodeToJSON(),
            "type": type?.encodeToJSON(),
            "location": location?.encodeToJSON(),
            "country": country?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[NameIdPair]>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a live tv recording stream.
     
     - parameter recordingId: (path) Recording id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<URL>
     */
    open class func getLiveRecordingFile( recordingId: String, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<URL> {
        let deferred = Promise<URL>.pending()
        getLiveRecordingFileWithRequestBuilder(recordingId: recordingId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets a live tv recording stream.
     - GET /LiveTv/LiveRecordings/{recordingId}/stream
     - parameter recordingId: (path) Recording id. 
     - returns: RequestBuilder<URL> 
     */
    open class func getLiveRecordingFileWithRequestBuilder(recordingId: String) -> RequestBuilder<URL> {
        var urlPath = "/LiveTv/LiveRecordings/{recordingId}/stream"
        let recordingIdPreEscape = "\(APIHelper.mapValueToPathItem(recordingId))"
        let recordingIdPostEscape = recordingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{recordingId}", with: recordingIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a live tv channel stream.
     
     - parameter streamId: (path) Stream id. 
     - parameter container: (path) Container type. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<URL>
     */
    open class func getLiveStreamFile( streamId: String,  container: String, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<URL> {
        let deferred = Promise<URL>.pending()
        getLiveStreamFileWithRequestBuilder(streamId: streamId, container: container).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets a live tv channel stream.
     - GET /LiveTv/LiveStreamFiles/{streamId}/stream.{container}
     - parameter streamId: (path) Stream id. 
     - parameter container: (path) Container type. 
     - returns: RequestBuilder<URL> 
     */
    open class func getLiveStreamFileWithRequestBuilder(streamId: String, container: String) -> RequestBuilder<URL> {
        var urlPath = "/LiveTv/LiveStreamFiles/{streamId}/stream.{container}"
        let streamIdPreEscape = "\(APIHelper.mapValueToPathItem(streamId))"
        let streamIdPostEscape = streamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{streamId}", with: streamIdPostEscape, options: .literal, range: nil)
        let containerPreEscape = "\(APIHelper.mapValueToPathItem(container))"
        let containerPostEscape = containerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{container}", with: containerPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets available live tv channels.
     
     - parameter type: (query) Optional. Filter by channel type. (optional)
     - parameter userId: (query) Optional. Filter by user and attach user data. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter isMovie: (query) Optional. Filter for movies. (optional)
     - parameter isSeries: (query) Optional. Filter for series. (optional)
     - parameter isNews: (query) Optional. Filter for news. (optional)
     - parameter isKids: (query) Optional. Filter for kids. (optional)
     - parameter isSports: (query) Optional. Filter for sports. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter isFavorite: (query) Optional. Filter by channels that are favorites, or not. (optional)
     - parameter isLiked: (query) Optional. Filter by channels that are liked, or not. (optional)
     - parameter isDisliked: (query) Optional. Filter by channels that are disliked, or not. (optional)
     - parameter enableImages: (query) Optional. Include image information in output. (optional)
     - parameter imageTypeLimit: (query) Optional. The max number of images to return, per image type. (optional)
     - parameter enableImageTypes: (query) \&quot;Optional. The image types to include in the output. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. (optional)
     - parameter enableUserData: (query) Optional. Include user data. (optional)
     - parameter sortBy: (query) Optional. Key to sort by. (optional)
     - parameter sortOrder: (query) Optional. Sort order. (optional)
     - parameter enableFavoriteSorting: (query) Optional. Incorporate favorite and like status into channel sorting. (optional, default to false)
     - parameter addCurrentProgram: (query) Optional. Adds current program info to each channel. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BaseItemDtoQueryResult>
     */
    open class func getLiveTvChannels( type: ChannelType? = nil,  userId: String? = nil,  startIndex: Int? = nil,  isMovie: Bool? = nil,  isSeries: Bool? = nil,  isNews: Bool? = nil,  isKids: Bool? = nil,  isSports: Bool? = nil,  limit: Int? = nil,  isFavorite: Bool? = nil,  isLiked: Bool? = nil,  isDisliked: Bool? = nil,  enableImages: Bool? = nil,  imageTypeLimit: Int? = nil,  enableImageTypes: [ImageType]? = nil,  fields: [ItemFields]? = nil,  enableUserData: Bool? = nil,  sortBy: [String]? = nil,  sortOrder: APISortOrder? = nil,  enableFavoriteSorting: Bool? = nil,  addCurrentProgram: Bool? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<BaseItemDtoQueryResult> {
        let deferred = Promise<BaseItemDtoQueryResult>.pending()
        getLiveTvChannelsWithRequestBuilder(type: type, userId: userId, startIndex: startIndex, isMovie: isMovie, isSeries: isSeries, isNews: isNews, isKids: isKids, isSports: isSports, limit: limit, isFavorite: isFavorite, isLiked: isLiked, isDisliked: isDisliked, enableImages: enableImages, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, fields: fields, enableUserData: enableUserData, sortBy: sortBy, sortOrder: sortOrder, enableFavoriteSorting: enableFavoriteSorting, addCurrentProgram: addCurrentProgram).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets available live tv channels.
     - GET /LiveTv/Channels
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter type: (query) Optional. Filter by channel type. (optional)
     - parameter userId: (query) Optional. Filter by user and attach user data. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter isMovie: (query) Optional. Filter for movies. (optional)
     - parameter isSeries: (query) Optional. Filter for series. (optional)
     - parameter isNews: (query) Optional. Filter for news. (optional)
     - parameter isKids: (query) Optional. Filter for kids. (optional)
     - parameter isSports: (query) Optional. Filter for sports. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter isFavorite: (query) Optional. Filter by channels that are favorites, or not. (optional)
     - parameter isLiked: (query) Optional. Filter by channels that are liked, or not. (optional)
     - parameter isDisliked: (query) Optional. Filter by channels that are disliked, or not. (optional)
     - parameter enableImages: (query) Optional. Include image information in output. (optional)
     - parameter imageTypeLimit: (query) Optional. The max number of images to return, per image type. (optional)
     - parameter enableImageTypes: (query) \&quot;Optional. The image types to include in the output. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. (optional)
     - parameter enableUserData: (query) Optional. Include user data. (optional)
     - parameter sortBy: (query) Optional. Key to sort by. (optional)
     - parameter sortOrder: (query) Optional. Sort order. (optional)
     - parameter enableFavoriteSorting: (query) Optional. Incorporate favorite and like status into channel sorting. (optional, default to false)
     - parameter addCurrentProgram: (query) Optional. Adds current program info to each channel. (optional, default to true)
     - returns: RequestBuilder<BaseItemDtoQueryResult> 
     */
    open class func getLiveTvChannelsWithRequestBuilder(type: ChannelType? = nil, userId: String? = nil, startIndex: Int? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, limit: Int? = nil, isFavorite: Bool? = nil, isLiked: Bool? = nil, isDisliked: Bool? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, fields: [ItemFields]? = nil, enableUserData: Bool? = nil, sortBy: [String]? = nil, sortOrder: APISortOrder? = nil, enableFavoriteSorting: Bool? = nil, addCurrentProgram: Bool? = nil) -> RequestBuilder<BaseItemDtoQueryResult> {
        let urlPath = "/LiveTv/Channels"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type?.encodeToJSON(),
            "userId": userId?.encodeToJSON(),
            "startIndex": startIndex?.encodeToJSON(),
            "isMovie": isMovie?.encodeToJSON(),
            "isSeries": isSeries?.encodeToJSON(),
            "isNews": isNews?.encodeToJSON(),
            "isKids": isKids?.encodeToJSON(),
            "isSports": isSports?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "isFavorite": isFavorite?.encodeToJSON(),
            "isLiked": isLiked?.encodeToJSON(),
            "isDisliked": isDisliked?.encodeToJSON(),
            "enableImages": enableImages?.encodeToJSON(),
            "imageTypeLimit": imageTypeLimit?.encodeToJSON(),
            "enableImageTypes": enableImageTypes?.encodeToJSON(),
            "fields": fields?.encodeToJSON(),
            "enableUserData": enableUserData?.encodeToJSON(),
            "sortBy": sortBy?.encodeToJSON(),
            "sortOrder": sortOrder?.encodeToJSON(),
            "enableFavoriteSorting": enableFavoriteSorting?.encodeToJSON(),
            "addCurrentProgram": addCurrentProgram?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BaseItemDtoQueryResult>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets available live tv services.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<LiveTvInfo>
     */
    open class func getLiveTvInfo(apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<LiveTvInfo> {
        let deferred = Promise<LiveTvInfo>.pending()
        getLiveTvInfoWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets available live tv services.
     - GET /LiveTv/Info
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<LiveTvInfo> 
     */
    open class func getLiveTvInfoWithRequestBuilder() -> RequestBuilder<LiveTvInfo> {
        let urlPath = "/LiveTv/Info"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<LiveTvInfo>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets available live tv epgs.
     
     - parameter channelIds: (query) The channels to return guide information for. (optional)
     - parameter userId: (query) Optional. Filter by user id. (optional)
     - parameter minStartDate: (query) Optional. The minimum premiere start date. (optional)
     - parameter hasAired: (query) Optional. Filter by programs that have completed airing, or not. (optional)
     - parameter isAiring: (query) Optional. Filter by programs that are currently airing, or not. (optional)
     - parameter maxStartDate: (query) Optional. The maximum premiere start date. (optional)
     - parameter minEndDate: (query) Optional. The minimum premiere end date. (optional)
     - parameter maxEndDate: (query) Optional. The maximum premiere end date. (optional)
     - parameter isMovie: (query) Optional. Filter for movies. (optional)
     - parameter isSeries: (query) Optional. Filter for series. (optional)
     - parameter isNews: (query) Optional. Filter for news. (optional)
     - parameter isKids: (query) Optional. Filter for kids. (optional)
     - parameter isSports: (query) Optional. Filter for sports. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter sortBy: (query) Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate. (optional)
     - parameter sortOrder: (query) Sort Order - Ascending,Descending. (optional)
     - parameter genres: (query) The genres to return guide information for. (optional)
     - parameter genreIds: (query) The genre ids to return guide information for. (optional)
     - parameter enableImages: (query) Optional. Include image information in output. (optional)
     - parameter imageTypeLimit: (query) Optional. The max number of images to return, per image type. (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter enableUserData: (query) Optional. Include user data. (optional)
     - parameter seriesTimerId: (query) Optional. Filter by series timer id. (optional)
     - parameter librarySeriesId: (query) Optional. Filter by library series id. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. (optional)
     - parameter enableTotalRecordCount: (query) Retrieve total record count. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BaseItemDtoQueryResult>
     */
    open class func getLiveTvPrograms( channelIds: [String]? = nil,  userId: String? = nil,  minStartDate: Date? = nil,  hasAired: Bool? = nil,  isAiring: Bool? = nil,  maxStartDate: Date? = nil,  minEndDate: Date? = nil,  maxEndDate: Date? = nil,  isMovie: Bool? = nil,  isSeries: Bool? = nil,  isNews: Bool? = nil,  isKids: Bool? = nil,  isSports: Bool? = nil,  startIndex: Int? = nil,  limit: Int? = nil,  sortBy: [String]? = nil,  sortOrder: [APISortOrder]? = nil,  genres: [String]? = nil,  genreIds: [String]? = nil,  enableImages: Bool? = nil,  imageTypeLimit: Int? = nil,  enableImageTypes: [ImageType]? = nil,  enableUserData: Bool? = nil,  seriesTimerId: String? = nil,  librarySeriesId: String? = nil,  fields: [ItemFields]? = nil,  enableTotalRecordCount: Bool? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<BaseItemDtoQueryResult> {
        let deferred = Promise<BaseItemDtoQueryResult>.pending()
        getLiveTvProgramsWithRequestBuilder(channelIds: channelIds, userId: userId, minStartDate: minStartDate, hasAired: hasAired, isAiring: isAiring, maxStartDate: maxStartDate, minEndDate: minEndDate, maxEndDate: maxEndDate, isMovie: isMovie, isSeries: isSeries, isNews: isNews, isKids: isKids, isSports: isSports, startIndex: startIndex, limit: limit, sortBy: sortBy, sortOrder: sortOrder, genres: genres, genreIds: genreIds, enableImages: enableImages, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, enableUserData: enableUserData, seriesTimerId: seriesTimerId, librarySeriesId: librarySeriesId, fields: fields, enableTotalRecordCount: enableTotalRecordCount).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets available live tv epgs.
     - GET /LiveTv/Programs
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter channelIds: (query) The channels to return guide information for. (optional)
     - parameter userId: (query) Optional. Filter by user id. (optional)
     - parameter minStartDate: (query) Optional. The minimum premiere start date. (optional)
     - parameter hasAired: (query) Optional. Filter by programs that have completed airing, or not. (optional)
     - parameter isAiring: (query) Optional. Filter by programs that are currently airing, or not. (optional)
     - parameter maxStartDate: (query) Optional. The maximum premiere start date. (optional)
     - parameter minEndDate: (query) Optional. The minimum premiere end date. (optional)
     - parameter maxEndDate: (query) Optional. The maximum premiere end date. (optional)
     - parameter isMovie: (query) Optional. Filter for movies. (optional)
     - parameter isSeries: (query) Optional. Filter for series. (optional)
     - parameter isNews: (query) Optional. Filter for news. (optional)
     - parameter isKids: (query) Optional. Filter for kids. (optional)
     - parameter isSports: (query) Optional. Filter for sports. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter sortBy: (query) Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate. (optional)
     - parameter sortOrder: (query) Sort Order - Ascending,Descending. (optional)
     - parameter genres: (query) The genres to return guide information for. (optional)
     - parameter genreIds: (query) The genre ids to return guide information for. (optional)
     - parameter enableImages: (query) Optional. Include image information in output. (optional)
     - parameter imageTypeLimit: (query) Optional. The max number of images to return, per image type. (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter enableUserData: (query) Optional. Include user data. (optional)
     - parameter seriesTimerId: (query) Optional. Filter by series timer id. (optional)
     - parameter librarySeriesId: (query) Optional. Filter by library series id. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. (optional)
     - parameter enableTotalRecordCount: (query) Retrieve total record count. (optional, default to true)
     - returns: RequestBuilder<BaseItemDtoQueryResult> 
     */
    open class func getLiveTvProgramsWithRequestBuilder(channelIds: [String]? = nil, userId: String? = nil, minStartDate: Date? = nil, hasAired: Bool? = nil, isAiring: Bool? = nil, maxStartDate: Date? = nil, minEndDate: Date? = nil, maxEndDate: Date? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, startIndex: Int? = nil, limit: Int? = nil, sortBy: [String]? = nil, sortOrder: [APISortOrder]? = nil, genres: [String]? = nil, genreIds: [String]? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, enableUserData: Bool? = nil, seriesTimerId: String? = nil, librarySeriesId: String? = nil, fields: [ItemFields]? = nil, enableTotalRecordCount: Bool? = nil) -> RequestBuilder<BaseItemDtoQueryResult> {
        let urlPath = "/LiveTv/Programs"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "channelIds": channelIds?.encodeToJSON(),
            "userId": userId?.encodeToJSON(),
            "minStartDate": minStartDate?.encodeToJSON(),
            "hasAired": hasAired?.encodeToJSON(),
            "isAiring": isAiring?.encodeToJSON(),
            "maxStartDate": maxStartDate?.encodeToJSON(),
            "minEndDate": minEndDate?.encodeToJSON(),
            "maxEndDate": maxEndDate?.encodeToJSON(),
            "isMovie": isMovie?.encodeToJSON(),
            "isSeries": isSeries?.encodeToJSON(),
            "isNews": isNews?.encodeToJSON(),
            "isKids": isKids?.encodeToJSON(),
            "isSports": isSports?.encodeToJSON(),
            "startIndex": startIndex?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sortBy": sortBy?.encodeToJSON(),
            "sortOrder": sortOrder?.encodeToJSON(),
            "genres": genres?.encodeToJSON(),
            "genreIds": genreIds?.encodeToJSON(),
            "enableImages": enableImages?.encodeToJSON(),
            "imageTypeLimit": imageTypeLimit?.encodeToJSON(),
            "enableImageTypes": enableImageTypes?.encodeToJSON(),
            "enableUserData": enableUserData?.encodeToJSON(),
            "seriesTimerId": seriesTimerId?.encodeToJSON(),
            "librarySeriesId": librarySeriesId?.encodeToJSON(),
            "fields": fields?.encodeToJSON(),
            "enableTotalRecordCount": enableTotalRecordCount?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BaseItemDtoQueryResult>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a live tv program.
     
     - parameter programId: (path) Program id. 
     - parameter userId: (query) Optional. Attach user data. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BaseItemDto>
     */
    open class func getProgram( programId: String,  userId: String? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<BaseItemDto> {
        let deferred = Promise<BaseItemDto>.pending()
        getProgramWithRequestBuilder(programId: programId, userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets a live tv program.
     - GET /LiveTv/Programs/{programId}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter programId: (path) Program id. 
     - parameter userId: (query) Optional. Attach user data. (optional)
     - returns: RequestBuilder<BaseItemDto> 
     */
    open class func getProgramWithRequestBuilder(programId: String, userId: String? = nil) -> RequestBuilder<BaseItemDto> {
        var urlPath = "/LiveTv/Programs/{programId}"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BaseItemDto>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets available live tv epgs.
     
     - parameter getProgramsDto: (body) Request body. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BaseItemDtoQueryResult>
     */
    open class func getPrograms( getProgramsDto: GetProgramsDto? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<BaseItemDtoQueryResult> {
        let deferred = Promise<BaseItemDtoQueryResult>.pending()
        getProgramsWithRequestBuilder(getProgramsDto: getProgramsDto).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets available live tv epgs.
     - POST /LiveTv/Programs
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter getProgramsDto: (body) Request body. (optional)
     - returns: RequestBuilder<BaseItemDtoQueryResult> 
     */
    open class func getProgramsWithRequestBuilder(getProgramsDto: GetProgramsDto? = nil) -> RequestBuilder<BaseItemDtoQueryResult> {
        let urlPath = "/LiveTv/Programs"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getProgramsDto)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BaseItemDtoQueryResult>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets recommended live tv epgs.
     
     - parameter userId: (query) Optional. filter by user id. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter isAiring: (query) Optional. Filter by programs that are currently airing, or not. (optional)
     - parameter hasAired: (query) Optional. Filter by programs that have completed airing, or not. (optional)
     - parameter isSeries: (query) Optional. Filter for series. (optional)
     - parameter isMovie: (query) Optional. Filter for movies. (optional)
     - parameter isNews: (query) Optional. Filter for news. (optional)
     - parameter isKids: (query) Optional. Filter for kids. (optional)
     - parameter isSports: (query) Optional. Filter for sports. (optional)
     - parameter enableImages: (query) Optional. Include image information in output. (optional)
     - parameter imageTypeLimit: (query) Optional. The max number of images to return, per image type. (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter genreIds: (query) The genres to return guide information for. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. (optional)
     - parameter enableUserData: (query) Optional. include user data. (optional)
     - parameter enableTotalRecordCount: (query) Retrieve total record count. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BaseItemDtoQueryResult>
     */
    open class func getRecommendedPrograms( userId: String? = nil,  limit: Int? = nil,  isAiring: Bool? = nil,  hasAired: Bool? = nil,  isSeries: Bool? = nil,  isMovie: Bool? = nil,  isNews: Bool? = nil,  isKids: Bool? = nil,  isSports: Bool? = nil,  enableImages: Bool? = nil,  imageTypeLimit: Int? = nil,  enableImageTypes: [ImageType]? = nil,  genreIds: [String]? = nil,  fields: [ItemFields]? = nil,  enableUserData: Bool? = nil,  enableTotalRecordCount: Bool? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<BaseItemDtoQueryResult> {
        let deferred = Promise<BaseItemDtoQueryResult>.pending()
        getRecommendedProgramsWithRequestBuilder(userId: userId, limit: limit, isAiring: isAiring, hasAired: hasAired, isSeries: isSeries, isMovie: isMovie, isNews: isNews, isKids: isKids, isSports: isSports, enableImages: enableImages, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, genreIds: genreIds, fields: fields, enableUserData: enableUserData, enableTotalRecordCount: enableTotalRecordCount).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets recommended live tv epgs.
     - GET /LiveTv/Programs/Recommended
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter userId: (query) Optional. filter by user id. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter isAiring: (query) Optional. Filter by programs that are currently airing, or not. (optional)
     - parameter hasAired: (query) Optional. Filter by programs that have completed airing, or not. (optional)
     - parameter isSeries: (query) Optional. Filter for series. (optional)
     - parameter isMovie: (query) Optional. Filter for movies. (optional)
     - parameter isNews: (query) Optional. Filter for news. (optional)
     - parameter isKids: (query) Optional. Filter for kids. (optional)
     - parameter isSports: (query) Optional. Filter for sports. (optional)
     - parameter enableImages: (query) Optional. Include image information in output. (optional)
     - parameter imageTypeLimit: (query) Optional. The max number of images to return, per image type. (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter genreIds: (query) The genres to return guide information for. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. (optional)
     - parameter enableUserData: (query) Optional. include user data. (optional)
     - parameter enableTotalRecordCount: (query) Retrieve total record count. (optional, default to true)
     - returns: RequestBuilder<BaseItemDtoQueryResult> 
     */
    open class func getRecommendedProgramsWithRequestBuilder(userId: String? = nil, limit: Int? = nil, isAiring: Bool? = nil, hasAired: Bool? = nil, isSeries: Bool? = nil, isMovie: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, genreIds: [String]? = nil, fields: [ItemFields]? = nil, enableUserData: Bool? = nil, enableTotalRecordCount: Bool? = nil) -> RequestBuilder<BaseItemDtoQueryResult> {
        let urlPath = "/LiveTv/Programs/Recommended"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "isAiring": isAiring?.encodeToJSON(),
            "hasAired": hasAired?.encodeToJSON(),
            "isSeries": isSeries?.encodeToJSON(),
            "isMovie": isMovie?.encodeToJSON(),
            "isNews": isNews?.encodeToJSON(),
            "isKids": isKids?.encodeToJSON(),
            "isSports": isSports?.encodeToJSON(),
            "enableImages": enableImages?.encodeToJSON(),
            "imageTypeLimit": imageTypeLimit?.encodeToJSON(),
            "enableImageTypes": enableImageTypes?.encodeToJSON(),
            "genreIds": genreIds?.encodeToJSON(),
            "fields": fields?.encodeToJSON(),
            "enableUserData": enableUserData?.encodeToJSON(),
            "enableTotalRecordCount": enableTotalRecordCount?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BaseItemDtoQueryResult>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a live tv recording.
     
     - parameter recordingId: (path) Recording id. 
     - parameter userId: (query) Optional. Attach user data. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BaseItemDto>
     */
    open class func getRecording( recordingId: String,  userId: String? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<BaseItemDto> {
        let deferred = Promise<BaseItemDto>.pending()
        getRecordingWithRequestBuilder(recordingId: recordingId, userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets a live tv recording.
     - GET /LiveTv/Recordings/{recordingId}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter recordingId: (path) Recording id. 
     - parameter userId: (query) Optional. Attach user data. (optional)
     - returns: RequestBuilder<BaseItemDto> 
     */
    open class func getRecordingWithRequestBuilder(recordingId: String, userId: String? = nil) -> RequestBuilder<BaseItemDto> {
        var urlPath = "/LiveTv/Recordings/{recordingId}"
        let recordingIdPreEscape = "\(APIHelper.mapValueToPathItem(recordingId))"
        let recordingIdPostEscape = recordingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{recordingId}", with: recordingIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BaseItemDto>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets recording folders.
     
     - parameter userId: (query) Optional. Filter by user and attach user data. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BaseItemDtoQueryResult>
     */
    open class func getRecordingFolders( userId: String? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<BaseItemDtoQueryResult> {
        let deferred = Promise<BaseItemDtoQueryResult>.pending()
        getRecordingFoldersWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets recording folders.
     - GET /LiveTv/Recordings/Folders
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter userId: (query) Optional. Filter by user and attach user data. (optional)
     - returns: RequestBuilder<BaseItemDtoQueryResult> 
     */
    open class func getRecordingFoldersWithRequestBuilder(userId: String? = nil) -> RequestBuilder<BaseItemDtoQueryResult> {
        let urlPath = "/LiveTv/Recordings/Folders"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BaseItemDtoQueryResult>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get recording group.
     
     - parameter groupId: (path) Group id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getRecordingGroup( groupId: String, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        getRecordingGroupWithRequestBuilder(groupId: groupId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get recording group.
     - GET /LiveTv/Recordings/Groups/{groupId}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter groupId: (path) Group id. 
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getRecordingGroupWithRequestBuilder(groupId: String) -> RequestBuilder<Void> {
        var urlPath = "/LiveTv/Recordings/Groups/{groupId}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets live tv recording groups.
     
     - parameter userId: (query) Optional. Filter by user and attach user data. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BaseItemDtoQueryResult>
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getRecordingGroups( userId: String? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<BaseItemDtoQueryResult> {
        let deferred = Promise<BaseItemDtoQueryResult>.pending()
        getRecordingGroupsWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets live tv recording groups.
     - GET /LiveTv/Recordings/Groups
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter userId: (query) Optional. Filter by user and attach user data. (optional)
     - returns: RequestBuilder<BaseItemDtoQueryResult> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getRecordingGroupsWithRequestBuilder(userId: String? = nil) -> RequestBuilder<BaseItemDtoQueryResult> {
        let urlPath = "/LiveTv/Recordings/Groups"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BaseItemDtoQueryResult>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets live tv recordings.
     
     - parameter channelId: (query) Optional. Filter by channel id. (optional)
     - parameter userId: (query) Optional. Filter by user and attach user data. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter status: (query) Optional. Filter by recording status. (optional)
     - parameter isInProgress: (query) Optional. Filter by recordings that are in progress, or not. (optional)
     - parameter seriesTimerId: (query) Optional. Filter by recordings belonging to a series timer. (optional)
     - parameter enableImages: (query) Optional. Include image information in output. (optional)
     - parameter imageTypeLimit: (query) Optional. The max number of images to return, per image type. (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. (optional)
     - parameter enableUserData: (query) Optional. Include user data. (optional)
     - parameter isMovie: (query) Optional. Filter for movies. (optional)
     - parameter isSeries: (query) Optional. Filter for series. (optional)
     - parameter isKids: (query) Optional. Filter for kids. (optional)
     - parameter isSports: (query) Optional. Filter for sports. (optional)
     - parameter isNews: (query) Optional. Filter for news. (optional)
     - parameter isLibraryItem: (query) Optional. Filter for is library item. (optional)
     - parameter enableTotalRecordCount: (query) Optional. Return total record count. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BaseItemDtoQueryResult>
     */
    open class func getRecordings( channelId: String? = nil,  userId: String? = nil,  startIndex: Int? = nil,  limit: Int? = nil,  status: RecordingStatus? = nil,  isInProgress: Bool? = nil,  seriesTimerId: String? = nil,  enableImages: Bool? = nil,  imageTypeLimit: Int? = nil,  enableImageTypes: [ImageType]? = nil,  fields: [ItemFields]? = nil,  enableUserData: Bool? = nil,  isMovie: Bool? = nil,  isSeries: Bool? = nil,  isKids: Bool? = nil,  isSports: Bool? = nil,  isNews: Bool? = nil,  isLibraryItem: Bool? = nil,  enableTotalRecordCount: Bool? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<BaseItemDtoQueryResult> {
        let deferred = Promise<BaseItemDtoQueryResult>.pending()
        getRecordingsWithRequestBuilder(channelId: channelId, userId: userId, startIndex: startIndex, limit: limit, status: status, isInProgress: isInProgress, seriesTimerId: seriesTimerId, enableImages: enableImages, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, fields: fields, enableUserData: enableUserData, isMovie: isMovie, isSeries: isSeries, isKids: isKids, isSports: isSports, isNews: isNews, isLibraryItem: isLibraryItem, enableTotalRecordCount: enableTotalRecordCount).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets live tv recordings.
     - GET /LiveTv/Recordings
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter channelId: (query) Optional. Filter by channel id. (optional)
     - parameter userId: (query) Optional. Filter by user and attach user data. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter status: (query) Optional. Filter by recording status. (optional)
     - parameter isInProgress: (query) Optional. Filter by recordings that are in progress, or not. (optional)
     - parameter seriesTimerId: (query) Optional. Filter by recordings belonging to a series timer. (optional)
     - parameter enableImages: (query) Optional. Include image information in output. (optional)
     - parameter imageTypeLimit: (query) Optional. The max number of images to return, per image type. (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. (optional)
     - parameter enableUserData: (query) Optional. Include user data. (optional)
     - parameter isMovie: (query) Optional. Filter for movies. (optional)
     - parameter isSeries: (query) Optional. Filter for series. (optional)
     - parameter isKids: (query) Optional. Filter for kids. (optional)
     - parameter isSports: (query) Optional. Filter for sports. (optional)
     - parameter isNews: (query) Optional. Filter for news. (optional)
     - parameter isLibraryItem: (query) Optional. Filter for is library item. (optional)
     - parameter enableTotalRecordCount: (query) Optional. Return total record count. (optional, default to true)
     - returns: RequestBuilder<BaseItemDtoQueryResult> 
     */
    open class func getRecordingsWithRequestBuilder(channelId: String? = nil, userId: String? = nil, startIndex: Int? = nil, limit: Int? = nil, status: RecordingStatus? = nil, isInProgress: Bool? = nil, seriesTimerId: String? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, fields: [ItemFields]? = nil, enableUserData: Bool? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, isNews: Bool? = nil, isLibraryItem: Bool? = nil, enableTotalRecordCount: Bool? = nil) -> RequestBuilder<BaseItemDtoQueryResult> {
        let urlPath = "/LiveTv/Recordings"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "channelId": channelId?.encodeToJSON(),
            "userId": userId?.encodeToJSON(),
            "startIndex": startIndex?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "status": status?.encodeToJSON(),
            "isInProgress": isInProgress?.encodeToJSON(),
            "seriesTimerId": seriesTimerId?.encodeToJSON(),
            "enableImages": enableImages?.encodeToJSON(),
            "imageTypeLimit": imageTypeLimit?.encodeToJSON(),
            "enableImageTypes": enableImageTypes?.encodeToJSON(),
            "fields": fields?.encodeToJSON(),
            "enableUserData": enableUserData?.encodeToJSON(),
            "isMovie": isMovie?.encodeToJSON(),
            "isSeries": isSeries?.encodeToJSON(),
            "isKids": isKids?.encodeToJSON(),
            "isSports": isSports?.encodeToJSON(),
            "isNews": isNews?.encodeToJSON(),
            "isLibraryItem": isLibraryItem?.encodeToJSON(),
            "enableTotalRecordCount": enableTotalRecordCount?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BaseItemDtoQueryResult>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets live tv recording series.
     
     - parameter channelId: (query) Optional. Filter by channel id. (optional)
     - parameter userId: (query) Optional. Filter by user and attach user data. (optional)
     - parameter groupId: (query) Optional. Filter by recording group. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter status: (query) Optional. Filter by recording status. (optional)
     - parameter isInProgress: (query) Optional. Filter by recordings that are in progress, or not. (optional)
     - parameter seriesTimerId: (query) Optional. Filter by recordings belonging to a series timer. (optional)
     - parameter enableImages: (query) Optional. Include image information in output. (optional)
     - parameter imageTypeLimit: (query) Optional. The max number of images to return, per image type. (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. (optional)
     - parameter enableUserData: (query) Optional. Include user data. (optional)
     - parameter enableTotalRecordCount: (query) Optional. Return total record count. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BaseItemDtoQueryResult>
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getRecordingsSeries( channelId: String? = nil,  userId: String? = nil,  groupId: String? = nil,  startIndex: Int? = nil,  limit: Int? = nil,  status: RecordingStatus? = nil,  isInProgress: Bool? = nil,  seriesTimerId: String? = nil,  enableImages: Bool? = nil,  imageTypeLimit: Int? = nil,  enableImageTypes: [ImageType]? = nil,  fields: [ItemFields]? = nil,  enableUserData: Bool? = nil,  enableTotalRecordCount: Bool? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<BaseItemDtoQueryResult> {
        let deferred = Promise<BaseItemDtoQueryResult>.pending()
        getRecordingsSeriesWithRequestBuilder(channelId: channelId, userId: userId, groupId: groupId, startIndex: startIndex, limit: limit, status: status, isInProgress: isInProgress, seriesTimerId: seriesTimerId, enableImages: enableImages, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, fields: fields, enableUserData: enableUserData, enableTotalRecordCount: enableTotalRecordCount).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets live tv recording series.
     - GET /LiveTv/Recordings/Series
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter channelId: (query) Optional. Filter by channel id. (optional)
     - parameter userId: (query) Optional. Filter by user and attach user data. (optional)
     - parameter groupId: (query) Optional. Filter by recording group. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter status: (query) Optional. Filter by recording status. (optional)
     - parameter isInProgress: (query) Optional. Filter by recordings that are in progress, or not. (optional)
     - parameter seriesTimerId: (query) Optional. Filter by recordings belonging to a series timer. (optional)
     - parameter enableImages: (query) Optional. Include image information in output. (optional)
     - parameter imageTypeLimit: (query) Optional. The max number of images to return, per image type. (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. (optional)
     - parameter enableUserData: (query) Optional. Include user data. (optional)
     - parameter enableTotalRecordCount: (query) Optional. Return total record count. (optional, default to true)
     - returns: RequestBuilder<BaseItemDtoQueryResult> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getRecordingsSeriesWithRequestBuilder(channelId: String? = nil, userId: String? = nil, groupId: String? = nil, startIndex: Int? = nil, limit: Int? = nil, status: RecordingStatus? = nil, isInProgress: Bool? = nil, seriesTimerId: String? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, fields: [ItemFields]? = nil, enableUserData: Bool? = nil, enableTotalRecordCount: Bool? = nil) -> RequestBuilder<BaseItemDtoQueryResult> {
        let urlPath = "/LiveTv/Recordings/Series"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "channelId": channelId?.encodeToJSON(),
            "userId": userId?.encodeToJSON(),
            "groupId": groupId?.encodeToJSON(),
            "startIndex": startIndex?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "status": status?.encodeToJSON(),
            "isInProgress": isInProgress?.encodeToJSON(),
            "seriesTimerId": seriesTimerId?.encodeToJSON(),
            "enableImages": enableImages?.encodeToJSON(),
            "imageTypeLimit": imageTypeLimit?.encodeToJSON(),
            "enableImageTypes": enableImageTypes?.encodeToJSON(),
            "fields": fields?.encodeToJSON(),
            "enableUserData": enableUserData?.encodeToJSON(),
            "enableTotalRecordCount": enableTotalRecordCount?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BaseItemDtoQueryResult>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets available countries.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<URL>
     */
    open class func getSchedulesDirectCountries(apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<URL> {
        let deferred = Promise<URL>.pending()
        getSchedulesDirectCountriesWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets available countries.
     - GET /LiveTv/ListingProviders/SchedulesDirect/Countries
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<URL> 
     */
    open class func getSchedulesDirectCountriesWithRequestBuilder() -> RequestBuilder<URL> {
        let urlPath = "/LiveTv/ListingProviders/SchedulesDirect/Countries"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a live tv series timer.
     
     - parameter timerId: (path) Timer id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<SeriesTimerInfoDto>
     */
    open class func getSeriesTimer( timerId: String, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<SeriesTimerInfoDto> {
        let deferred = Promise<SeriesTimerInfoDto>.pending()
        getSeriesTimerWithRequestBuilder(timerId: timerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets a live tv series timer.
     - GET /LiveTv/SeriesTimers/{timerId}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter timerId: (path) Timer id. 
     - returns: RequestBuilder<SeriesTimerInfoDto> 
     */
    open class func getSeriesTimerWithRequestBuilder(timerId: String) -> RequestBuilder<SeriesTimerInfoDto> {
        var urlPath = "/LiveTv/SeriesTimers/{timerId}"
        let timerIdPreEscape = "\(APIHelper.mapValueToPathItem(timerId))"
        let timerIdPostEscape = timerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{timerId}", with: timerIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SeriesTimerInfoDto>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets live tv series timers.
     
     - parameter sortBy: (query) Optional. Sort by SortName or Priority. (optional)
     - parameter sortOrder: (query) Optional. Sort in Ascending or Descending order. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<SeriesTimerInfoDtoQueryResult>
     */
    open class func getSeriesTimers( sortBy: String? = nil,  sortOrder: APISortOrder? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<SeriesTimerInfoDtoQueryResult> {
        let deferred = Promise<SeriesTimerInfoDtoQueryResult>.pending()
        getSeriesTimersWithRequestBuilder(sortBy: sortBy, sortOrder: sortOrder).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets live tv series timers.
     - GET /LiveTv/SeriesTimers
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter sortBy: (query) Optional. Sort by SortName or Priority. (optional)
     - parameter sortOrder: (query) Optional. Sort in Ascending or Descending order. (optional)
     - returns: RequestBuilder<SeriesTimerInfoDtoQueryResult> 
     */
    open class func getSeriesTimersWithRequestBuilder(sortBy: String? = nil, sortOrder: APISortOrder? = nil) -> RequestBuilder<SeriesTimerInfoDtoQueryResult> {
        let urlPath = "/LiveTv/SeriesTimers"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sortBy": sortBy?.encodeToJSON(),
            "sortOrder": sortOrder?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SeriesTimerInfoDtoQueryResult>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a timer.
     
     - parameter timerId: (path) Timer id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TimerInfoDto>
     */
    open class func getTimer( timerId: String, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<TimerInfoDto> {
        let deferred = Promise<TimerInfoDto>.pending()
        getTimerWithRequestBuilder(timerId: timerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets a timer.
     - GET /LiveTv/Timers/{timerId}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter timerId: (path) Timer id. 
     - returns: RequestBuilder<TimerInfoDto> 
     */
    open class func getTimerWithRequestBuilder(timerId: String) -> RequestBuilder<TimerInfoDto> {
        var urlPath = "/LiveTv/Timers/{timerId}"
        let timerIdPreEscape = "\(APIHelper.mapValueToPathItem(timerId))"
        let timerIdPostEscape = timerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{timerId}", with: timerIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TimerInfoDto>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets the live tv timers.
     
     - parameter channelId: (query) Optional. Filter by channel id. (optional)
     - parameter seriesTimerId: (query) Optional. Filter by timers belonging to a series timer. (optional)
     - parameter isActive: (query) Optional. Filter by timers that are active. (optional)
     - parameter isScheduled: (query) Optional. Filter by timers that are scheduled. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TimerInfoDtoQueryResult>
     */
    open class func getTimers( channelId: String? = nil,  seriesTimerId: String? = nil,  isActive: Bool? = nil,  isScheduled: Bool? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<TimerInfoDtoQueryResult> {
        let deferred = Promise<TimerInfoDtoQueryResult>.pending()
        getTimersWithRequestBuilder(channelId: channelId, seriesTimerId: seriesTimerId, isActive: isActive, isScheduled: isScheduled).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets the live tv timers.
     - GET /LiveTv/Timers
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter channelId: (query) Optional. Filter by channel id. (optional)
     - parameter seriesTimerId: (query) Optional. Filter by timers belonging to a series timer. (optional)
     - parameter isActive: (query) Optional. Filter by timers that are active. (optional)
     - parameter isScheduled: (query) Optional. Filter by timers that are scheduled. (optional)
     - returns: RequestBuilder<TimerInfoDtoQueryResult> 
     */
    open class func getTimersWithRequestBuilder(channelId: String? = nil, seriesTimerId: String? = nil, isActive: Bool? = nil, isScheduled: Bool? = nil) -> RequestBuilder<TimerInfoDtoQueryResult> {
        let urlPath = "/LiveTv/Timers"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "channelId": channelId?.encodeToJSON(),
            "seriesTimerId": seriesTimerId?.encodeToJSON(),
            "isActive": isActive?.encodeToJSON(),
            "isScheduled": isScheduled?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TimerInfoDtoQueryResult>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get tuner host types.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[NameIdPair]>
     */
    open class func getTunerHostTypes(apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<[NameIdPair]> {
        let deferred = Promise<[NameIdPair]>.pending()
        getTunerHostTypesWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get tuner host types.
     - GET /LiveTv/TunerHosts/Types
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<[NameIdPair]> 
     */
    open class func getTunerHostTypesWithRequestBuilder() -> RequestBuilder<[NameIdPair]> {
        let urlPath = "/LiveTv/TunerHosts/Types"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[NameIdPair]>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Resets a tv tuner.
     
     - parameter tunerId: (path) Tuner id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func resetTuner( tunerId: String, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        resetTunerWithRequestBuilder(tunerId: tunerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Resets a tv tuner.
     - POST /LiveTv/Tuners/{tunerId}/Reset
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter tunerId: (path) Tuner id. 
     - returns: RequestBuilder<Void> 
     */
    open class func resetTunerWithRequestBuilder(tunerId: String) -> RequestBuilder<Void> {
        var urlPath = "/LiveTv/Tuners/{tunerId}/Reset"
        let tunerIdPreEscape = "\(APIHelper.mapValueToPathItem(tunerId))"
        let tunerIdPostEscape = tunerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{tunerId}", with: tunerIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Set channel mappings.
     
     - parameter setChannelMappingDto: (body) The set channel mapping dto. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TunerChannelMapping>
     */
    open class func setChannelMapping( setChannelMappingDto: SetChannelMappingDto, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<TunerChannelMapping> {
        let deferred = Promise<TunerChannelMapping>.pending()
        setChannelMappingWithRequestBuilder(setChannelMappingDto: setChannelMappingDto).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Set channel mappings.
     - POST /LiveTv/ChannelMappings
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter setChannelMappingDto: (body) The set channel mapping dto. 
     - returns: RequestBuilder<TunerChannelMapping> 
     */
    open class func setChannelMappingWithRequestBuilder(setChannelMappingDto: SetChannelMappingDto) -> RequestBuilder<TunerChannelMapping> {
        let urlPath = "/LiveTv/ChannelMappings"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setChannelMappingDto)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TunerChannelMapping>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Updates a live tv series timer.
     
     - parameter timerId: (path) Timer id. 
     - parameter seriesTimerInfoDto: (body) New series timer info. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func updateSeriesTimer( timerId: String,  seriesTimerInfoDto: SeriesTimerInfoDto? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        updateSeriesTimerWithRequestBuilder(timerId: timerId, seriesTimerInfoDto: seriesTimerInfoDto).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Updates a live tv series timer.
     - POST /LiveTv/SeriesTimers/{timerId}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter timerId: (path) Timer id. 
     - parameter seriesTimerInfoDto: (body) New series timer info. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func updateSeriesTimerWithRequestBuilder(timerId: String, seriesTimerInfoDto: SeriesTimerInfoDto? = nil) -> RequestBuilder<Void> {
        var urlPath = "/LiveTv/SeriesTimers/{timerId}"
        let timerIdPreEscape = "\(APIHelper.mapValueToPathItem(timerId))"
        let timerIdPostEscape = timerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{timerId}", with: timerIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: seriesTimerInfoDto)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Updates a live tv timer.
     
     - parameter timerId: (path) Timer id. 
     - parameter timerInfoDto: (body) New timer info. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func updateTimer( timerId: String,  timerInfoDto: TimerInfoDto? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        updateTimerWithRequestBuilder(timerId: timerId, timerInfoDto: timerInfoDto).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Updates a live tv timer.
     - POST /LiveTv/Timers/{timerId}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter timerId: (path) Timer id. 
     - parameter timerInfoDto: (body) New timer info. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func updateTimerWithRequestBuilder(timerId: String, timerInfoDto: TimerInfoDto? = nil) -> RequestBuilder<Void> {
        var urlPath = "/LiveTv/Timers/{timerId}"
        let timerIdPreEscape = "\(APIHelper.mapValueToPathItem(timerId))"
        let timerIdPostEscape = timerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{timerId}", with: timerIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: timerInfoDto)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
