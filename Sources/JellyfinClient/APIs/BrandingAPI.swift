//
// BrandingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import PromiseKit

open class BrandingAPI {
    /**
     Gets branding css.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<String>
     */
    open class func getBrandingCss(apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<String> {
        let deferred = Promise<String>.pending()
        getBrandingCssWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets branding css.
     - GET /Branding/Css
     - returns: RequestBuilder<String> 
     */
    open class func getBrandingCssWithRequestBuilder() -> RequestBuilder<String> {
        let urlPath = "/Branding/Css"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets branding css.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<String>
     */
    open class func getBrandingCss2(apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<String> {
        let deferred = Promise<String>.pending()
        getBrandingCss2WithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets branding css.
     - GET /Branding/Css.css
     - returns: RequestBuilder<String> 
     */
    open class func getBrandingCss2WithRequestBuilder() -> RequestBuilder<String> {
        let urlPath = "/Branding/Css.css"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets branding configuration.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BrandingOptions>
     */
    open class func getBrandingOptions(apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<BrandingOptions> {
        let deferred = Promise<BrandingOptions>.pending()
        getBrandingOptionsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets branding configuration.
     - GET /Branding/Configuration
     - returns: RequestBuilder<BrandingOptions> 
     */
    open class func getBrandingOptionsWithRequestBuilder() -> RequestBuilder<BrandingOptions> {
        let urlPath = "/Branding/Configuration"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrandingOptions>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
