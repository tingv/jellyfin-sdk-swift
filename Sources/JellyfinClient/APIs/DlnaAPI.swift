//
// DlnaAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import PromiseKit

open class DlnaAPI {
    /**
     Creates a profile.
     
     - parameter deviceProfile: (body) Device profile. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func createProfile( deviceProfile: DeviceProfile? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        createProfileWithRequestBuilder(deviceProfile: deviceProfile).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Creates a profile.
     - POST /Dlna/Profiles
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter deviceProfile: (body) Device profile. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func createProfileWithRequestBuilder(deviceProfile: DeviceProfile? = nil) -> RequestBuilder<Void> {
        let urlPath = "/Dlna/Profiles"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deviceProfile)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Deletes a profile.
     
     - parameter profileId: (path) Profile id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteProfile( profileId: String, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteProfileWithRequestBuilder(profileId: profileId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Deletes a profile.
     - DELETE /Dlna/Profiles/{profileId}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter profileId: (path) Profile id. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteProfileWithRequestBuilder(profileId: String) -> RequestBuilder<Void> {
        var urlPath = "/Dlna/Profiles/{profileId}"
        let profileIdPreEscape = "\(APIHelper.mapValueToPathItem(profileId))"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets the default profile.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<DeviceProfile>
     */
    open class func getDefaultProfile(apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<DeviceProfile> {
        let deferred = Promise<DeviceProfile>.pending()
        getDefaultProfileWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets the default profile.
     - GET /Dlna/Profiles/Default
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<DeviceProfile> 
     */
    open class func getDefaultProfileWithRequestBuilder() -> RequestBuilder<DeviceProfile> {
        let urlPath = "/Dlna/Profiles/Default"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DeviceProfile>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a single profile.
     
     - parameter profileId: (path) Profile Id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<DeviceProfile>
     */
    open class func getProfile( profileId: String, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<DeviceProfile> {
        let deferred = Promise<DeviceProfile>.pending()
        getProfileWithRequestBuilder(profileId: profileId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets a single profile.
     - GET /Dlna/Profiles/{profileId}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter profileId: (path) Profile Id. 
     - returns: RequestBuilder<DeviceProfile> 
     */
    open class func getProfileWithRequestBuilder(profileId: String) -> RequestBuilder<DeviceProfile> {
        var urlPath = "/Dlna/Profiles/{profileId}"
        let profileIdPreEscape = "\(APIHelper.mapValueToPathItem(profileId))"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DeviceProfile>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get profile infos.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[DeviceProfileInfo]>
     */
    open class func getProfileInfos(apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<[DeviceProfileInfo]> {
        let deferred = Promise<[DeviceProfileInfo]>.pending()
        getProfileInfosWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get profile infos.
     - GET /Dlna/ProfileInfos
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<[DeviceProfileInfo]> 
     */
    open class func getProfileInfosWithRequestBuilder() -> RequestBuilder<[DeviceProfileInfo]> {
        let urlPath = "/Dlna/ProfileInfos"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[DeviceProfileInfo]>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Updates a profile.
     
     - parameter profileId: (path) Profile id. 
     - parameter deviceProfile: (body) Device profile. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func updateProfile( profileId: String,  deviceProfile: DeviceProfile? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        updateProfileWithRequestBuilder(profileId: profileId, deviceProfile: deviceProfile).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Updates a profile.
     - POST /Dlna/Profiles/{profileId}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter profileId: (path) Profile id. 
     - parameter deviceProfile: (body) Device profile. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func updateProfileWithRequestBuilder(profileId: String, deviceProfile: DeviceProfile? = nil) -> RequestBuilder<Void> {
        var urlPath = "/Dlna/Profiles/{profileId}"
        let profileIdPreEscape = "\(APIHelper.mapValueToPathItem(profileId))"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deviceProfile)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
