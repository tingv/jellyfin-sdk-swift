//
// SearchAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
#if canImport(Combine)
import Combine
#endif

open class SearchAPI {
    /**
     Gets the search hint result.
     
     - parameter searchTerm: (query) The search term to filter on. 
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter userId: (query) Optional. Supply a user id to search within a user&#39;s library or omit to search all. (optional)
     - parameter includeItemTypes: (query) If specified, only results with the specified item types are returned. This allows multiple, comma delimeted. (optional)
     - parameter excludeItemTypes: (query) If specified, results with these item types are filtered out. This allows multiple, comma delimeted. (optional)
     - parameter mediaTypes: (query) If specified, only results with the specified media types are returned. This allows multiple, comma delimeted. (optional)
     - parameter parentId: (query) If specified, only children of the parent are returned. (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isSeries: (query) Optional filter for series. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter includePeople: (query) Optional filter whether to include people. (optional, default to true)
     - parameter includeMedia: (query) Optional filter whether to include media. (optional, default to true)
     - parameter includeGenres: (query) Optional filter whether to include genres. (optional, default to true)
     - parameter includeStudios: (query) Optional filter whether to include studios. (optional, default to true)
     - parameter includeArtists: (query) Optional filter whether to include artists. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<SearchHintResult, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func callGet(searchTerm: String, startIndex: Int? = nil, limit: Int? = nil, userId: String? = nil, includeItemTypes: [String]? = nil, excludeItemTypes: [String]? = nil, mediaTypes: [String]? = nil, parentId: String? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, includePeople: Bool? = nil, includeMedia: Bool? = nil, includeGenres: Bool? = nil, includeStudios: Bool? = nil, includeArtists: Bool? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> AnyPublisher<SearchHintResult, Error> {
        return Future<SearchHintResult, Error>.init { promise in
            callGetWithRequestBuilder(searchTerm: searchTerm, startIndex: startIndex, limit: limit, userId: userId, includeItemTypes: includeItemTypes, excludeItemTypes: excludeItemTypes, mediaTypes: mediaTypes, parentId: parentId, isMovie: isMovie, isSeries: isSeries, isNews: isNews, isKids: isKids, isSports: isSports, includePeople: includePeople, includeMedia: includeMedia, includeGenres: includeGenres, includeStudios: includeStudios, includeArtists: includeArtists).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     Gets the search hint result.
     - GET /Search/Hints
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter searchTerm: (query) The search term to filter on. 
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter userId: (query) Optional. Supply a user id to search within a user&#39;s library or omit to search all. (optional)
     - parameter includeItemTypes: (query) If specified, only results with the specified item types are returned. This allows multiple, comma delimeted. (optional)
     - parameter excludeItemTypes: (query) If specified, results with these item types are filtered out. This allows multiple, comma delimeted. (optional)
     - parameter mediaTypes: (query) If specified, only results with the specified media types are returned. This allows multiple, comma delimeted. (optional)
     - parameter parentId: (query) If specified, only children of the parent are returned. (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isSeries: (query) Optional filter for series. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter includePeople: (query) Optional filter whether to include people. (optional, default to true)
     - parameter includeMedia: (query) Optional filter whether to include media. (optional, default to true)
     - parameter includeGenres: (query) Optional filter whether to include genres. (optional, default to true)
     - parameter includeStudios: (query) Optional filter whether to include studios. (optional, default to true)
     - parameter includeArtists: (query) Optional filter whether to include artists. (optional, default to true)
     - returns: RequestBuilder<SearchHintResult> 
     */
    open class func callGetWithRequestBuilder(searchTerm: String, startIndex: Int? = nil, limit: Int? = nil, userId: String? = nil, includeItemTypes: [String]? = nil, excludeItemTypes: [String]? = nil, mediaTypes: [String]? = nil, parentId: String? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, includePeople: Bool? = nil, includeMedia: Bool? = nil, includeGenres: Bool? = nil, includeStudios: Bool? = nil, includeArtists: Bool? = nil) -> RequestBuilder<SearchHintResult> {
        let urlPath = "/Search/Hints"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startIndex": startIndex?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "userId": userId?.encodeToJSON(),
            "searchTerm": searchTerm.encodeToJSON(),
            "includeItemTypes": includeItemTypes?.encodeToJSON(),
            "excludeItemTypes": excludeItemTypes?.encodeToJSON(),
            "mediaTypes": mediaTypes?.encodeToJSON(),
            "parentId": parentId?.encodeToJSON(),
            "isMovie": isMovie?.encodeToJSON(),
            "isSeries": isSeries?.encodeToJSON(),
            "isNews": isNews?.encodeToJSON(),
            "isKids": isKids?.encodeToJSON(),
            "isSports": isSports?.encodeToJSON(),
            "includePeople": includePeople?.encodeToJSON(),
            "includeMedia": includeMedia?.encodeToJSON(),
            "includeGenres": includeGenres?.encodeToJSON(),
            "includeStudios": includeStudios?.encodeToJSON(),
            "includeArtists": includeArtists?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SearchHintResult>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
