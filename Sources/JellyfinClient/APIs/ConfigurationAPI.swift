//
// ConfigurationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import PromiseKit

open class ConfigurationAPI {
    /**
     Gets application configuration.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ServerConfiguration>
     */
    open class func getConfiguration(apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<ServerConfiguration> {
        let deferred = Promise<ServerConfiguration>.pending()
        getConfigurationWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets application configuration.
     - GET /System/Configuration
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<ServerConfiguration> 
     */
    open class func getConfigurationWithRequestBuilder() -> RequestBuilder<ServerConfiguration> {
        let urlPath = "/System/Configuration"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ServerConfiguration>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a default MetadataOptions object.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MetadataOptions>
     */
    open class func getDefaultMetadataOptions(apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<MetadataOptions> {
        let deferred = Promise<MetadataOptions>.pending()
        getDefaultMetadataOptionsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets a default MetadataOptions object.
     - GET /System/Configuration/MetadataOptions/Default
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<MetadataOptions> 
     */
    open class func getDefaultMetadataOptionsWithRequestBuilder() -> RequestBuilder<MetadataOptions> {
        let urlPath = "/System/Configuration/MetadataOptions/Default"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MetadataOptions>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a named configuration.
     
     - parameter key: (path) Configuration key. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<URL>
     */
    open class func getNamedConfiguration( key: String, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<URL> {
        let deferred = Promise<URL>.pending()
        getNamedConfigurationWithRequestBuilder(key: key).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets a named configuration.
     - GET /System/Configuration/{key}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter key: (path) Configuration key. 
     - returns: RequestBuilder<URL> 
     */
    open class func getNamedConfigurationWithRequestBuilder(key: String) -> RequestBuilder<URL> {
        var urlPath = "/System/Configuration/{key}"
        let keyPreEscape = "\(APIHelper.mapValueToPathItem(key))"
        let keyPostEscape = keyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{key}", with: keyPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Updates application configuration.
     
     - parameter serverConfiguration: (body) Configuration. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func updateConfiguration( serverConfiguration: ServerConfiguration, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        updateConfigurationWithRequestBuilder(serverConfiguration: serverConfiguration).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Updates application configuration.
     - POST /System/Configuration
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter serverConfiguration: (body) Configuration. 
     - returns: RequestBuilder<Void> 
     */
    open class func updateConfigurationWithRequestBuilder(serverConfiguration: ServerConfiguration) -> RequestBuilder<Void> {
        let urlPath = "/System/Configuration"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serverConfiguration)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Updates the path to the media encoder.
     
     - parameter mediaEncoderPathDto: (body) Media encoder path form body. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func updateMediaEncoderPath( mediaEncoderPathDto: MediaEncoderPathDto, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        updateMediaEncoderPathWithRequestBuilder(mediaEncoderPathDto: mediaEncoderPathDto).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Updates the path to the media encoder.
     - POST /System/MediaEncoder/Path
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter mediaEncoderPathDto: (body) Media encoder path form body. 
     - returns: RequestBuilder<Void> 
     */
    open class func updateMediaEncoderPathWithRequestBuilder(mediaEncoderPathDto: MediaEncoderPathDto) -> RequestBuilder<Void> {
        let urlPath = "/System/MediaEncoder/Path"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mediaEncoderPathDto)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Updates named configuration.
     
     - parameter key: (path) Configuration key. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func updateNamedConfiguration( key: String, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        updateNamedConfigurationWithRequestBuilder(key: key).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Updates named configuration.
     - POST /System/Configuration/{key}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter key: (path) Configuration key. 
     - returns: RequestBuilder<Void> 
     */
    open class func updateNamedConfigurationWithRequestBuilder(key: String) -> RequestBuilder<Void> {
        var urlPath = "/System/Configuration/{key}"
        let keyPreEscape = "\(APIHelper.mapValueToPathItem(key))"
        let keyPostEscape = keyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{key}", with: keyPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
