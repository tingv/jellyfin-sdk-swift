//
// DashboardAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import PromiseKit

open class DashboardAPI {
    /**
     Gets the configuration pages.
     
     - parameter enableInMainMenu: (query) Whether to enable in the main menu. (optional)
     - parameter pageType: (query) The Jellyfin.Api.Models.ConfigurationPageInfo. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[ConfigurationPageInfo]>
     */
    open class func getConfigurationPages( enableInMainMenu: Bool? = nil,  pageType: ConfigurationPageType? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<[ConfigurationPageInfo]> {
        let deferred = Promise<[ConfigurationPageInfo]>.pending()
        getConfigurationPagesWithRequestBuilder(enableInMainMenu: enableInMainMenu, pageType: pageType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets the configuration pages.
     - GET /web/ConfigurationPages
     - parameter enableInMainMenu: (query) Whether to enable in the main menu. (optional)
     - parameter pageType: (query) The Jellyfin.Api.Models.ConfigurationPageInfo. (optional)
     - returns: RequestBuilder<[ConfigurationPageInfo]> 
     */
    open class func getConfigurationPagesWithRequestBuilder(enableInMainMenu: Bool? = nil, pageType: ConfigurationPageType? = nil) -> RequestBuilder<[ConfigurationPageInfo]> {
        let urlPath = "/web/ConfigurationPages"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "enableInMainMenu": enableInMainMenu?.encodeToJSON(),
            "pageType": pageType?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[ConfigurationPageInfo]>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a dashboard configuration page.
     
     - parameter name: (query) The name of the page. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<URL>
     */
    open class func getDashboardConfigurationPage( name: String? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<URL> {
        let deferred = Promise<URL>.pending()
        getDashboardConfigurationPageWithRequestBuilder(name: name).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets a dashboard configuration page.
     - GET /web/ConfigurationPage
     - parameter name: (query) The name of the page. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getDashboardConfigurationPageWithRequestBuilder(name: String? = nil) -> RequestBuilder<URL> {
        let urlPath = "/web/ConfigurationPage"
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
