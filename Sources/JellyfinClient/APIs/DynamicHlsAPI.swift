//
// DynamicHlsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import PromiseKit

open class DynamicHlsAPI {
    /**
     Gets a video stream using HTTP live streaming.
     
     - parameter itemId: (path) The item id. 
     - parameter playlistId: (path) The playlist id. 
     - parameter segmentId: (path) The segment id. 
     - parameter container: (path) The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv. 
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     - parameter params: (query) The streaming parameters. (optional)
     - parameter tag: (query) The tag. (optional)
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter playSessionId: (query) The play session id. (optional)
     - parameter segmentContainer: (query) The segment container. (optional)
     - parameter segmentLength: (query) The segment length. (optional)
     - parameter minSegments: (query) The minimum number of segments. (optional)
     - parameter mediaSourceId: (query) The media version id, if playing an alternate version. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter allowVideoStreamCopy: (query) Whether or not to allow copying of the video stream url. (optional)
     - parameter allowAudioStreamCopy: (query) Whether or not to allow copying of the audio stream url. (optional)
     - parameter breakOnNonKeyFrames: (query) Optional. Whether to break on non key frames. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     - parameter maxAudioBitDepth: (query) Optional. The maximum audio bit depth. (optional)
     - parameter maxStreamingBitrate: (query) Optional. The maximum streaming bitrate. (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     - parameter profile: (query) Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     - parameter level: (query) Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     - parameter framerate: (query) Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter maxFramerate: (query) Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxRefFrames: (query) Optional. (optional)
     - parameter maxVideoBitDepth: (query) Optional. The maximum video bit depth. (optional)
     - parameter requireAvc: (query) Optional. Whether to require avc. (optional)
     - parameter deInterlace: (query) Optional. Whether to deinterlace the video. (optional)
     - parameter requireNonAnamorphic: (query) Optional. Whether to require a non anamorphic stream. (optional)
     - parameter transcodingMaxAudioChannels: (query) Optional. The maximum number of audio channels to transcode. (optional)
     - parameter cpuCoreLimit: (query) Optional. The limit of how many cpu cores to use. (optional)
     - parameter liveStreamId: (query) The live stream id. (optional)
     - parameter enableMpegtsM2TsMode: (query) Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter subtitleCodec: (query) Optional. Specify a subtitle codec to encode to. (optional)
     - parameter transcodeReasons: (query) Optional. The transcoding reason. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter context: (query) Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     - parameter streamOptions: (query) Optional. The streaming options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<URL>
     */
    open class func getHlsAudioSegment( itemId: String,  playlistId: String,  segmentId: Int,  container: String,  _static: Bool? = nil,  params: String? = nil,  tag: String? = nil,  deviceProfileId: String? = nil,  playSessionId: String? = nil,  segmentContainer: String? = nil,  segmentLength: Int? = nil,  minSegments: Int? = nil,  mediaSourceId: String? = nil,  deviceId: String? = nil,  audioCodec: String? = nil,  enableAutoStreamCopy: Bool? = nil,  allowVideoStreamCopy: Bool? = nil,  allowAudioStreamCopy: Bool? = nil,  breakOnNonKeyFrames: Bool? = nil,  audioSampleRate: Int? = nil,  maxAudioBitDepth: Int? = nil,  maxStreamingBitrate: Int? = nil,  audioBitRate: Int? = nil,  audioChannels: Int? = nil,  maxAudioChannels: Int? = nil,  profile: String? = nil,  level: String? = nil,  framerate: Float? = nil,  maxFramerate: Float? = nil,  copyTimestamps: Bool? = nil,  startTimeTicks: Int64? = nil,  width: Int? = nil,  height: Int? = nil,  videoBitRate: Int? = nil,  subtitleStreamIndex: Int? = nil,  subtitleMethod: SubtitleDeliveryMethod? = nil,  maxRefFrames: Int? = nil,  maxVideoBitDepth: Int? = nil,  requireAvc: Bool? = nil,  deInterlace: Bool? = nil,  requireNonAnamorphic: Bool? = nil,  transcodingMaxAudioChannels: Int? = nil,  cpuCoreLimit: Int? = nil,  liveStreamId: String? = nil,  enableMpegtsM2TsMode: Bool? = nil,  videoCodec: String? = nil,  subtitleCodec: String? = nil,  transcodeReasons: String? = nil,  audioStreamIndex: Int? = nil,  videoStreamIndex: Int? = nil,  context: EncodingContext? = nil,  streamOptions: [String: String]? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<URL> {
        let deferred = Promise<URL>.pending()
        getHlsAudioSegmentWithRequestBuilder(itemId: itemId, playlistId: playlistId, segmentId: segmentId, container: container, _static: _static, params: params, tag: tag, deviceProfileId: deviceProfileId, playSessionId: playSessionId, segmentContainer: segmentContainer, segmentLength: segmentLength, minSegments: minSegments, mediaSourceId: mediaSourceId, deviceId: deviceId, audioCodec: audioCodec, enableAutoStreamCopy: enableAutoStreamCopy, allowVideoStreamCopy: allowVideoStreamCopy, allowAudioStreamCopy: allowAudioStreamCopy, breakOnNonKeyFrames: breakOnNonKeyFrames, audioSampleRate: audioSampleRate, maxAudioBitDepth: maxAudioBitDepth, maxStreamingBitrate: maxStreamingBitrate, audioBitRate: audioBitRate, audioChannels: audioChannels, maxAudioChannels: maxAudioChannels, profile: profile, level: level, framerate: framerate, maxFramerate: maxFramerate, copyTimestamps: copyTimestamps, startTimeTicks: startTimeTicks, width: width, height: height, videoBitRate: videoBitRate, subtitleStreamIndex: subtitleStreamIndex, subtitleMethod: subtitleMethod, maxRefFrames: maxRefFrames, maxVideoBitDepth: maxVideoBitDepth, requireAvc: requireAvc, deInterlace: deInterlace, requireNonAnamorphic: requireNonAnamorphic, transcodingMaxAudioChannels: transcodingMaxAudioChannels, cpuCoreLimit: cpuCoreLimit, liveStreamId: liveStreamId, enableMpegtsM2TsMode: enableMpegtsM2TsMode, videoCodec: videoCodec, subtitleCodec: subtitleCodec, transcodeReasons: transcodeReasons, audioStreamIndex: audioStreamIndex, videoStreamIndex: videoStreamIndex, context: context, streamOptions: streamOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets a video stream using HTTP live streaming.
     - GET /Audio/{itemId}/hls1/{playlistId}/{segmentId}.{container}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) The item id. 
     - parameter playlistId: (path) The playlist id. 
     - parameter segmentId: (path) The segment id. 
     - parameter container: (path) The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv. 
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     - parameter params: (query) The streaming parameters. (optional)
     - parameter tag: (query) The tag. (optional)
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter playSessionId: (query) The play session id. (optional)
     - parameter segmentContainer: (query) The segment container. (optional)
     - parameter segmentLength: (query) The segment length. (optional)
     - parameter minSegments: (query) The minimum number of segments. (optional)
     - parameter mediaSourceId: (query) The media version id, if playing an alternate version. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter allowVideoStreamCopy: (query) Whether or not to allow copying of the video stream url. (optional)
     - parameter allowAudioStreamCopy: (query) Whether or not to allow copying of the audio stream url. (optional)
     - parameter breakOnNonKeyFrames: (query) Optional. Whether to break on non key frames. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     - parameter maxAudioBitDepth: (query) Optional. The maximum audio bit depth. (optional)
     - parameter maxStreamingBitrate: (query) Optional. The maximum streaming bitrate. (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     - parameter profile: (query) Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     - parameter level: (query) Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     - parameter framerate: (query) Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter maxFramerate: (query) Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxRefFrames: (query) Optional. (optional)
     - parameter maxVideoBitDepth: (query) Optional. The maximum video bit depth. (optional)
     - parameter requireAvc: (query) Optional. Whether to require avc. (optional)
     - parameter deInterlace: (query) Optional. Whether to deinterlace the video. (optional)
     - parameter requireNonAnamorphic: (query) Optional. Whether to require a non anamorphic stream. (optional)
     - parameter transcodingMaxAudioChannels: (query) Optional. The maximum number of audio channels to transcode. (optional)
     - parameter cpuCoreLimit: (query) Optional. The limit of how many cpu cores to use. (optional)
     - parameter liveStreamId: (query) The live stream id. (optional)
     - parameter enableMpegtsM2TsMode: (query) Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter subtitleCodec: (query) Optional. Specify a subtitle codec to encode to. (optional)
     - parameter transcodeReasons: (query) Optional. The transcoding reason. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter context: (query) Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     - parameter streamOptions: (query) Optional. The streaming options. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getHlsAudioSegmentWithRequestBuilder(itemId: String, playlistId: String, segmentId: Int, container: String, _static: Bool? = nil, params: String? = nil, tag: String? = nil, deviceProfileId: String? = nil, playSessionId: String? = nil, segmentContainer: String? = nil, segmentLength: Int? = nil, minSegments: Int? = nil, mediaSourceId: String? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, allowVideoStreamCopy: Bool? = nil, allowAudioStreamCopy: Bool? = nil, breakOnNonKeyFrames: Bool? = nil, audioSampleRate: Int? = nil, maxAudioBitDepth: Int? = nil, maxStreamingBitrate: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, profile: String? = nil, level: String? = nil, framerate: Float? = nil, maxFramerate: Float? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxRefFrames: Int? = nil, maxVideoBitDepth: Int? = nil, requireAvc: Bool? = nil, deInterlace: Bool? = nil, requireNonAnamorphic: Bool? = nil, transcodingMaxAudioChannels: Int? = nil, cpuCoreLimit: Int? = nil, liveStreamId: String? = nil, enableMpegtsM2TsMode: Bool? = nil, videoCodec: String? = nil, subtitleCodec: String? = nil, transcodeReasons: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil, context: EncodingContext? = nil, streamOptions: [String: String]? = nil) -> RequestBuilder<URL> {
        var urlPath = "/Audio/{itemId}/hls1/{playlistId}/{segmentId}.{container}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let segmentIdPreEscape = "\(APIHelper.mapValueToPathItem(segmentId))"
        let segmentIdPostEscape = segmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{segmentId}", with: segmentIdPostEscape, options: .literal, range: nil)
        let containerPreEscape = "\(APIHelper.mapValueToPathItem(container))"
        let containerPostEscape = containerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{container}", with: containerPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "static": _static?.encodeToJSON(),
            "params": params?.encodeToJSON(),
            "tag": tag?.encodeToJSON(),
            "deviceProfileId": deviceProfileId?.encodeToJSON(),
            "playSessionId": playSessionId?.encodeToJSON(),
            "segmentContainer": segmentContainer?.encodeToJSON(),
            "segmentLength": segmentLength?.encodeToJSON(),
            "minSegments": minSegments?.encodeToJSON(),
            "mediaSourceId": mediaSourceId?.encodeToJSON(),
            "deviceId": deviceId?.encodeToJSON(),
            "audioCodec": audioCodec?.encodeToJSON(),
            "enableAutoStreamCopy": enableAutoStreamCopy?.encodeToJSON(),
            "allowVideoStreamCopy": allowVideoStreamCopy?.encodeToJSON(),
            "allowAudioStreamCopy": allowAudioStreamCopy?.encodeToJSON(),
            "breakOnNonKeyFrames": breakOnNonKeyFrames?.encodeToJSON(),
            "audioSampleRate": audioSampleRate?.encodeToJSON(),
            "maxAudioBitDepth": maxAudioBitDepth?.encodeToJSON(),
            "maxStreamingBitrate": maxStreamingBitrate?.encodeToJSON(),
            "audioBitRate": audioBitRate?.encodeToJSON(),
            "audioChannels": audioChannels?.encodeToJSON(),
            "maxAudioChannels": maxAudioChannels?.encodeToJSON(),
            "profile": profile?.encodeToJSON(),
            "level": level?.encodeToJSON(),
            "framerate": framerate?.encodeToJSON(),
            "maxFramerate": maxFramerate?.encodeToJSON(),
            "copyTimestamps": copyTimestamps?.encodeToJSON(),
            "startTimeTicks": startTimeTicks?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "videoBitRate": videoBitRate?.encodeToJSON(),
            "subtitleStreamIndex": subtitleStreamIndex?.encodeToJSON(),
            "subtitleMethod": subtitleMethod?.encodeToJSON(),
            "maxRefFrames": maxRefFrames?.encodeToJSON(),
            "maxVideoBitDepth": maxVideoBitDepth?.encodeToJSON(),
            "requireAvc": requireAvc?.encodeToJSON(),
            "deInterlace": deInterlace?.encodeToJSON(),
            "requireNonAnamorphic": requireNonAnamorphic?.encodeToJSON(),
            "transcodingMaxAudioChannels": transcodingMaxAudioChannels?.encodeToJSON(),
            "cpuCoreLimit": cpuCoreLimit?.encodeToJSON(),
            "liveStreamId": liveStreamId?.encodeToJSON(),
            "enableMpegtsM2TsMode": enableMpegtsM2TsMode?.encodeToJSON(),
            "videoCodec": videoCodec?.encodeToJSON(),
            "subtitleCodec": subtitleCodec?.encodeToJSON(),
            "transcodeReasons": transcodeReasons?.encodeToJSON(),
            "audioStreamIndex": audioStreamIndex?.encodeToJSON(),
            "videoStreamIndex": videoStreamIndex?.encodeToJSON(),
            "context": context?.encodeToJSON(),
            "streamOptions": streamOptions?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a video stream using HTTP live streaming.
     
     - parameter itemId: (path) The item id. 
     - parameter playlistId: (path) The playlist id. 
     - parameter segmentId: (path) The segment id. 
     - parameter container: (path) The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv. 
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     - parameter params: (query) The streaming parameters. (optional)
     - parameter tag: (query) The tag. (optional)
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter playSessionId: (query) The play session id. (optional)
     - parameter segmentContainer: (query) The segment container. (optional)
     - parameter segmentLength: (query) The segment lenght. (optional)
     - parameter minSegments: (query) The minimum number of segments. (optional)
     - parameter mediaSourceId: (query) The media version id, if playing an alternate version. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter allowVideoStreamCopy: (query) Whether or not to allow copying of the video stream url. (optional)
     - parameter allowAudioStreamCopy: (query) Whether or not to allow copying of the audio stream url. (optional)
     - parameter breakOnNonKeyFrames: (query) Optional. Whether to break on non key frames. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     - parameter maxAudioBitDepth: (query) Optional. The maximum audio bit depth. (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     - parameter profile: (query) Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     - parameter level: (query) Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     - parameter framerate: (query) Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter maxFramerate: (query) Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxRefFrames: (query) Optional. (optional)
     - parameter maxVideoBitDepth: (query) Optional. The maximum video bit depth. (optional)
     - parameter requireAvc: (query) Optional. Whether to require avc. (optional)
     - parameter deInterlace: (query) Optional. Whether to deinterlace the video. (optional)
     - parameter requireNonAnamorphic: (query) Optional. Whether to require a non anamorphic stream. (optional)
     - parameter transcodingMaxAudioChannels: (query) Optional. The maximum number of audio channels to transcode. (optional)
     - parameter cpuCoreLimit: (query) Optional. The limit of how many cpu cores to use. (optional)
     - parameter liveStreamId: (query) The live stream id. (optional)
     - parameter enableMpegtsM2TsMode: (query) Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter subtitleCodec: (query) Optional. Specify a subtitle codec to encode to. (optional)
     - parameter transcodeReasons: (query) Optional. The transcoding reason. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter context: (query) Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     - parameter streamOptions: (query) Optional. The streaming options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<URL>
     */
    open class func getHlsVideoSegment( itemId: String,  playlistId: String,  segmentId: Int,  container: String,  _static: Bool? = nil,  params: String? = nil,  tag: String? = nil,  deviceProfileId: String? = nil,  playSessionId: String? = nil,  segmentContainer: String? = nil,  segmentLength: Int? = nil,  minSegments: Int? = nil,  mediaSourceId: String? = nil,  deviceId: String? = nil,  audioCodec: String? = nil,  enableAutoStreamCopy: Bool? = nil,  allowVideoStreamCopy: Bool? = nil,  allowAudioStreamCopy: Bool? = nil,  breakOnNonKeyFrames: Bool? = nil,  audioSampleRate: Int? = nil,  maxAudioBitDepth: Int? = nil,  audioBitRate: Int? = nil,  audioChannels: Int? = nil,  maxAudioChannels: Int? = nil,  profile: String? = nil,  level: String? = nil,  framerate: Float? = nil,  maxFramerate: Float? = nil,  copyTimestamps: Bool? = nil,  startTimeTicks: Int64? = nil,  width: Int? = nil,  height: Int? = nil,  videoBitRate: Int? = nil,  subtitleStreamIndex: Int? = nil,  subtitleMethod: SubtitleDeliveryMethod? = nil,  maxRefFrames: Int? = nil,  maxVideoBitDepth: Int? = nil,  requireAvc: Bool? = nil,  deInterlace: Bool? = nil,  requireNonAnamorphic: Bool? = nil,  transcodingMaxAudioChannels: Int? = nil,  cpuCoreLimit: Int? = nil,  liveStreamId: String? = nil,  enableMpegtsM2TsMode: Bool? = nil,  videoCodec: String? = nil,  subtitleCodec: String? = nil,  transcodeReasons: String? = nil,  audioStreamIndex: Int? = nil,  videoStreamIndex: Int? = nil,  context: EncodingContext? = nil,  streamOptions: [String: String]? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<URL> {
        let deferred = Promise<URL>.pending()
        getHlsVideoSegmentWithRequestBuilder(itemId: itemId, playlistId: playlistId, segmentId: segmentId, container: container, _static: _static, params: params, tag: tag, deviceProfileId: deviceProfileId, playSessionId: playSessionId, segmentContainer: segmentContainer, segmentLength: segmentLength, minSegments: minSegments, mediaSourceId: mediaSourceId, deviceId: deviceId, audioCodec: audioCodec, enableAutoStreamCopy: enableAutoStreamCopy, allowVideoStreamCopy: allowVideoStreamCopy, allowAudioStreamCopy: allowAudioStreamCopy, breakOnNonKeyFrames: breakOnNonKeyFrames, audioSampleRate: audioSampleRate, maxAudioBitDepth: maxAudioBitDepth, audioBitRate: audioBitRate, audioChannels: audioChannels, maxAudioChannels: maxAudioChannels, profile: profile, level: level, framerate: framerate, maxFramerate: maxFramerate, copyTimestamps: copyTimestamps, startTimeTicks: startTimeTicks, width: width, height: height, videoBitRate: videoBitRate, subtitleStreamIndex: subtitleStreamIndex, subtitleMethod: subtitleMethod, maxRefFrames: maxRefFrames, maxVideoBitDepth: maxVideoBitDepth, requireAvc: requireAvc, deInterlace: deInterlace, requireNonAnamorphic: requireNonAnamorphic, transcodingMaxAudioChannels: transcodingMaxAudioChannels, cpuCoreLimit: cpuCoreLimit, liveStreamId: liveStreamId, enableMpegtsM2TsMode: enableMpegtsM2TsMode, videoCodec: videoCodec, subtitleCodec: subtitleCodec, transcodeReasons: transcodeReasons, audioStreamIndex: audioStreamIndex, videoStreamIndex: videoStreamIndex, context: context, streamOptions: streamOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets a video stream using HTTP live streaming.
     - GET /Videos/{itemId}/hls1/{playlistId}/{segmentId}.{container}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) The item id. 
     - parameter playlistId: (path) The playlist id. 
     - parameter segmentId: (path) The segment id. 
     - parameter container: (path) The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv. 
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     - parameter params: (query) The streaming parameters. (optional)
     - parameter tag: (query) The tag. (optional)
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter playSessionId: (query) The play session id. (optional)
     - parameter segmentContainer: (query) The segment container. (optional)
     - parameter segmentLength: (query) The segment lenght. (optional)
     - parameter minSegments: (query) The minimum number of segments. (optional)
     - parameter mediaSourceId: (query) The media version id, if playing an alternate version. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter allowVideoStreamCopy: (query) Whether or not to allow copying of the video stream url. (optional)
     - parameter allowAudioStreamCopy: (query) Whether or not to allow copying of the audio stream url. (optional)
     - parameter breakOnNonKeyFrames: (query) Optional. Whether to break on non key frames. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     - parameter maxAudioBitDepth: (query) Optional. The maximum audio bit depth. (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     - parameter profile: (query) Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     - parameter level: (query) Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     - parameter framerate: (query) Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter maxFramerate: (query) Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxRefFrames: (query) Optional. (optional)
     - parameter maxVideoBitDepth: (query) Optional. The maximum video bit depth. (optional)
     - parameter requireAvc: (query) Optional. Whether to require avc. (optional)
     - parameter deInterlace: (query) Optional. Whether to deinterlace the video. (optional)
     - parameter requireNonAnamorphic: (query) Optional. Whether to require a non anamorphic stream. (optional)
     - parameter transcodingMaxAudioChannels: (query) Optional. The maximum number of audio channels to transcode. (optional)
     - parameter cpuCoreLimit: (query) Optional. The limit of how many cpu cores to use. (optional)
     - parameter liveStreamId: (query) The live stream id. (optional)
     - parameter enableMpegtsM2TsMode: (query) Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter subtitleCodec: (query) Optional. Specify a subtitle codec to encode to. (optional)
     - parameter transcodeReasons: (query) Optional. The transcoding reason. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter context: (query) Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     - parameter streamOptions: (query) Optional. The streaming options. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getHlsVideoSegmentWithRequestBuilder(itemId: String, playlistId: String, segmentId: Int, container: String, _static: Bool? = nil, params: String? = nil, tag: String? = nil, deviceProfileId: String? = nil, playSessionId: String? = nil, segmentContainer: String? = nil, segmentLength: Int? = nil, minSegments: Int? = nil, mediaSourceId: String? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, allowVideoStreamCopy: Bool? = nil, allowAudioStreamCopy: Bool? = nil, breakOnNonKeyFrames: Bool? = nil, audioSampleRate: Int? = nil, maxAudioBitDepth: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, profile: String? = nil, level: String? = nil, framerate: Float? = nil, maxFramerate: Float? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxRefFrames: Int? = nil, maxVideoBitDepth: Int? = nil, requireAvc: Bool? = nil, deInterlace: Bool? = nil, requireNonAnamorphic: Bool? = nil, transcodingMaxAudioChannels: Int? = nil, cpuCoreLimit: Int? = nil, liveStreamId: String? = nil, enableMpegtsM2TsMode: Bool? = nil, videoCodec: String? = nil, subtitleCodec: String? = nil, transcodeReasons: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil, context: EncodingContext? = nil, streamOptions: [String: String]? = nil) -> RequestBuilder<URL> {
        var urlPath = "/Videos/{itemId}/hls1/{playlistId}/{segmentId}.{container}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let segmentIdPreEscape = "\(APIHelper.mapValueToPathItem(segmentId))"
        let segmentIdPostEscape = segmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{segmentId}", with: segmentIdPostEscape, options: .literal, range: nil)
        let containerPreEscape = "\(APIHelper.mapValueToPathItem(container))"
        let containerPostEscape = containerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{container}", with: containerPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "static": _static?.encodeToJSON(),
            "params": params?.encodeToJSON(),
            "tag": tag?.encodeToJSON(),
            "deviceProfileId": deviceProfileId?.encodeToJSON(),
            "playSessionId": playSessionId?.encodeToJSON(),
            "segmentContainer": segmentContainer?.encodeToJSON(),
            "segmentLength": segmentLength?.encodeToJSON(),
            "minSegments": minSegments?.encodeToJSON(),
            "mediaSourceId": mediaSourceId?.encodeToJSON(),
            "deviceId": deviceId?.encodeToJSON(),
            "audioCodec": audioCodec?.encodeToJSON(),
            "enableAutoStreamCopy": enableAutoStreamCopy?.encodeToJSON(),
            "allowVideoStreamCopy": allowVideoStreamCopy?.encodeToJSON(),
            "allowAudioStreamCopy": allowAudioStreamCopy?.encodeToJSON(),
            "breakOnNonKeyFrames": breakOnNonKeyFrames?.encodeToJSON(),
            "audioSampleRate": audioSampleRate?.encodeToJSON(),
            "maxAudioBitDepth": maxAudioBitDepth?.encodeToJSON(),
            "audioBitRate": audioBitRate?.encodeToJSON(),
            "audioChannels": audioChannels?.encodeToJSON(),
            "maxAudioChannels": maxAudioChannels?.encodeToJSON(),
            "profile": profile?.encodeToJSON(),
            "level": level?.encodeToJSON(),
            "framerate": framerate?.encodeToJSON(),
            "maxFramerate": maxFramerate?.encodeToJSON(),
            "copyTimestamps": copyTimestamps?.encodeToJSON(),
            "startTimeTicks": startTimeTicks?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "videoBitRate": videoBitRate?.encodeToJSON(),
            "subtitleStreamIndex": subtitleStreamIndex?.encodeToJSON(),
            "subtitleMethod": subtitleMethod?.encodeToJSON(),
            "maxRefFrames": maxRefFrames?.encodeToJSON(),
            "maxVideoBitDepth": maxVideoBitDepth?.encodeToJSON(),
            "requireAvc": requireAvc?.encodeToJSON(),
            "deInterlace": deInterlace?.encodeToJSON(),
            "requireNonAnamorphic": requireNonAnamorphic?.encodeToJSON(),
            "transcodingMaxAudioChannels": transcodingMaxAudioChannels?.encodeToJSON(),
            "cpuCoreLimit": cpuCoreLimit?.encodeToJSON(),
            "liveStreamId": liveStreamId?.encodeToJSON(),
            "enableMpegtsM2TsMode": enableMpegtsM2TsMode?.encodeToJSON(),
            "videoCodec": videoCodec?.encodeToJSON(),
            "subtitleCodec": subtitleCodec?.encodeToJSON(),
            "transcodeReasons": transcodeReasons?.encodeToJSON(),
            "audioStreamIndex": audioStreamIndex?.encodeToJSON(),
            "videoStreamIndex": videoStreamIndex?.encodeToJSON(),
            "context": context?.encodeToJSON(),
            "streamOptions": streamOptions?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets an audio hls playlist stream.
     
     - parameter itemId: (path) The item id. 
     - parameter mediaSourceId: (query) The media version id, if playing an alternate version. 
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     - parameter params: (query) The streaming parameters. (optional)
     - parameter tag: (query) The tag. (optional)
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter playSessionId: (query) The play session id. (optional)
     - parameter segmentContainer: (query) The segment container. (optional)
     - parameter segmentLength: (query) The segment length. (optional)
     - parameter minSegments: (query) The minimum number of segments. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter allowVideoStreamCopy: (query) Whether or not to allow copying of the video stream url. (optional)
     - parameter allowAudioStreamCopy: (query) Whether or not to allow copying of the audio stream url. (optional)
     - parameter breakOnNonKeyFrames: (query) Optional. Whether to break on non key frames. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     - parameter maxAudioBitDepth: (query) Optional. The maximum audio bit depth. (optional)
     - parameter maxStreamingBitrate: (query) Optional. The maximum streaming bitrate. (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     - parameter profile: (query) Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     - parameter level: (query) Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     - parameter framerate: (query) Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter maxFramerate: (query) Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxRefFrames: (query) Optional. (optional)
     - parameter maxVideoBitDepth: (query) Optional. The maximum video bit depth. (optional)
     - parameter requireAvc: (query) Optional. Whether to require avc. (optional)
     - parameter deInterlace: (query) Optional. Whether to deinterlace the video. (optional)
     - parameter requireNonAnamorphic: (query) Optional. Whether to require a non anamorphic stream. (optional)
     - parameter transcodingMaxAudioChannels: (query) Optional. The maximum number of audio channels to transcode. (optional)
     - parameter cpuCoreLimit: (query) Optional. The limit of how many cpu cores to use. (optional)
     - parameter liveStreamId: (query) The live stream id. (optional)
     - parameter enableMpegtsM2TsMode: (query) Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter subtitleCodec: (query) Optional. Specify a subtitle codec to encode to. (optional)
     - parameter transcodeReasons: (query) Optional. The transcoding reason. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter context: (query) Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     - parameter streamOptions: (query) Optional. The streaming options. (optional)
     - parameter enableAdaptiveBitrateStreaming: (query) Enable adaptive bitrate streaming. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<URL>
     */
    open class func getMasterHlsAudioPlaylist( itemId: String,  mediaSourceId: String,  _static: Bool? = nil,  params: String? = nil,  tag: String? = nil,  deviceProfileId: String? = nil,  playSessionId: String? = nil,  segmentContainer: String? = nil,  segmentLength: Int? = nil,  minSegments: Int? = nil,  deviceId: String? = nil,  audioCodec: String? = nil,  enableAutoStreamCopy: Bool? = nil,  allowVideoStreamCopy: Bool? = nil,  allowAudioStreamCopy: Bool? = nil,  breakOnNonKeyFrames: Bool? = nil,  audioSampleRate: Int? = nil,  maxAudioBitDepth: Int? = nil,  maxStreamingBitrate: Int? = nil,  audioBitRate: Int? = nil,  audioChannels: Int? = nil,  maxAudioChannels: Int? = nil,  profile: String? = nil,  level: String? = nil,  framerate: Float? = nil,  maxFramerate: Float? = nil,  copyTimestamps: Bool? = nil,  startTimeTicks: Int64? = nil,  width: Int? = nil,  height: Int? = nil,  videoBitRate: Int? = nil,  subtitleStreamIndex: Int? = nil,  subtitleMethod: SubtitleDeliveryMethod? = nil,  maxRefFrames: Int? = nil,  maxVideoBitDepth: Int? = nil,  requireAvc: Bool? = nil,  deInterlace: Bool? = nil,  requireNonAnamorphic: Bool? = nil,  transcodingMaxAudioChannels: Int? = nil,  cpuCoreLimit: Int? = nil,  liveStreamId: String? = nil,  enableMpegtsM2TsMode: Bool? = nil,  videoCodec: String? = nil,  subtitleCodec: String? = nil,  transcodeReasons: String? = nil,  audioStreamIndex: Int? = nil,  videoStreamIndex: Int? = nil,  context: EncodingContext? = nil,  streamOptions: [String: String]? = nil,  enableAdaptiveBitrateStreaming: Bool? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<URL> {
        let deferred = Promise<URL>.pending()
        getMasterHlsAudioPlaylistWithRequestBuilder(itemId: itemId, mediaSourceId: mediaSourceId, _static: _static, params: params, tag: tag, deviceProfileId: deviceProfileId, playSessionId: playSessionId, segmentContainer: segmentContainer, segmentLength: segmentLength, minSegments: minSegments, deviceId: deviceId, audioCodec: audioCodec, enableAutoStreamCopy: enableAutoStreamCopy, allowVideoStreamCopy: allowVideoStreamCopy, allowAudioStreamCopy: allowAudioStreamCopy, breakOnNonKeyFrames: breakOnNonKeyFrames, audioSampleRate: audioSampleRate, maxAudioBitDepth: maxAudioBitDepth, maxStreamingBitrate: maxStreamingBitrate, audioBitRate: audioBitRate, audioChannels: audioChannels, maxAudioChannels: maxAudioChannels, profile: profile, level: level, framerate: framerate, maxFramerate: maxFramerate, copyTimestamps: copyTimestamps, startTimeTicks: startTimeTicks, width: width, height: height, videoBitRate: videoBitRate, subtitleStreamIndex: subtitleStreamIndex, subtitleMethod: subtitleMethod, maxRefFrames: maxRefFrames, maxVideoBitDepth: maxVideoBitDepth, requireAvc: requireAvc, deInterlace: deInterlace, requireNonAnamorphic: requireNonAnamorphic, transcodingMaxAudioChannels: transcodingMaxAudioChannels, cpuCoreLimit: cpuCoreLimit, liveStreamId: liveStreamId, enableMpegtsM2TsMode: enableMpegtsM2TsMode, videoCodec: videoCodec, subtitleCodec: subtitleCodec, transcodeReasons: transcodeReasons, audioStreamIndex: audioStreamIndex, videoStreamIndex: videoStreamIndex, context: context, streamOptions: streamOptions, enableAdaptiveBitrateStreaming: enableAdaptiveBitrateStreaming).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets an audio hls playlist stream.
     - GET /Audio/{itemId}/master.m3u8
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) The item id. 
     - parameter mediaSourceId: (query) The media version id, if playing an alternate version. 
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     - parameter params: (query) The streaming parameters. (optional)
     - parameter tag: (query) The tag. (optional)
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter playSessionId: (query) The play session id. (optional)
     - parameter segmentContainer: (query) The segment container. (optional)
     - parameter segmentLength: (query) The segment length. (optional)
     - parameter minSegments: (query) The minimum number of segments. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter allowVideoStreamCopy: (query) Whether or not to allow copying of the video stream url. (optional)
     - parameter allowAudioStreamCopy: (query) Whether or not to allow copying of the audio stream url. (optional)
     - parameter breakOnNonKeyFrames: (query) Optional. Whether to break on non key frames. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     - parameter maxAudioBitDepth: (query) Optional. The maximum audio bit depth. (optional)
     - parameter maxStreamingBitrate: (query) Optional. The maximum streaming bitrate. (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     - parameter profile: (query) Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     - parameter level: (query) Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     - parameter framerate: (query) Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter maxFramerate: (query) Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxRefFrames: (query) Optional. (optional)
     - parameter maxVideoBitDepth: (query) Optional. The maximum video bit depth. (optional)
     - parameter requireAvc: (query) Optional. Whether to require avc. (optional)
     - parameter deInterlace: (query) Optional. Whether to deinterlace the video. (optional)
     - parameter requireNonAnamorphic: (query) Optional. Whether to require a non anamorphic stream. (optional)
     - parameter transcodingMaxAudioChannels: (query) Optional. The maximum number of audio channels to transcode. (optional)
     - parameter cpuCoreLimit: (query) Optional. The limit of how many cpu cores to use. (optional)
     - parameter liveStreamId: (query) The live stream id. (optional)
     - parameter enableMpegtsM2TsMode: (query) Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter subtitleCodec: (query) Optional. Specify a subtitle codec to encode to. (optional)
     - parameter transcodeReasons: (query) Optional. The transcoding reason. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter context: (query) Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     - parameter streamOptions: (query) Optional. The streaming options. (optional)
     - parameter enableAdaptiveBitrateStreaming: (query) Enable adaptive bitrate streaming. (optional, default to true)
     - returns: RequestBuilder<URL> 
     */
    open class func getMasterHlsAudioPlaylistWithRequestBuilder(itemId: String, mediaSourceId: String, _static: Bool? = nil, params: String? = nil, tag: String? = nil, deviceProfileId: String? = nil, playSessionId: String? = nil, segmentContainer: String? = nil, segmentLength: Int? = nil, minSegments: Int? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, allowVideoStreamCopy: Bool? = nil, allowAudioStreamCopy: Bool? = nil, breakOnNonKeyFrames: Bool? = nil, audioSampleRate: Int? = nil, maxAudioBitDepth: Int? = nil, maxStreamingBitrate: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, profile: String? = nil, level: String? = nil, framerate: Float? = nil, maxFramerate: Float? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxRefFrames: Int? = nil, maxVideoBitDepth: Int? = nil, requireAvc: Bool? = nil, deInterlace: Bool? = nil, requireNonAnamorphic: Bool? = nil, transcodingMaxAudioChannels: Int? = nil, cpuCoreLimit: Int? = nil, liveStreamId: String? = nil, enableMpegtsM2TsMode: Bool? = nil, videoCodec: String? = nil, subtitleCodec: String? = nil, transcodeReasons: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil, context: EncodingContext? = nil, streamOptions: [String: String]? = nil, enableAdaptiveBitrateStreaming: Bool? = nil) -> RequestBuilder<URL> {
        var urlPath = "/Audio/{itemId}/master.m3u8"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "static": _static?.encodeToJSON(),
            "params": params?.encodeToJSON(),
            "tag": tag?.encodeToJSON(),
            "deviceProfileId": deviceProfileId?.encodeToJSON(),
            "playSessionId": playSessionId?.encodeToJSON(),
            "segmentContainer": segmentContainer?.encodeToJSON(),
            "segmentLength": segmentLength?.encodeToJSON(),
            "minSegments": minSegments?.encodeToJSON(),
            "mediaSourceId": mediaSourceId.encodeToJSON(),
            "deviceId": deviceId?.encodeToJSON(),
            "audioCodec": audioCodec?.encodeToJSON(),
            "enableAutoStreamCopy": enableAutoStreamCopy?.encodeToJSON(),
            "allowVideoStreamCopy": allowVideoStreamCopy?.encodeToJSON(),
            "allowAudioStreamCopy": allowAudioStreamCopy?.encodeToJSON(),
            "breakOnNonKeyFrames": breakOnNonKeyFrames?.encodeToJSON(),
            "audioSampleRate": audioSampleRate?.encodeToJSON(),
            "maxAudioBitDepth": maxAudioBitDepth?.encodeToJSON(),
            "maxStreamingBitrate": maxStreamingBitrate?.encodeToJSON(),
            "audioBitRate": audioBitRate?.encodeToJSON(),
            "audioChannels": audioChannels?.encodeToJSON(),
            "maxAudioChannels": maxAudioChannels?.encodeToJSON(),
            "profile": profile?.encodeToJSON(),
            "level": level?.encodeToJSON(),
            "framerate": framerate?.encodeToJSON(),
            "maxFramerate": maxFramerate?.encodeToJSON(),
            "copyTimestamps": copyTimestamps?.encodeToJSON(),
            "startTimeTicks": startTimeTicks?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "videoBitRate": videoBitRate?.encodeToJSON(),
            "subtitleStreamIndex": subtitleStreamIndex?.encodeToJSON(),
            "subtitleMethod": subtitleMethod?.encodeToJSON(),
            "maxRefFrames": maxRefFrames?.encodeToJSON(),
            "maxVideoBitDepth": maxVideoBitDepth?.encodeToJSON(),
            "requireAvc": requireAvc?.encodeToJSON(),
            "deInterlace": deInterlace?.encodeToJSON(),
            "requireNonAnamorphic": requireNonAnamorphic?.encodeToJSON(),
            "transcodingMaxAudioChannels": transcodingMaxAudioChannels?.encodeToJSON(),
            "cpuCoreLimit": cpuCoreLimit?.encodeToJSON(),
            "liveStreamId": liveStreamId?.encodeToJSON(),
            "enableMpegtsM2TsMode": enableMpegtsM2TsMode?.encodeToJSON(),
            "videoCodec": videoCodec?.encodeToJSON(),
            "subtitleCodec": subtitleCodec?.encodeToJSON(),
            "transcodeReasons": transcodeReasons?.encodeToJSON(),
            "audioStreamIndex": audioStreamIndex?.encodeToJSON(),
            "videoStreamIndex": videoStreamIndex?.encodeToJSON(),
            "context": context?.encodeToJSON(),
            "streamOptions": streamOptions?.encodeToJSON(),
            "enableAdaptiveBitrateStreaming": enableAdaptiveBitrateStreaming?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a video hls playlist stream.
     
     - parameter itemId: (path) The item id. 
     - parameter mediaSourceId: (query) The media version id, if playing an alternate version. 
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     - parameter params: (query) The streaming parameters. (optional)
     - parameter tag: (query) The tag. (optional)
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter playSessionId: (query) The play session id. (optional)
     - parameter segmentContainer: (query) The segment container. (optional)
     - parameter segmentLength: (query) The segment length. (optional)
     - parameter minSegments: (query) The minimum number of segments. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter allowVideoStreamCopy: (query) Whether or not to allow copying of the video stream url. (optional)
     - parameter allowAudioStreamCopy: (query) Whether or not to allow copying of the audio stream url. (optional)
     - parameter breakOnNonKeyFrames: (query) Optional. Whether to break on non key frames. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     - parameter maxAudioBitDepth: (query) Optional. The maximum audio bit depth. (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     - parameter profile: (query) Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     - parameter level: (query) Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     - parameter framerate: (query) Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter maxFramerate: (query) Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxRefFrames: (query) Optional. (optional)
     - parameter maxVideoBitDepth: (query) Optional. The maximum video bit depth. (optional)
     - parameter requireAvc: (query) Optional. Whether to require avc. (optional)
     - parameter deInterlace: (query) Optional. Whether to deinterlace the video. (optional)
     - parameter requireNonAnamorphic: (query) Optional. Whether to require a non anamorphic stream. (optional)
     - parameter transcodingMaxAudioChannels: (query) Optional. The maximum number of audio channels to transcode. (optional)
     - parameter cpuCoreLimit: (query) Optional. The limit of how many cpu cores to use. (optional)
     - parameter liveStreamId: (query) The live stream id. (optional)
     - parameter enableMpegtsM2TsMode: (query) Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter subtitleCodec: (query) Optional. Specify a subtitle codec to encode to. (optional)
     - parameter transcodeReasons: (query) Optional. The transcoding reason. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter context: (query) Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     - parameter streamOptions: (query) Optional. The streaming options. (optional)
     - parameter enableAdaptiveBitrateStreaming: (query) Enable adaptive bitrate streaming. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<URL>
     */
    open class func getMasterHlsVideoPlaylist( itemId: String,  mediaSourceId: String,  _static: Bool? = nil,  params: String? = nil,  tag: String? = nil,  deviceProfileId: String? = nil,  playSessionId: String? = nil,  segmentContainer: String? = nil,  segmentLength: Int? = nil,  minSegments: Int? = nil,  deviceId: String? = nil,  audioCodec: String? = nil,  enableAutoStreamCopy: Bool? = nil,  allowVideoStreamCopy: Bool? = nil,  allowAudioStreamCopy: Bool? = nil,  breakOnNonKeyFrames: Bool? = nil,  audioSampleRate: Int? = nil,  maxAudioBitDepth: Int? = nil,  audioBitRate: Int? = nil,  audioChannels: Int? = nil,  maxAudioChannels: Int? = nil,  profile: String? = nil,  level: String? = nil,  framerate: Float? = nil,  maxFramerate: Float? = nil,  copyTimestamps: Bool? = nil,  startTimeTicks: Int64? = nil,  width: Int? = nil,  height: Int? = nil,  videoBitRate: Int? = nil,  subtitleStreamIndex: Int? = nil,  subtitleMethod: SubtitleDeliveryMethod? = nil,  maxRefFrames: Int? = nil,  maxVideoBitDepth: Int? = nil,  requireAvc: Bool? = nil,  deInterlace: Bool? = nil,  requireNonAnamorphic: Bool? = nil,  transcodingMaxAudioChannels: Int? = nil,  cpuCoreLimit: Int? = nil,  liveStreamId: String? = nil,  enableMpegtsM2TsMode: Bool? = nil,  videoCodec: String? = nil,  subtitleCodec: String? = nil,  transcodeReasons: String? = nil,  audioStreamIndex: Int? = nil,  videoStreamIndex: Int? = nil,  context: EncodingContext? = nil,  streamOptions: [String: String]? = nil,  enableAdaptiveBitrateStreaming: Bool? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<URL> {
        let deferred = Promise<URL>.pending()
        getMasterHlsVideoPlaylistWithRequestBuilder(itemId: itemId, mediaSourceId: mediaSourceId, _static: _static, params: params, tag: tag, deviceProfileId: deviceProfileId, playSessionId: playSessionId, segmentContainer: segmentContainer, segmentLength: segmentLength, minSegments: minSegments, deviceId: deviceId, audioCodec: audioCodec, enableAutoStreamCopy: enableAutoStreamCopy, allowVideoStreamCopy: allowVideoStreamCopy, allowAudioStreamCopy: allowAudioStreamCopy, breakOnNonKeyFrames: breakOnNonKeyFrames, audioSampleRate: audioSampleRate, maxAudioBitDepth: maxAudioBitDepth, audioBitRate: audioBitRate, audioChannels: audioChannels, maxAudioChannels: maxAudioChannels, profile: profile, level: level, framerate: framerate, maxFramerate: maxFramerate, copyTimestamps: copyTimestamps, startTimeTicks: startTimeTicks, width: width, height: height, videoBitRate: videoBitRate, subtitleStreamIndex: subtitleStreamIndex, subtitleMethod: subtitleMethod, maxRefFrames: maxRefFrames, maxVideoBitDepth: maxVideoBitDepth, requireAvc: requireAvc, deInterlace: deInterlace, requireNonAnamorphic: requireNonAnamorphic, transcodingMaxAudioChannels: transcodingMaxAudioChannels, cpuCoreLimit: cpuCoreLimit, liveStreamId: liveStreamId, enableMpegtsM2TsMode: enableMpegtsM2TsMode, videoCodec: videoCodec, subtitleCodec: subtitleCodec, transcodeReasons: transcodeReasons, audioStreamIndex: audioStreamIndex, videoStreamIndex: videoStreamIndex, context: context, streamOptions: streamOptions, enableAdaptiveBitrateStreaming: enableAdaptiveBitrateStreaming).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets a video hls playlist stream.
     - GET /Videos/{itemId}/master.m3u8
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) The item id. 
     - parameter mediaSourceId: (query) The media version id, if playing an alternate version. 
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     - parameter params: (query) The streaming parameters. (optional)
     - parameter tag: (query) The tag. (optional)
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter playSessionId: (query) The play session id. (optional)
     - parameter segmentContainer: (query) The segment container. (optional)
     - parameter segmentLength: (query) The segment length. (optional)
     - parameter minSegments: (query) The minimum number of segments. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter allowVideoStreamCopy: (query) Whether or not to allow copying of the video stream url. (optional)
     - parameter allowAudioStreamCopy: (query) Whether or not to allow copying of the audio stream url. (optional)
     - parameter breakOnNonKeyFrames: (query) Optional. Whether to break on non key frames. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     - parameter maxAudioBitDepth: (query) Optional. The maximum audio bit depth. (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     - parameter profile: (query) Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     - parameter level: (query) Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     - parameter framerate: (query) Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter maxFramerate: (query) Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxRefFrames: (query) Optional. (optional)
     - parameter maxVideoBitDepth: (query) Optional. The maximum video bit depth. (optional)
     - parameter requireAvc: (query) Optional. Whether to require avc. (optional)
     - parameter deInterlace: (query) Optional. Whether to deinterlace the video. (optional)
     - parameter requireNonAnamorphic: (query) Optional. Whether to require a non anamorphic stream. (optional)
     - parameter transcodingMaxAudioChannels: (query) Optional. The maximum number of audio channels to transcode. (optional)
     - parameter cpuCoreLimit: (query) Optional. The limit of how many cpu cores to use. (optional)
     - parameter liveStreamId: (query) The live stream id. (optional)
     - parameter enableMpegtsM2TsMode: (query) Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter subtitleCodec: (query) Optional. Specify a subtitle codec to encode to. (optional)
     - parameter transcodeReasons: (query) Optional. The transcoding reason. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter context: (query) Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     - parameter streamOptions: (query) Optional. The streaming options. (optional)
     - parameter enableAdaptiveBitrateStreaming: (query) Enable adaptive bitrate streaming. (optional, default to true)
     - returns: RequestBuilder<URL> 
     */
    open class func getMasterHlsVideoPlaylistWithRequestBuilder(itemId: String, mediaSourceId: String, _static: Bool? = nil, params: String? = nil, tag: String? = nil, deviceProfileId: String? = nil, playSessionId: String? = nil, segmentContainer: String? = nil, segmentLength: Int? = nil, minSegments: Int? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, allowVideoStreamCopy: Bool? = nil, allowAudioStreamCopy: Bool? = nil, breakOnNonKeyFrames: Bool? = nil, audioSampleRate: Int? = nil, maxAudioBitDepth: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, profile: String? = nil, level: String? = nil, framerate: Float? = nil, maxFramerate: Float? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxRefFrames: Int? = nil, maxVideoBitDepth: Int? = nil, requireAvc: Bool? = nil, deInterlace: Bool? = nil, requireNonAnamorphic: Bool? = nil, transcodingMaxAudioChannels: Int? = nil, cpuCoreLimit: Int? = nil, liveStreamId: String? = nil, enableMpegtsM2TsMode: Bool? = nil, videoCodec: String? = nil, subtitleCodec: String? = nil, transcodeReasons: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil, context: EncodingContext? = nil, streamOptions: [String: String]? = nil, enableAdaptiveBitrateStreaming: Bool? = nil) -> RequestBuilder<URL> {
        var urlPath = "/Videos/{itemId}/master.m3u8"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "static": _static?.encodeToJSON(),
            "params": params?.encodeToJSON(),
            "tag": tag?.encodeToJSON(),
            "deviceProfileId": deviceProfileId?.encodeToJSON(),
            "playSessionId": playSessionId?.encodeToJSON(),
            "segmentContainer": segmentContainer?.encodeToJSON(),
            "segmentLength": segmentLength?.encodeToJSON(),
            "minSegments": minSegments?.encodeToJSON(),
            "mediaSourceId": mediaSourceId.encodeToJSON(),
            "deviceId": deviceId?.encodeToJSON(),
            "audioCodec": audioCodec?.encodeToJSON(),
            "enableAutoStreamCopy": enableAutoStreamCopy?.encodeToJSON(),
            "allowVideoStreamCopy": allowVideoStreamCopy?.encodeToJSON(),
            "allowAudioStreamCopy": allowAudioStreamCopy?.encodeToJSON(),
            "breakOnNonKeyFrames": breakOnNonKeyFrames?.encodeToJSON(),
            "audioSampleRate": audioSampleRate?.encodeToJSON(),
            "maxAudioBitDepth": maxAudioBitDepth?.encodeToJSON(),
            "audioBitRate": audioBitRate?.encodeToJSON(),
            "audioChannels": audioChannels?.encodeToJSON(),
            "maxAudioChannels": maxAudioChannels?.encodeToJSON(),
            "profile": profile?.encodeToJSON(),
            "level": level?.encodeToJSON(),
            "framerate": framerate?.encodeToJSON(),
            "maxFramerate": maxFramerate?.encodeToJSON(),
            "copyTimestamps": copyTimestamps?.encodeToJSON(),
            "startTimeTicks": startTimeTicks?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "videoBitRate": videoBitRate?.encodeToJSON(),
            "subtitleStreamIndex": subtitleStreamIndex?.encodeToJSON(),
            "subtitleMethod": subtitleMethod?.encodeToJSON(),
            "maxRefFrames": maxRefFrames?.encodeToJSON(),
            "maxVideoBitDepth": maxVideoBitDepth?.encodeToJSON(),
            "requireAvc": requireAvc?.encodeToJSON(),
            "deInterlace": deInterlace?.encodeToJSON(),
            "requireNonAnamorphic": requireNonAnamorphic?.encodeToJSON(),
            "transcodingMaxAudioChannels": transcodingMaxAudioChannels?.encodeToJSON(),
            "cpuCoreLimit": cpuCoreLimit?.encodeToJSON(),
            "liveStreamId": liveStreamId?.encodeToJSON(),
            "enableMpegtsM2TsMode": enableMpegtsM2TsMode?.encodeToJSON(),
            "videoCodec": videoCodec?.encodeToJSON(),
            "subtitleCodec": subtitleCodec?.encodeToJSON(),
            "transcodeReasons": transcodeReasons?.encodeToJSON(),
            "audioStreamIndex": audioStreamIndex?.encodeToJSON(),
            "videoStreamIndex": videoStreamIndex?.encodeToJSON(),
            "context": context?.encodeToJSON(),
            "streamOptions": streamOptions?.encodeToJSON(),
            "enableAdaptiveBitrateStreaming": enableAdaptiveBitrateStreaming?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets an audio stream using HTTP live streaming.
     
     - parameter itemId: (path) The item id. 
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     - parameter params: (query) The streaming parameters. (optional)
     - parameter tag: (query) The tag. (optional)
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter playSessionId: (query) The play session id. (optional)
     - parameter segmentContainer: (query) The segment container. (optional)
     - parameter segmentLength: (query) The segment length. (optional)
     - parameter minSegments: (query) The minimum number of segments. (optional)
     - parameter mediaSourceId: (query) The media version id, if playing an alternate version. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter allowVideoStreamCopy: (query) Whether or not to allow copying of the video stream url. (optional)
     - parameter allowAudioStreamCopy: (query) Whether or not to allow copying of the audio stream url. (optional)
     - parameter breakOnNonKeyFrames: (query) Optional. Whether to break on non key frames. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     - parameter maxAudioBitDepth: (query) Optional. The maximum audio bit depth. (optional)
     - parameter maxStreamingBitrate: (query) Optional. The maximum streaming bitrate. (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     - parameter profile: (query) Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     - parameter level: (query) Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     - parameter framerate: (query) Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter maxFramerate: (query) Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxRefFrames: (query) Optional. (optional)
     - parameter maxVideoBitDepth: (query) Optional. The maximum video bit depth. (optional)
     - parameter requireAvc: (query) Optional. Whether to require avc. (optional)
     - parameter deInterlace: (query) Optional. Whether to deinterlace the video. (optional)
     - parameter requireNonAnamorphic: (query) Optional. Whether to require a non anamorphic stream. (optional)
     - parameter transcodingMaxAudioChannels: (query) Optional. The maximum number of audio channels to transcode. (optional)
     - parameter cpuCoreLimit: (query) Optional. The limit of how many cpu cores to use. (optional)
     - parameter liveStreamId: (query) The live stream id. (optional)
     - parameter enableMpegtsM2TsMode: (query) Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter subtitleCodec: (query) Optional. Specify a subtitle codec to encode to. (optional)
     - parameter transcodeReasons: (query) Optional. The transcoding reason. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter context: (query) Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     - parameter streamOptions: (query) Optional. The streaming options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<URL>
     */
    open class func getVariantHlsAudioPlaylist( itemId: String,  _static: Bool? = nil,  params: String? = nil,  tag: String? = nil,  deviceProfileId: String? = nil,  playSessionId: String? = nil,  segmentContainer: String? = nil,  segmentLength: Int? = nil,  minSegments: Int? = nil,  mediaSourceId: String? = nil,  deviceId: String? = nil,  audioCodec: String? = nil,  enableAutoStreamCopy: Bool? = nil,  allowVideoStreamCopy: Bool? = nil,  allowAudioStreamCopy: Bool? = nil,  breakOnNonKeyFrames: Bool? = nil,  audioSampleRate: Int? = nil,  maxAudioBitDepth: Int? = nil,  maxStreamingBitrate: Int? = nil,  audioBitRate: Int? = nil,  audioChannels: Int? = nil,  maxAudioChannels: Int? = nil,  profile: String? = nil,  level: String? = nil,  framerate: Float? = nil,  maxFramerate: Float? = nil,  copyTimestamps: Bool? = nil,  startTimeTicks: Int64? = nil,  width: Int? = nil,  height: Int? = nil,  videoBitRate: Int? = nil,  subtitleStreamIndex: Int? = nil,  subtitleMethod: SubtitleDeliveryMethod? = nil,  maxRefFrames: Int? = nil,  maxVideoBitDepth: Int? = nil,  requireAvc: Bool? = nil,  deInterlace: Bool? = nil,  requireNonAnamorphic: Bool? = nil,  transcodingMaxAudioChannels: Int? = nil,  cpuCoreLimit: Int? = nil,  liveStreamId: String? = nil,  enableMpegtsM2TsMode: Bool? = nil,  videoCodec: String? = nil,  subtitleCodec: String? = nil,  transcodeReasons: String? = nil,  audioStreamIndex: Int? = nil,  videoStreamIndex: Int? = nil,  context: EncodingContext? = nil,  streamOptions: [String: String]? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<URL> {
        let deferred = Promise<URL>.pending()
        getVariantHlsAudioPlaylistWithRequestBuilder(itemId: itemId, _static: _static, params: params, tag: tag, deviceProfileId: deviceProfileId, playSessionId: playSessionId, segmentContainer: segmentContainer, segmentLength: segmentLength, minSegments: minSegments, mediaSourceId: mediaSourceId, deviceId: deviceId, audioCodec: audioCodec, enableAutoStreamCopy: enableAutoStreamCopy, allowVideoStreamCopy: allowVideoStreamCopy, allowAudioStreamCopy: allowAudioStreamCopy, breakOnNonKeyFrames: breakOnNonKeyFrames, audioSampleRate: audioSampleRate, maxAudioBitDepth: maxAudioBitDepth, maxStreamingBitrate: maxStreamingBitrate, audioBitRate: audioBitRate, audioChannels: audioChannels, maxAudioChannels: maxAudioChannels, profile: profile, level: level, framerate: framerate, maxFramerate: maxFramerate, copyTimestamps: copyTimestamps, startTimeTicks: startTimeTicks, width: width, height: height, videoBitRate: videoBitRate, subtitleStreamIndex: subtitleStreamIndex, subtitleMethod: subtitleMethod, maxRefFrames: maxRefFrames, maxVideoBitDepth: maxVideoBitDepth, requireAvc: requireAvc, deInterlace: deInterlace, requireNonAnamorphic: requireNonAnamorphic, transcodingMaxAudioChannels: transcodingMaxAudioChannels, cpuCoreLimit: cpuCoreLimit, liveStreamId: liveStreamId, enableMpegtsM2TsMode: enableMpegtsM2TsMode, videoCodec: videoCodec, subtitleCodec: subtitleCodec, transcodeReasons: transcodeReasons, audioStreamIndex: audioStreamIndex, videoStreamIndex: videoStreamIndex, context: context, streamOptions: streamOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets an audio stream using HTTP live streaming.
     - GET /Audio/{itemId}/main.m3u8
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) The item id. 
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     - parameter params: (query) The streaming parameters. (optional)
     - parameter tag: (query) The tag. (optional)
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter playSessionId: (query) The play session id. (optional)
     - parameter segmentContainer: (query) The segment container. (optional)
     - parameter segmentLength: (query) The segment length. (optional)
     - parameter minSegments: (query) The minimum number of segments. (optional)
     - parameter mediaSourceId: (query) The media version id, if playing an alternate version. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter allowVideoStreamCopy: (query) Whether or not to allow copying of the video stream url. (optional)
     - parameter allowAudioStreamCopy: (query) Whether or not to allow copying of the audio stream url. (optional)
     - parameter breakOnNonKeyFrames: (query) Optional. Whether to break on non key frames. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     - parameter maxAudioBitDepth: (query) Optional. The maximum audio bit depth. (optional)
     - parameter maxStreamingBitrate: (query) Optional. The maximum streaming bitrate. (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     - parameter profile: (query) Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     - parameter level: (query) Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     - parameter framerate: (query) Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter maxFramerate: (query) Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxRefFrames: (query) Optional. (optional)
     - parameter maxVideoBitDepth: (query) Optional. The maximum video bit depth. (optional)
     - parameter requireAvc: (query) Optional. Whether to require avc. (optional)
     - parameter deInterlace: (query) Optional. Whether to deinterlace the video. (optional)
     - parameter requireNonAnamorphic: (query) Optional. Whether to require a non anamorphic stream. (optional)
     - parameter transcodingMaxAudioChannels: (query) Optional. The maximum number of audio channels to transcode. (optional)
     - parameter cpuCoreLimit: (query) Optional. The limit of how many cpu cores to use. (optional)
     - parameter liveStreamId: (query) The live stream id. (optional)
     - parameter enableMpegtsM2TsMode: (query) Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter subtitleCodec: (query) Optional. Specify a subtitle codec to encode to. (optional)
     - parameter transcodeReasons: (query) Optional. The transcoding reason. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter context: (query) Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     - parameter streamOptions: (query) Optional. The streaming options. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getVariantHlsAudioPlaylistWithRequestBuilder(itemId: String, _static: Bool? = nil, params: String? = nil, tag: String? = nil, deviceProfileId: String? = nil, playSessionId: String? = nil, segmentContainer: String? = nil, segmentLength: Int? = nil, minSegments: Int? = nil, mediaSourceId: String? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, allowVideoStreamCopy: Bool? = nil, allowAudioStreamCopy: Bool? = nil, breakOnNonKeyFrames: Bool? = nil, audioSampleRate: Int? = nil, maxAudioBitDepth: Int? = nil, maxStreamingBitrate: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, profile: String? = nil, level: String? = nil, framerate: Float? = nil, maxFramerate: Float? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxRefFrames: Int? = nil, maxVideoBitDepth: Int? = nil, requireAvc: Bool? = nil, deInterlace: Bool? = nil, requireNonAnamorphic: Bool? = nil, transcodingMaxAudioChannels: Int? = nil, cpuCoreLimit: Int? = nil, liveStreamId: String? = nil, enableMpegtsM2TsMode: Bool? = nil, videoCodec: String? = nil, subtitleCodec: String? = nil, transcodeReasons: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil, context: EncodingContext? = nil, streamOptions: [String: String]? = nil) -> RequestBuilder<URL> {
        var urlPath = "/Audio/{itemId}/main.m3u8"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "static": _static?.encodeToJSON(),
            "params": params?.encodeToJSON(),
            "tag": tag?.encodeToJSON(),
            "deviceProfileId": deviceProfileId?.encodeToJSON(),
            "playSessionId": playSessionId?.encodeToJSON(),
            "segmentContainer": segmentContainer?.encodeToJSON(),
            "segmentLength": segmentLength?.encodeToJSON(),
            "minSegments": minSegments?.encodeToJSON(),
            "mediaSourceId": mediaSourceId?.encodeToJSON(),
            "deviceId": deviceId?.encodeToJSON(),
            "audioCodec": audioCodec?.encodeToJSON(),
            "enableAutoStreamCopy": enableAutoStreamCopy?.encodeToJSON(),
            "allowVideoStreamCopy": allowVideoStreamCopy?.encodeToJSON(),
            "allowAudioStreamCopy": allowAudioStreamCopy?.encodeToJSON(),
            "breakOnNonKeyFrames": breakOnNonKeyFrames?.encodeToJSON(),
            "audioSampleRate": audioSampleRate?.encodeToJSON(),
            "maxAudioBitDepth": maxAudioBitDepth?.encodeToJSON(),
            "maxStreamingBitrate": maxStreamingBitrate?.encodeToJSON(),
            "audioBitRate": audioBitRate?.encodeToJSON(),
            "audioChannels": audioChannels?.encodeToJSON(),
            "maxAudioChannels": maxAudioChannels?.encodeToJSON(),
            "profile": profile?.encodeToJSON(),
            "level": level?.encodeToJSON(),
            "framerate": framerate?.encodeToJSON(),
            "maxFramerate": maxFramerate?.encodeToJSON(),
            "copyTimestamps": copyTimestamps?.encodeToJSON(),
            "startTimeTicks": startTimeTicks?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "videoBitRate": videoBitRate?.encodeToJSON(),
            "subtitleStreamIndex": subtitleStreamIndex?.encodeToJSON(),
            "subtitleMethod": subtitleMethod?.encodeToJSON(),
            "maxRefFrames": maxRefFrames?.encodeToJSON(),
            "maxVideoBitDepth": maxVideoBitDepth?.encodeToJSON(),
            "requireAvc": requireAvc?.encodeToJSON(),
            "deInterlace": deInterlace?.encodeToJSON(),
            "requireNonAnamorphic": requireNonAnamorphic?.encodeToJSON(),
            "transcodingMaxAudioChannels": transcodingMaxAudioChannels?.encodeToJSON(),
            "cpuCoreLimit": cpuCoreLimit?.encodeToJSON(),
            "liveStreamId": liveStreamId?.encodeToJSON(),
            "enableMpegtsM2TsMode": enableMpegtsM2TsMode?.encodeToJSON(),
            "videoCodec": videoCodec?.encodeToJSON(),
            "subtitleCodec": subtitleCodec?.encodeToJSON(),
            "transcodeReasons": transcodeReasons?.encodeToJSON(),
            "audioStreamIndex": audioStreamIndex?.encodeToJSON(),
            "videoStreamIndex": videoStreamIndex?.encodeToJSON(),
            "context": context?.encodeToJSON(),
            "streamOptions": streamOptions?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a video stream using HTTP live streaming.
     
     - parameter itemId: (path) The item id. 
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     - parameter params: (query) The streaming parameters. (optional)
     - parameter tag: (query) The tag. (optional)
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter playSessionId: (query) The play session id. (optional)
     - parameter segmentContainer: (query) The segment container. (optional)
     - parameter segmentLength: (query) The segment length. (optional)
     - parameter minSegments: (query) The minimum number of segments. (optional)
     - parameter mediaSourceId: (query) The media version id, if playing an alternate version. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter allowVideoStreamCopy: (query) Whether or not to allow copying of the video stream url. (optional)
     - parameter allowAudioStreamCopy: (query) Whether or not to allow copying of the audio stream url. (optional)
     - parameter breakOnNonKeyFrames: (query) Optional. Whether to break on non key frames. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     - parameter maxAudioBitDepth: (query) Optional. The maximum audio bit depth. (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     - parameter profile: (query) Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     - parameter level: (query) Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     - parameter framerate: (query) Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter maxFramerate: (query) Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxRefFrames: (query) Optional. (optional)
     - parameter maxVideoBitDepth: (query) Optional. The maximum video bit depth. (optional)
     - parameter requireAvc: (query) Optional. Whether to require avc. (optional)
     - parameter deInterlace: (query) Optional. Whether to deinterlace the video. (optional)
     - parameter requireNonAnamorphic: (query) Optional. Whether to require a non anamorphic stream. (optional)
     - parameter transcodingMaxAudioChannels: (query) Optional. The maximum number of audio channels to transcode. (optional)
     - parameter cpuCoreLimit: (query) Optional. The limit of how many cpu cores to use. (optional)
     - parameter liveStreamId: (query) The live stream id. (optional)
     - parameter enableMpegtsM2TsMode: (query) Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter subtitleCodec: (query) Optional. Specify a subtitle codec to encode to. (optional)
     - parameter transcodeReasons: (query) Optional. The transcoding reason. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter context: (query) Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     - parameter streamOptions: (query) Optional. The streaming options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<URL>
     */
    open class func getVariantHlsVideoPlaylist( itemId: String,  _static: Bool? = nil,  params: String? = nil,  tag: String? = nil,  deviceProfileId: String? = nil,  playSessionId: String? = nil,  segmentContainer: String? = nil,  segmentLength: Int? = nil,  minSegments: Int? = nil,  mediaSourceId: String? = nil,  deviceId: String? = nil,  audioCodec: String? = nil,  enableAutoStreamCopy: Bool? = nil,  allowVideoStreamCopy: Bool? = nil,  allowAudioStreamCopy: Bool? = nil,  breakOnNonKeyFrames: Bool? = nil,  audioSampleRate: Int? = nil,  maxAudioBitDepth: Int? = nil,  audioBitRate: Int? = nil,  audioChannels: Int? = nil,  maxAudioChannels: Int? = nil,  profile: String? = nil,  level: String? = nil,  framerate: Float? = nil,  maxFramerate: Float? = nil,  copyTimestamps: Bool? = nil,  startTimeTicks: Int64? = nil,  width: Int? = nil,  height: Int? = nil,  videoBitRate: Int? = nil,  subtitleStreamIndex: Int? = nil,  subtitleMethod: SubtitleDeliveryMethod? = nil,  maxRefFrames: Int? = nil,  maxVideoBitDepth: Int? = nil,  requireAvc: Bool? = nil,  deInterlace: Bool? = nil,  requireNonAnamorphic: Bool? = nil,  transcodingMaxAudioChannels: Int? = nil,  cpuCoreLimit: Int? = nil,  liveStreamId: String? = nil,  enableMpegtsM2TsMode: Bool? = nil,  videoCodec: String? = nil,  subtitleCodec: String? = nil,  transcodeReasons: String? = nil,  audioStreamIndex: Int? = nil,  videoStreamIndex: Int? = nil,  context: EncodingContext? = nil,  streamOptions: [String: String]? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<URL> {
        let deferred = Promise<URL>.pending()
        getVariantHlsVideoPlaylistWithRequestBuilder(itemId: itemId, _static: _static, params: params, tag: tag, deviceProfileId: deviceProfileId, playSessionId: playSessionId, segmentContainer: segmentContainer, segmentLength: segmentLength, minSegments: minSegments, mediaSourceId: mediaSourceId, deviceId: deviceId, audioCodec: audioCodec, enableAutoStreamCopy: enableAutoStreamCopy, allowVideoStreamCopy: allowVideoStreamCopy, allowAudioStreamCopy: allowAudioStreamCopy, breakOnNonKeyFrames: breakOnNonKeyFrames, audioSampleRate: audioSampleRate, maxAudioBitDepth: maxAudioBitDepth, audioBitRate: audioBitRate, audioChannels: audioChannels, maxAudioChannels: maxAudioChannels, profile: profile, level: level, framerate: framerate, maxFramerate: maxFramerate, copyTimestamps: copyTimestamps, startTimeTicks: startTimeTicks, width: width, height: height, videoBitRate: videoBitRate, subtitleStreamIndex: subtitleStreamIndex, subtitleMethod: subtitleMethod, maxRefFrames: maxRefFrames, maxVideoBitDepth: maxVideoBitDepth, requireAvc: requireAvc, deInterlace: deInterlace, requireNonAnamorphic: requireNonAnamorphic, transcodingMaxAudioChannels: transcodingMaxAudioChannels, cpuCoreLimit: cpuCoreLimit, liveStreamId: liveStreamId, enableMpegtsM2TsMode: enableMpegtsM2TsMode, videoCodec: videoCodec, subtitleCodec: subtitleCodec, transcodeReasons: transcodeReasons, audioStreamIndex: audioStreamIndex, videoStreamIndex: videoStreamIndex, context: context, streamOptions: streamOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets a video stream using HTTP live streaming.
     - GET /Videos/{itemId}/main.m3u8
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) The item id. 
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     - parameter params: (query) The streaming parameters. (optional)
     - parameter tag: (query) The tag. (optional)
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter playSessionId: (query) The play session id. (optional)
     - parameter segmentContainer: (query) The segment container. (optional)
     - parameter segmentLength: (query) The segment length. (optional)
     - parameter minSegments: (query) The minimum number of segments. (optional)
     - parameter mediaSourceId: (query) The media version id, if playing an alternate version. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter allowVideoStreamCopy: (query) Whether or not to allow copying of the video stream url. (optional)
     - parameter allowAudioStreamCopy: (query) Whether or not to allow copying of the audio stream url. (optional)
     - parameter breakOnNonKeyFrames: (query) Optional. Whether to break on non key frames. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     - parameter maxAudioBitDepth: (query) Optional. The maximum audio bit depth. (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     - parameter profile: (query) Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     - parameter level: (query) Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     - parameter framerate: (query) Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter maxFramerate: (query) Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxRefFrames: (query) Optional. (optional)
     - parameter maxVideoBitDepth: (query) Optional. The maximum video bit depth. (optional)
     - parameter requireAvc: (query) Optional. Whether to require avc. (optional)
     - parameter deInterlace: (query) Optional. Whether to deinterlace the video. (optional)
     - parameter requireNonAnamorphic: (query) Optional. Whether to require a non anamorphic stream. (optional)
     - parameter transcodingMaxAudioChannels: (query) Optional. The maximum number of audio channels to transcode. (optional)
     - parameter cpuCoreLimit: (query) Optional. The limit of how many cpu cores to use. (optional)
     - parameter liveStreamId: (query) The live stream id. (optional)
     - parameter enableMpegtsM2TsMode: (query) Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter subtitleCodec: (query) Optional. Specify a subtitle codec to encode to. (optional)
     - parameter transcodeReasons: (query) Optional. The transcoding reason. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter context: (query) Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     - parameter streamOptions: (query) Optional. The streaming options. (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getVariantHlsVideoPlaylistWithRequestBuilder(itemId: String, _static: Bool? = nil, params: String? = nil, tag: String? = nil, deviceProfileId: String? = nil, playSessionId: String? = nil, segmentContainer: String? = nil, segmentLength: Int? = nil, minSegments: Int? = nil, mediaSourceId: String? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, allowVideoStreamCopy: Bool? = nil, allowAudioStreamCopy: Bool? = nil, breakOnNonKeyFrames: Bool? = nil, audioSampleRate: Int? = nil, maxAudioBitDepth: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, profile: String? = nil, level: String? = nil, framerate: Float? = nil, maxFramerate: Float? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxRefFrames: Int? = nil, maxVideoBitDepth: Int? = nil, requireAvc: Bool? = nil, deInterlace: Bool? = nil, requireNonAnamorphic: Bool? = nil, transcodingMaxAudioChannels: Int? = nil, cpuCoreLimit: Int? = nil, liveStreamId: String? = nil, enableMpegtsM2TsMode: Bool? = nil, videoCodec: String? = nil, subtitleCodec: String? = nil, transcodeReasons: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil, context: EncodingContext? = nil, streamOptions: [String: String]? = nil) -> RequestBuilder<URL> {
        var urlPath = "/Videos/{itemId}/main.m3u8"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "static": _static?.encodeToJSON(),
            "params": params?.encodeToJSON(),
            "tag": tag?.encodeToJSON(),
            "deviceProfileId": deviceProfileId?.encodeToJSON(),
            "playSessionId": playSessionId?.encodeToJSON(),
            "segmentContainer": segmentContainer?.encodeToJSON(),
            "segmentLength": segmentLength?.encodeToJSON(),
            "minSegments": minSegments?.encodeToJSON(),
            "mediaSourceId": mediaSourceId?.encodeToJSON(),
            "deviceId": deviceId?.encodeToJSON(),
            "audioCodec": audioCodec?.encodeToJSON(),
            "enableAutoStreamCopy": enableAutoStreamCopy?.encodeToJSON(),
            "allowVideoStreamCopy": allowVideoStreamCopy?.encodeToJSON(),
            "allowAudioStreamCopy": allowAudioStreamCopy?.encodeToJSON(),
            "breakOnNonKeyFrames": breakOnNonKeyFrames?.encodeToJSON(),
            "audioSampleRate": audioSampleRate?.encodeToJSON(),
            "maxAudioBitDepth": maxAudioBitDepth?.encodeToJSON(),
            "audioBitRate": audioBitRate?.encodeToJSON(),
            "audioChannels": audioChannels?.encodeToJSON(),
            "maxAudioChannels": maxAudioChannels?.encodeToJSON(),
            "profile": profile?.encodeToJSON(),
            "level": level?.encodeToJSON(),
            "framerate": framerate?.encodeToJSON(),
            "maxFramerate": maxFramerate?.encodeToJSON(),
            "copyTimestamps": copyTimestamps?.encodeToJSON(),
            "startTimeTicks": startTimeTicks?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "videoBitRate": videoBitRate?.encodeToJSON(),
            "subtitleStreamIndex": subtitleStreamIndex?.encodeToJSON(),
            "subtitleMethod": subtitleMethod?.encodeToJSON(),
            "maxRefFrames": maxRefFrames?.encodeToJSON(),
            "maxVideoBitDepth": maxVideoBitDepth?.encodeToJSON(),
            "requireAvc": requireAvc?.encodeToJSON(),
            "deInterlace": deInterlace?.encodeToJSON(),
            "requireNonAnamorphic": requireNonAnamorphic?.encodeToJSON(),
            "transcodingMaxAudioChannels": transcodingMaxAudioChannels?.encodeToJSON(),
            "cpuCoreLimit": cpuCoreLimit?.encodeToJSON(),
            "liveStreamId": liveStreamId?.encodeToJSON(),
            "enableMpegtsM2TsMode": enableMpegtsM2TsMode?.encodeToJSON(),
            "videoCodec": videoCodec?.encodeToJSON(),
            "subtitleCodec": subtitleCodec?.encodeToJSON(),
            "transcodeReasons": transcodeReasons?.encodeToJSON(),
            "audioStreamIndex": audioStreamIndex?.encodeToJSON(),
            "videoStreamIndex": videoStreamIndex?.encodeToJSON(),
            "context": context?.encodeToJSON(),
            "streamOptions": streamOptions?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets an audio hls playlist stream.
     
     - parameter itemId: (path) The item id. 
     - parameter mediaSourceId: (query) The media version id, if playing an alternate version. 
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     - parameter params: (query) The streaming parameters. (optional)
     - parameter tag: (query) The tag. (optional)
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter playSessionId: (query) The play session id. (optional)
     - parameter segmentContainer: (query) The segment container. (optional)
     - parameter segmentLength: (query) The segment length. (optional)
     - parameter minSegments: (query) The minimum number of segments. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter allowVideoStreamCopy: (query) Whether or not to allow copying of the video stream url. (optional)
     - parameter allowAudioStreamCopy: (query) Whether or not to allow copying of the audio stream url. (optional)
     - parameter breakOnNonKeyFrames: (query) Optional. Whether to break on non key frames. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     - parameter maxAudioBitDepth: (query) Optional. The maximum audio bit depth. (optional)
     - parameter maxStreamingBitrate: (query) Optional. The maximum streaming bitrate. (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     - parameter profile: (query) Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     - parameter level: (query) Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     - parameter framerate: (query) Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter maxFramerate: (query) Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxRefFrames: (query) Optional. (optional)
     - parameter maxVideoBitDepth: (query) Optional. The maximum video bit depth. (optional)
     - parameter requireAvc: (query) Optional. Whether to require avc. (optional)
     - parameter deInterlace: (query) Optional. Whether to deinterlace the video. (optional)
     - parameter requireNonAnamorphic: (query) Optional. Whether to require a non anamorphic stream. (optional)
     - parameter transcodingMaxAudioChannels: (query) Optional. The maximum number of audio channels to transcode. (optional)
     - parameter cpuCoreLimit: (query) Optional. The limit of how many cpu cores to use. (optional)
     - parameter liveStreamId: (query) The live stream id. (optional)
     - parameter enableMpegtsM2TsMode: (query) Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter subtitleCodec: (query) Optional. Specify a subtitle codec to encode to. (optional)
     - parameter transcodeReasons: (query) Optional. The transcoding reason. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter context: (query) Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     - parameter streamOptions: (query) Optional. The streaming options. (optional)
     - parameter enableAdaptiveBitrateStreaming: (query) Enable adaptive bitrate streaming. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<URL>
     */
    open class func headMasterHlsAudioPlaylist( itemId: String,  mediaSourceId: String,  _static: Bool? = nil,  params: String? = nil,  tag: String? = nil,  deviceProfileId: String? = nil,  playSessionId: String? = nil,  segmentContainer: String? = nil,  segmentLength: Int? = nil,  minSegments: Int? = nil,  deviceId: String? = nil,  audioCodec: String? = nil,  enableAutoStreamCopy: Bool? = nil,  allowVideoStreamCopy: Bool? = nil,  allowAudioStreamCopy: Bool? = nil,  breakOnNonKeyFrames: Bool? = nil,  audioSampleRate: Int? = nil,  maxAudioBitDepth: Int? = nil,  maxStreamingBitrate: Int? = nil,  audioBitRate: Int? = nil,  audioChannels: Int? = nil,  maxAudioChannels: Int? = nil,  profile: String? = nil,  level: String? = nil,  framerate: Float? = nil,  maxFramerate: Float? = nil,  copyTimestamps: Bool? = nil,  startTimeTicks: Int64? = nil,  width: Int? = nil,  height: Int? = nil,  videoBitRate: Int? = nil,  subtitleStreamIndex: Int? = nil,  subtitleMethod: SubtitleDeliveryMethod? = nil,  maxRefFrames: Int? = nil,  maxVideoBitDepth: Int? = nil,  requireAvc: Bool? = nil,  deInterlace: Bool? = nil,  requireNonAnamorphic: Bool? = nil,  transcodingMaxAudioChannels: Int? = nil,  cpuCoreLimit: Int? = nil,  liveStreamId: String? = nil,  enableMpegtsM2TsMode: Bool? = nil,  videoCodec: String? = nil,  subtitleCodec: String? = nil,  transcodeReasons: String? = nil,  audioStreamIndex: Int? = nil,  videoStreamIndex: Int? = nil,  context: EncodingContext? = nil,  streamOptions: [String: String]? = nil,  enableAdaptiveBitrateStreaming: Bool? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<URL> {
        let deferred = Promise<URL>.pending()
        headMasterHlsAudioPlaylistWithRequestBuilder(itemId: itemId, mediaSourceId: mediaSourceId, _static: _static, params: params, tag: tag, deviceProfileId: deviceProfileId, playSessionId: playSessionId, segmentContainer: segmentContainer, segmentLength: segmentLength, minSegments: minSegments, deviceId: deviceId, audioCodec: audioCodec, enableAutoStreamCopy: enableAutoStreamCopy, allowVideoStreamCopy: allowVideoStreamCopy, allowAudioStreamCopy: allowAudioStreamCopy, breakOnNonKeyFrames: breakOnNonKeyFrames, audioSampleRate: audioSampleRate, maxAudioBitDepth: maxAudioBitDepth, maxStreamingBitrate: maxStreamingBitrate, audioBitRate: audioBitRate, audioChannels: audioChannels, maxAudioChannels: maxAudioChannels, profile: profile, level: level, framerate: framerate, maxFramerate: maxFramerate, copyTimestamps: copyTimestamps, startTimeTicks: startTimeTicks, width: width, height: height, videoBitRate: videoBitRate, subtitleStreamIndex: subtitleStreamIndex, subtitleMethod: subtitleMethod, maxRefFrames: maxRefFrames, maxVideoBitDepth: maxVideoBitDepth, requireAvc: requireAvc, deInterlace: deInterlace, requireNonAnamorphic: requireNonAnamorphic, transcodingMaxAudioChannels: transcodingMaxAudioChannels, cpuCoreLimit: cpuCoreLimit, liveStreamId: liveStreamId, enableMpegtsM2TsMode: enableMpegtsM2TsMode, videoCodec: videoCodec, subtitleCodec: subtitleCodec, transcodeReasons: transcodeReasons, audioStreamIndex: audioStreamIndex, videoStreamIndex: videoStreamIndex, context: context, streamOptions: streamOptions, enableAdaptiveBitrateStreaming: enableAdaptiveBitrateStreaming).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets an audio hls playlist stream.
     - HEAD /Audio/{itemId}/master.m3u8
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) The item id. 
     - parameter mediaSourceId: (query) The media version id, if playing an alternate version. 
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     - parameter params: (query) The streaming parameters. (optional)
     - parameter tag: (query) The tag. (optional)
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter playSessionId: (query) The play session id. (optional)
     - parameter segmentContainer: (query) The segment container. (optional)
     - parameter segmentLength: (query) The segment length. (optional)
     - parameter minSegments: (query) The minimum number of segments. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter allowVideoStreamCopy: (query) Whether or not to allow copying of the video stream url. (optional)
     - parameter allowAudioStreamCopy: (query) Whether or not to allow copying of the audio stream url. (optional)
     - parameter breakOnNonKeyFrames: (query) Optional. Whether to break on non key frames. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     - parameter maxAudioBitDepth: (query) Optional. The maximum audio bit depth. (optional)
     - parameter maxStreamingBitrate: (query) Optional. The maximum streaming bitrate. (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     - parameter profile: (query) Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     - parameter level: (query) Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     - parameter framerate: (query) Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter maxFramerate: (query) Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxRefFrames: (query) Optional. (optional)
     - parameter maxVideoBitDepth: (query) Optional. The maximum video bit depth. (optional)
     - parameter requireAvc: (query) Optional. Whether to require avc. (optional)
     - parameter deInterlace: (query) Optional. Whether to deinterlace the video. (optional)
     - parameter requireNonAnamorphic: (query) Optional. Whether to require a non anamorphic stream. (optional)
     - parameter transcodingMaxAudioChannels: (query) Optional. The maximum number of audio channels to transcode. (optional)
     - parameter cpuCoreLimit: (query) Optional. The limit of how many cpu cores to use. (optional)
     - parameter liveStreamId: (query) The live stream id. (optional)
     - parameter enableMpegtsM2TsMode: (query) Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter subtitleCodec: (query) Optional. Specify a subtitle codec to encode to. (optional)
     - parameter transcodeReasons: (query) Optional. The transcoding reason. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter context: (query) Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     - parameter streamOptions: (query) Optional. The streaming options. (optional)
     - parameter enableAdaptiveBitrateStreaming: (query) Enable adaptive bitrate streaming. (optional, default to true)
     - returns: RequestBuilder<URL> 
     */
    open class func headMasterHlsAudioPlaylistWithRequestBuilder(itemId: String, mediaSourceId: String, _static: Bool? = nil, params: String? = nil, tag: String? = nil, deviceProfileId: String? = nil, playSessionId: String? = nil, segmentContainer: String? = nil, segmentLength: Int? = nil, minSegments: Int? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, allowVideoStreamCopy: Bool? = nil, allowAudioStreamCopy: Bool? = nil, breakOnNonKeyFrames: Bool? = nil, audioSampleRate: Int? = nil, maxAudioBitDepth: Int? = nil, maxStreamingBitrate: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, profile: String? = nil, level: String? = nil, framerate: Float? = nil, maxFramerate: Float? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxRefFrames: Int? = nil, maxVideoBitDepth: Int? = nil, requireAvc: Bool? = nil, deInterlace: Bool? = nil, requireNonAnamorphic: Bool? = nil, transcodingMaxAudioChannels: Int? = nil, cpuCoreLimit: Int? = nil, liveStreamId: String? = nil, enableMpegtsM2TsMode: Bool? = nil, videoCodec: String? = nil, subtitleCodec: String? = nil, transcodeReasons: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil, context: EncodingContext? = nil, streamOptions: [String: String]? = nil, enableAdaptiveBitrateStreaming: Bool? = nil) -> RequestBuilder<URL> {
        var urlPath = "/Audio/{itemId}/master.m3u8"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "static": _static?.encodeToJSON(),
            "params": params?.encodeToJSON(),
            "tag": tag?.encodeToJSON(),
            "deviceProfileId": deviceProfileId?.encodeToJSON(),
            "playSessionId": playSessionId?.encodeToJSON(),
            "segmentContainer": segmentContainer?.encodeToJSON(),
            "segmentLength": segmentLength?.encodeToJSON(),
            "minSegments": minSegments?.encodeToJSON(),
            "mediaSourceId": mediaSourceId.encodeToJSON(),
            "deviceId": deviceId?.encodeToJSON(),
            "audioCodec": audioCodec?.encodeToJSON(),
            "enableAutoStreamCopy": enableAutoStreamCopy?.encodeToJSON(),
            "allowVideoStreamCopy": allowVideoStreamCopy?.encodeToJSON(),
            "allowAudioStreamCopy": allowAudioStreamCopy?.encodeToJSON(),
            "breakOnNonKeyFrames": breakOnNonKeyFrames?.encodeToJSON(),
            "audioSampleRate": audioSampleRate?.encodeToJSON(),
            "maxAudioBitDepth": maxAudioBitDepth?.encodeToJSON(),
            "maxStreamingBitrate": maxStreamingBitrate?.encodeToJSON(),
            "audioBitRate": audioBitRate?.encodeToJSON(),
            "audioChannels": audioChannels?.encodeToJSON(),
            "maxAudioChannels": maxAudioChannels?.encodeToJSON(),
            "profile": profile?.encodeToJSON(),
            "level": level?.encodeToJSON(),
            "framerate": framerate?.encodeToJSON(),
            "maxFramerate": maxFramerate?.encodeToJSON(),
            "copyTimestamps": copyTimestamps?.encodeToJSON(),
            "startTimeTicks": startTimeTicks?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "videoBitRate": videoBitRate?.encodeToJSON(),
            "subtitleStreamIndex": subtitleStreamIndex?.encodeToJSON(),
            "subtitleMethod": subtitleMethod?.encodeToJSON(),
            "maxRefFrames": maxRefFrames?.encodeToJSON(),
            "maxVideoBitDepth": maxVideoBitDepth?.encodeToJSON(),
            "requireAvc": requireAvc?.encodeToJSON(),
            "deInterlace": deInterlace?.encodeToJSON(),
            "requireNonAnamorphic": requireNonAnamorphic?.encodeToJSON(),
            "transcodingMaxAudioChannels": transcodingMaxAudioChannels?.encodeToJSON(),
            "cpuCoreLimit": cpuCoreLimit?.encodeToJSON(),
            "liveStreamId": liveStreamId?.encodeToJSON(),
            "enableMpegtsM2TsMode": enableMpegtsM2TsMode?.encodeToJSON(),
            "videoCodec": videoCodec?.encodeToJSON(),
            "subtitleCodec": subtitleCodec?.encodeToJSON(),
            "transcodeReasons": transcodeReasons?.encodeToJSON(),
            "audioStreamIndex": audioStreamIndex?.encodeToJSON(),
            "videoStreamIndex": videoStreamIndex?.encodeToJSON(),
            "context": context?.encodeToJSON(),
            "streamOptions": streamOptions?.encodeToJSON(),
            "enableAdaptiveBitrateStreaming": enableAdaptiveBitrateStreaming?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a video hls playlist stream.
     
     - parameter itemId: (path) The item id. 
     - parameter mediaSourceId: (query) The media version id, if playing an alternate version. 
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     - parameter params: (query) The streaming parameters. (optional)
     - parameter tag: (query) The tag. (optional)
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter playSessionId: (query) The play session id. (optional)
     - parameter segmentContainer: (query) The segment container. (optional)
     - parameter segmentLength: (query) The segment length. (optional)
     - parameter minSegments: (query) The minimum number of segments. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter allowVideoStreamCopy: (query) Whether or not to allow copying of the video stream url. (optional)
     - parameter allowAudioStreamCopy: (query) Whether or not to allow copying of the audio stream url. (optional)
     - parameter breakOnNonKeyFrames: (query) Optional. Whether to break on non key frames. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     - parameter maxAudioBitDepth: (query) Optional. The maximum audio bit depth. (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     - parameter profile: (query) Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     - parameter level: (query) Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     - parameter framerate: (query) Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter maxFramerate: (query) Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxRefFrames: (query) Optional. (optional)
     - parameter maxVideoBitDepth: (query) Optional. The maximum video bit depth. (optional)
     - parameter requireAvc: (query) Optional. Whether to require avc. (optional)
     - parameter deInterlace: (query) Optional. Whether to deinterlace the video. (optional)
     - parameter requireNonAnamorphic: (query) Optional. Whether to require a non anamorphic stream. (optional)
     - parameter transcodingMaxAudioChannels: (query) Optional. The maximum number of audio channels to transcode. (optional)
     - parameter cpuCoreLimit: (query) Optional. The limit of how many cpu cores to use. (optional)
     - parameter liveStreamId: (query) The live stream id. (optional)
     - parameter enableMpegtsM2TsMode: (query) Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter subtitleCodec: (query) Optional. Specify a subtitle codec to encode to. (optional)
     - parameter transcodeReasons: (query) Optional. The transcoding reason. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter context: (query) Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     - parameter streamOptions: (query) Optional. The streaming options. (optional)
     - parameter enableAdaptiveBitrateStreaming: (query) Enable adaptive bitrate streaming. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<URL>
     */
    open class func headMasterHlsVideoPlaylist( itemId: String,  mediaSourceId: String,  _static: Bool? = nil,  params: String? = nil,  tag: String? = nil,  deviceProfileId: String? = nil,  playSessionId: String? = nil,  segmentContainer: String? = nil,  segmentLength: Int? = nil,  minSegments: Int? = nil,  deviceId: String? = nil,  audioCodec: String? = nil,  enableAutoStreamCopy: Bool? = nil,  allowVideoStreamCopy: Bool? = nil,  allowAudioStreamCopy: Bool? = nil,  breakOnNonKeyFrames: Bool? = nil,  audioSampleRate: Int? = nil,  maxAudioBitDepth: Int? = nil,  audioBitRate: Int? = nil,  audioChannels: Int? = nil,  maxAudioChannels: Int? = nil,  profile: String? = nil,  level: String? = nil,  framerate: Float? = nil,  maxFramerate: Float? = nil,  copyTimestamps: Bool? = nil,  startTimeTicks: Int64? = nil,  width: Int? = nil,  height: Int? = nil,  videoBitRate: Int? = nil,  subtitleStreamIndex: Int? = nil,  subtitleMethod: SubtitleDeliveryMethod? = nil,  maxRefFrames: Int? = nil,  maxVideoBitDepth: Int? = nil,  requireAvc: Bool? = nil,  deInterlace: Bool? = nil,  requireNonAnamorphic: Bool? = nil,  transcodingMaxAudioChannels: Int? = nil,  cpuCoreLimit: Int? = nil,  liveStreamId: String? = nil,  enableMpegtsM2TsMode: Bool? = nil,  videoCodec: String? = nil,  subtitleCodec: String? = nil,  transcodeReasons: String? = nil,  audioStreamIndex: Int? = nil,  videoStreamIndex: Int? = nil,  context: EncodingContext? = nil,  streamOptions: [String: String]? = nil,  enableAdaptiveBitrateStreaming: Bool? = nil, apiResponseQueue: DispatchQueue = JellyfinClient.apiResponseQueue) -> Promise<URL> {
        let deferred = Promise<URL>.pending()
        headMasterHlsVideoPlaylistWithRequestBuilder(itemId: itemId, mediaSourceId: mediaSourceId, _static: _static, params: params, tag: tag, deviceProfileId: deviceProfileId, playSessionId: playSessionId, segmentContainer: segmentContainer, segmentLength: segmentLength, minSegments: minSegments, deviceId: deviceId, audioCodec: audioCodec, enableAutoStreamCopy: enableAutoStreamCopy, allowVideoStreamCopy: allowVideoStreamCopy, allowAudioStreamCopy: allowAudioStreamCopy, breakOnNonKeyFrames: breakOnNonKeyFrames, audioSampleRate: audioSampleRate, maxAudioBitDepth: maxAudioBitDepth, audioBitRate: audioBitRate, audioChannels: audioChannels, maxAudioChannels: maxAudioChannels, profile: profile, level: level, framerate: framerate, maxFramerate: maxFramerate, copyTimestamps: copyTimestamps, startTimeTicks: startTimeTicks, width: width, height: height, videoBitRate: videoBitRate, subtitleStreamIndex: subtitleStreamIndex, subtitleMethod: subtitleMethod, maxRefFrames: maxRefFrames, maxVideoBitDepth: maxVideoBitDepth, requireAvc: requireAvc, deInterlace: deInterlace, requireNonAnamorphic: requireNonAnamorphic, transcodingMaxAudioChannels: transcodingMaxAudioChannels, cpuCoreLimit: cpuCoreLimit, liveStreamId: liveStreamId, enableMpegtsM2TsMode: enableMpegtsM2TsMode, videoCodec: videoCodec, subtitleCodec: subtitleCodec, transcodeReasons: transcodeReasons, audioStreamIndex: audioStreamIndex, videoStreamIndex: videoStreamIndex, context: context, streamOptions: streamOptions, enableAdaptiveBitrateStreaming: enableAdaptiveBitrateStreaming).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets a video hls playlist stream.
     - HEAD /Videos/{itemId}/master.m3u8
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) The item id. 
     - parameter mediaSourceId: (query) The media version id, if playing an alternate version. 
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     - parameter params: (query) The streaming parameters. (optional)
     - parameter tag: (query) The tag. (optional)
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter playSessionId: (query) The play session id. (optional)
     - parameter segmentContainer: (query) The segment container. (optional)
     - parameter segmentLength: (query) The segment length. (optional)
     - parameter minSegments: (query) The minimum number of segments. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter allowVideoStreamCopy: (query) Whether or not to allow copying of the video stream url. (optional)
     - parameter allowAudioStreamCopy: (query) Whether or not to allow copying of the audio stream url. (optional)
     - parameter breakOnNonKeyFrames: (query) Optional. Whether to break on non key frames. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     - parameter maxAudioBitDepth: (query) Optional. The maximum audio bit depth. (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     - parameter profile: (query) Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     - parameter level: (query) Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     - parameter framerate: (query) Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter maxFramerate: (query) Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxRefFrames: (query) Optional. (optional)
     - parameter maxVideoBitDepth: (query) Optional. The maximum video bit depth. (optional)
     - parameter requireAvc: (query) Optional. Whether to require avc. (optional)
     - parameter deInterlace: (query) Optional. Whether to deinterlace the video. (optional)
     - parameter requireNonAnamorphic: (query) Optional. Whether to require a non anamorphic stream. (optional)
     - parameter transcodingMaxAudioChannels: (query) Optional. The maximum number of audio channels to transcode. (optional)
     - parameter cpuCoreLimit: (query) Optional. The limit of how many cpu cores to use. (optional)
     - parameter liveStreamId: (query) The live stream id. (optional)
     - parameter enableMpegtsM2TsMode: (query) Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter subtitleCodec: (query) Optional. Specify a subtitle codec to encode to. (optional)
     - parameter transcodeReasons: (query) Optional. The transcoding reason. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter context: (query) Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     - parameter streamOptions: (query) Optional. The streaming options. (optional)
     - parameter enableAdaptiveBitrateStreaming: (query) Enable adaptive bitrate streaming. (optional, default to true)
     - returns: RequestBuilder<URL> 
     */
    open class func headMasterHlsVideoPlaylistWithRequestBuilder(itemId: String, mediaSourceId: String, _static: Bool? = nil, params: String? = nil, tag: String? = nil, deviceProfileId: String? = nil, playSessionId: String? = nil, segmentContainer: String? = nil, segmentLength: Int? = nil, minSegments: Int? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, allowVideoStreamCopy: Bool? = nil, allowAudioStreamCopy: Bool? = nil, breakOnNonKeyFrames: Bool? = nil, audioSampleRate: Int? = nil, maxAudioBitDepth: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, profile: String? = nil, level: String? = nil, framerate: Float? = nil, maxFramerate: Float? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxRefFrames: Int? = nil, maxVideoBitDepth: Int? = nil, requireAvc: Bool? = nil, deInterlace: Bool? = nil, requireNonAnamorphic: Bool? = nil, transcodingMaxAudioChannels: Int? = nil, cpuCoreLimit: Int? = nil, liveStreamId: String? = nil, enableMpegtsM2TsMode: Bool? = nil, videoCodec: String? = nil, subtitleCodec: String? = nil, transcodeReasons: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil, context: EncodingContext? = nil, streamOptions: [String: String]? = nil, enableAdaptiveBitrateStreaming: Bool? = nil) -> RequestBuilder<URL> {
        var urlPath = "/Videos/{itemId}/master.m3u8"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinClient.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "static": _static?.encodeToJSON(),
            "params": params?.encodeToJSON(),
            "tag": tag?.encodeToJSON(),
            "deviceProfileId": deviceProfileId?.encodeToJSON(),
            "playSessionId": playSessionId?.encodeToJSON(),
            "segmentContainer": segmentContainer?.encodeToJSON(),
            "segmentLength": segmentLength?.encodeToJSON(),
            "minSegments": minSegments?.encodeToJSON(),
            "mediaSourceId": mediaSourceId.encodeToJSON(),
            "deviceId": deviceId?.encodeToJSON(),
            "audioCodec": audioCodec?.encodeToJSON(),
            "enableAutoStreamCopy": enableAutoStreamCopy?.encodeToJSON(),
            "allowVideoStreamCopy": allowVideoStreamCopy?.encodeToJSON(),
            "allowAudioStreamCopy": allowAudioStreamCopy?.encodeToJSON(),
            "breakOnNonKeyFrames": breakOnNonKeyFrames?.encodeToJSON(),
            "audioSampleRate": audioSampleRate?.encodeToJSON(),
            "maxAudioBitDepth": maxAudioBitDepth?.encodeToJSON(),
            "audioBitRate": audioBitRate?.encodeToJSON(),
            "audioChannels": audioChannels?.encodeToJSON(),
            "maxAudioChannels": maxAudioChannels?.encodeToJSON(),
            "profile": profile?.encodeToJSON(),
            "level": level?.encodeToJSON(),
            "framerate": framerate?.encodeToJSON(),
            "maxFramerate": maxFramerate?.encodeToJSON(),
            "copyTimestamps": copyTimestamps?.encodeToJSON(),
            "startTimeTicks": startTimeTicks?.encodeToJSON(),
            "width": width?.encodeToJSON(),
            "height": height?.encodeToJSON(),
            "videoBitRate": videoBitRate?.encodeToJSON(),
            "subtitleStreamIndex": subtitleStreamIndex?.encodeToJSON(),
            "subtitleMethod": subtitleMethod?.encodeToJSON(),
            "maxRefFrames": maxRefFrames?.encodeToJSON(),
            "maxVideoBitDepth": maxVideoBitDepth?.encodeToJSON(),
            "requireAvc": requireAvc?.encodeToJSON(),
            "deInterlace": deInterlace?.encodeToJSON(),
            "requireNonAnamorphic": requireNonAnamorphic?.encodeToJSON(),
            "transcodingMaxAudioChannels": transcodingMaxAudioChannels?.encodeToJSON(),
            "cpuCoreLimit": cpuCoreLimit?.encodeToJSON(),
            "liveStreamId": liveStreamId?.encodeToJSON(),
            "enableMpegtsM2TsMode": enableMpegtsM2TsMode?.encodeToJSON(),
            "videoCodec": videoCodec?.encodeToJSON(),
            "subtitleCodec": subtitleCodec?.encodeToJSON(),
            "transcodeReasons": transcodeReasons?.encodeToJSON(),
            "audioStreamIndex": audioStreamIndex?.encodeToJSON(),
            "videoStreamIndex": videoStreamIndex?.encodeToJSON(),
            "context": context?.encodeToJSON(),
            "streamOptions": streamOptions?.encodeToJSON(),
            "enableAdaptiveBitrateStreaming": enableAdaptiveBitrateStreaming?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = JellyfinClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
