//
// ImageInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Class ImageInfo. */
public struct ImageInfo: Codable, Hashable {

    public var imageType: ImageType?
    /** Gets or sets the index of the image. */
    public var imageIndex: Int?
    /** Gets or sets the image tag. */
    public var imageTag: String?
    /** Gets or sets the path. */
    public var path: String?
    /** Gets or sets the blurhash. */
    public var blurHash: String?
    /** Gets or sets the height. */
    public var height: Int?
    /** Gets or sets the width. */
    public var width: Int?
    /** Gets or sets the size. */
    public var size: Int64?

    public init(imageType: ImageType? = nil, imageIndex: Int? = nil, imageTag: String? = nil, path: String? = nil, blurHash: String? = nil, height: Int? = nil, width: Int? = nil, size: Int64? = nil) {
        self.imageType = imageType
        self.imageIndex = imageIndex
        self.imageTag = imageTag
        self.path = path
        self.blurHash = blurHash
        self.height = height
        self.width = width
        self.size = size
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case imageType = "ImageType"
        case imageIndex = "ImageIndex"
        case imageTag = "ImageTag"
        case path = "Path"
        case blurHash = "BlurHash"
        case height = "Height"
        case width = "Width"
        case size = "Size"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CodingKeys.self)
        try encoderContainer.encodeIfPresent(imageType, forKey: .imageType)
        try encoderContainer.encodeIfPresent(imageIndex, forKey: .imageIndex)
        try encoderContainer.encodeIfPresent(imageTag, forKey: .imageTag)
        try encoderContainer.encodeIfPresent(path, forKey: .path)
        try encoderContainer.encodeIfPresent(blurHash, forKey: .blurHash)
        try encoderContainer.encodeIfPresent(height, forKey: .height)
        try encoderContainer.encodeIfPresent(width, forKey: .width)
        try encoderContainer.encodeIfPresent(size, forKey: .size)
    }
}
