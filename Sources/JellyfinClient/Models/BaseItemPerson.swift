//
// BaseItemPerson.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** This is used by the api to get information about a Person within a BaseItem. */
public struct BaseItemPerson: Codable, Hashable {

    /** Gets or sets the name. */
    public var name: String?
    /** Gets or sets the identifier. */
    public var id: String?
    /** Gets or sets the role. */
    public var role: String?
    /** Gets or sets the type. */
    public var type: String?
    /** Gets or sets the primary image tag. */
    public var primaryImageTag: String?
    public var imageBlurHashes: BaseItemPersonImageBlurHashes?

    public init(name: String? = nil, id: String? = nil, role: String? = nil, type: String? = nil, primaryImageTag: String? = nil, imageBlurHashes: BaseItemPersonImageBlurHashes? = nil) {
        self.name = name
        self.id = id
        self.role = role
        self.type = type
        self.primaryImageTag = primaryImageTag
        self.imageBlurHashes = imageBlurHashes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name = "Name"
        case id = "Id"
        case role = "Role"
        case type = "Type"
        case primaryImageTag = "PrimaryImageTag"
        case imageBlurHashes = "ImageBlurHashes"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CodingKeys.self)
        try encoderContainer.encodeIfPresent(name, forKey: .name)
        try encoderContainer.encodeIfPresent(id, forKey: .id)
        try encoderContainer.encodeIfPresent(role, forKey: .role)
        try encoderContainer.encodeIfPresent(type, forKey: .type)
        try encoderContainer.encodeIfPresent(primaryImageTag, forKey: .primaryImageTag)
        try encoderContainer.encodeIfPresent(imageBlurHashes, forKey: .imageBlurHashes)
    }
}
