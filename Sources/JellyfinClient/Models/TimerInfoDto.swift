//
// TimerInfoDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TimerInfoDto: Codable, Hashable {

    /** Id of the recording. */
    public var id: String?
    public var type: String?
    /** Gets or sets the server identifier. */
    public var serverId: String?
    /** Gets or sets the external identifier. */
    public var externalId: String?
    /** ChannelId of the recording. */
    public var channelId: String?
    /** Gets or sets the external channel identifier. */
    public var externalChannelId: String?
    /** ChannelName of the recording. */
    public var channelName: String?
    public var channelPrimaryImageTag: String?
    /** Gets or sets the program identifier. */
    public var programId: String?
    /** Gets or sets the external program identifier. */
    public var externalProgramId: String?
    /** Name of the recording. */
    public var name: String?
    /** Description of the recording. */
    public var overview: String?
    /** The start date of the recording, in UTC. */
    public var startDate: Date?
    /** The end date of the recording, in UTC. */
    public var endDate: Date?
    /** Gets or sets the name of the service. */
    public var serviceName: String?
    /** Gets or sets the priority. */
    public var priority: Int?
    /** Gets or sets the pre padding seconds. */
    public var prePaddingSeconds: Int?
    /** Gets or sets the post padding seconds. */
    public var postPaddingSeconds: Int?
    /** Gets or sets a value indicating whether this instance is pre padding required. */
    public var isPrePaddingRequired: Bool?
    /** If the item does not have any backdrops, this will hold the Id of the Parent that has one. */
    public var parentBackdropItemId: String?
    /** Gets or sets the parent backdrop image tags. */
    public var parentBackdropImageTags: [String]?
    /** Gets or sets a value indicating whether this instance is post padding required. */
    public var isPostPaddingRequired: Bool?
    public var keepUntil: KeepUntil?
    public var status: RecordingStatus?
    /** Gets or sets the series timer identifier. */
    public var seriesTimerId: String?
    /** Gets or sets the external series timer identifier. */
    public var externalSeriesTimerId: String?
    /** Gets or sets the run time ticks. */
    public var runTimeTicks: Int64?
    public var programInfo: BaseItemDto?

    public init(id: String? = nil, type: String? = nil, serverId: String? = nil, externalId: String? = nil, channelId: String? = nil, externalChannelId: String? = nil, channelName: String? = nil, channelPrimaryImageTag: String? = nil, programId: String? = nil, externalProgramId: String? = nil, name: String? = nil, overview: String? = nil, startDate: Date? = nil, endDate: Date? = nil, serviceName: String? = nil, priority: Int? = nil, prePaddingSeconds: Int? = nil, postPaddingSeconds: Int? = nil, isPrePaddingRequired: Bool? = nil, parentBackdropItemId: String? = nil, parentBackdropImageTags: [String]? = nil, isPostPaddingRequired: Bool? = nil, keepUntil: KeepUntil? = nil, status: RecordingStatus? = nil, seriesTimerId: String? = nil, externalSeriesTimerId: String? = nil, runTimeTicks: Int64? = nil, programInfo: BaseItemDto? = nil) {
        self.id = id
        self.type = type
        self.serverId = serverId
        self.externalId = externalId
        self.channelId = channelId
        self.externalChannelId = externalChannelId
        self.channelName = channelName
        self.channelPrimaryImageTag = channelPrimaryImageTag
        self.programId = programId
        self.externalProgramId = externalProgramId
        self.name = name
        self.overview = overview
        self.startDate = startDate
        self.endDate = endDate
        self.serviceName = serviceName
        self.priority = priority
        self.prePaddingSeconds = prePaddingSeconds
        self.postPaddingSeconds = postPaddingSeconds
        self.isPrePaddingRequired = isPrePaddingRequired
        self.parentBackdropItemId = parentBackdropItemId
        self.parentBackdropImageTags = parentBackdropImageTags
        self.isPostPaddingRequired = isPostPaddingRequired
        self.keepUntil = keepUntil
        self.status = status
        self.seriesTimerId = seriesTimerId
        self.externalSeriesTimerId = externalSeriesTimerId
        self.runTimeTicks = runTimeTicks
        self.programInfo = programInfo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case type = "Type"
        case serverId = "ServerId"
        case externalId = "ExternalId"
        case channelId = "ChannelId"
        case externalChannelId = "ExternalChannelId"
        case channelName = "ChannelName"
        case channelPrimaryImageTag = "ChannelPrimaryImageTag"
        case programId = "ProgramId"
        case externalProgramId = "ExternalProgramId"
        case name = "Name"
        case overview = "Overview"
        case startDate = "StartDate"
        case endDate = "EndDate"
        case serviceName = "ServiceName"
        case priority = "Priority"
        case prePaddingSeconds = "PrePaddingSeconds"
        case postPaddingSeconds = "PostPaddingSeconds"
        case isPrePaddingRequired = "IsPrePaddingRequired"
        case parentBackdropItemId = "ParentBackdropItemId"
        case parentBackdropImageTags = "ParentBackdropImageTags"
        case isPostPaddingRequired = "IsPostPaddingRequired"
        case keepUntil = "KeepUntil"
        case status = "Status"
        case seriesTimerId = "SeriesTimerId"
        case externalSeriesTimerId = "ExternalSeriesTimerId"
        case runTimeTicks = "RunTimeTicks"
        case programInfo = "ProgramInfo"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CodingKeys.self)
        try encoderContainer.encodeIfPresent(id, forKey: .id)
        try encoderContainer.encodeIfPresent(type, forKey: .type)
        try encoderContainer.encodeIfPresent(serverId, forKey: .serverId)
        try encoderContainer.encodeIfPresent(externalId, forKey: .externalId)
        try encoderContainer.encodeIfPresent(channelId, forKey: .channelId)
        try encoderContainer.encodeIfPresent(externalChannelId, forKey: .externalChannelId)
        try encoderContainer.encodeIfPresent(channelName, forKey: .channelName)
        try encoderContainer.encodeIfPresent(channelPrimaryImageTag, forKey: .channelPrimaryImageTag)
        try encoderContainer.encodeIfPresent(programId, forKey: .programId)
        try encoderContainer.encodeIfPresent(externalProgramId, forKey: .externalProgramId)
        try encoderContainer.encodeIfPresent(name, forKey: .name)
        try encoderContainer.encodeIfPresent(overview, forKey: .overview)
        try encoderContainer.encodeIfPresent(startDate, forKey: .startDate)
        try encoderContainer.encodeIfPresent(endDate, forKey: .endDate)
        try encoderContainer.encodeIfPresent(serviceName, forKey: .serviceName)
        try encoderContainer.encodeIfPresent(priority, forKey: .priority)
        try encoderContainer.encodeIfPresent(prePaddingSeconds, forKey: .prePaddingSeconds)
        try encoderContainer.encodeIfPresent(postPaddingSeconds, forKey: .postPaddingSeconds)
        try encoderContainer.encodeIfPresent(isPrePaddingRequired, forKey: .isPrePaddingRequired)
        try encoderContainer.encodeIfPresent(parentBackdropItemId, forKey: .parentBackdropItemId)
        try encoderContainer.encodeIfPresent(parentBackdropImageTags, forKey: .parentBackdropImageTags)
        try encoderContainer.encodeIfPresent(isPostPaddingRequired, forKey: .isPostPaddingRequired)
        try encoderContainer.encodeIfPresent(keepUntil, forKey: .keepUntil)
        try encoderContainer.encodeIfPresent(status, forKey: .status)
        try encoderContainer.encodeIfPresent(seriesTimerId, forKey: .seriesTimerId)
        try encoderContainer.encodeIfPresent(externalSeriesTimerId, forKey: .externalSeriesTimerId)
        try encoderContainer.encodeIfPresent(runTimeTicks, forKey: .runTimeTicks)
        try encoderContainer.encodeIfPresent(programInfo, forKey: .programInfo)
    }
}
