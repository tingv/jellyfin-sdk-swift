//
// DeviceIdentification.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DeviceIdentification: Codable, Hashable {

    /** Gets or sets the name of the friendly. */
    public var friendlyName: String?
    /** Gets or sets the model number. */
    public var modelNumber: String?
    /** Gets or sets the serial number. */
    public var serialNumber: String?
    /** Gets or sets the name of the model. */
    public var modelName: String?
    /** Gets or sets the model description. */
    public var modelDescription: String?
    /** Gets or sets the model URL. */
    public var modelUrl: String?
    /** Gets or sets the manufacturer. */
    public var manufacturer: String?
    /** Gets or sets the manufacturer URL. */
    public var manufacturerUrl: String?
    /** Gets or sets the headers. */
    public var headers: [HttpHeaderInfo]?

    public init(friendlyName: String? = nil, modelNumber: String? = nil, serialNumber: String? = nil, modelName: String? = nil, modelDescription: String? = nil, modelUrl: String? = nil, manufacturer: String? = nil, manufacturerUrl: String? = nil, headers: [HttpHeaderInfo]? = nil) {
        self.friendlyName = friendlyName
        self.modelNumber = modelNumber
        self.serialNumber = serialNumber
        self.modelName = modelName
        self.modelDescription = modelDescription
        self.modelUrl = modelUrl
        self.manufacturer = manufacturer
        self.manufacturerUrl = manufacturerUrl
        self.headers = headers
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case friendlyName = "FriendlyName"
        case modelNumber = "ModelNumber"
        case serialNumber = "SerialNumber"
        case modelName = "ModelName"
        case modelDescription = "ModelDescription"
        case modelUrl = "ModelUrl"
        case manufacturer = "Manufacturer"
        case manufacturerUrl = "ManufacturerUrl"
        case headers = "Headers"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CodingKeys.self)
        try encoderContainer.encodeIfPresent(friendlyName, forKey: .friendlyName)
        try encoderContainer.encodeIfPresent(modelNumber, forKey: .modelNumber)
        try encoderContainer.encodeIfPresent(serialNumber, forKey: .serialNumber)
        try encoderContainer.encodeIfPresent(modelName, forKey: .modelName)
        try encoderContainer.encodeIfPresent(modelDescription, forKey: .modelDescription)
        try encoderContainer.encodeIfPresent(modelUrl, forKey: .modelUrl)
        try encoderContainer.encodeIfPresent(manufacturer, forKey: .manufacturer)
        try encoderContainer.encodeIfPresent(manufacturerUrl, forKey: .manufacturerUrl)
        try encoderContainer.encodeIfPresent(headers, forKey: .headers)
    }
}
