//
// GetProgramsDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Get programs dto. */
public struct GetProgramsDto: Codable, Hashable {

    /** Gets or sets the channels to return guide information for. */
    public var channelIds: [String]?
    /** Gets or sets optional. Filter by user id. */
    public var userId: String?
    /** Gets or sets the minimum premiere start date.  Optional. */
    public var minStartDate: Date?
    /** Gets or sets filter by programs that have completed airing, or not.  Optional. */
    public var hasAired: Bool?
    /** Gets or sets filter by programs that are currently airing, or not.  Optional. */
    public var isAiring: Bool?
    /** Gets or sets the maximum premiere start date.  Optional. */
    public var maxStartDate: Date?
    /** Gets or sets the minimum premiere end date.  Optional. */
    public var minEndDate: Date?
    /** Gets or sets the maximum premiere end date.  Optional. */
    public var maxEndDate: Date?
    /** Gets or sets filter for movies.  Optional. */
    public var isMovie: Bool?
    /** Gets or sets filter for series.  Optional. */
    public var isSeries: Bool?
    /** Gets or sets filter for news.  Optional. */
    public var isNews: Bool?
    /** Gets or sets filter for kids.  Optional. */
    public var isKids: Bool?
    /** Gets or sets filter for sports.  Optional. */
    public var isSports: Bool?
    /** Gets or sets the record index to start at. All items with a lower index will be dropped from the results.  Optional. */
    public var startIndex: Int?
    /** Gets or sets the maximum number of records to return.  Optional. */
    public var limit: Int?
    /** Gets or sets specify one or more sort orders, comma delimited. Options: Name, StartDate.  Optional. */
    public var sortBy: [String]?
    /** Gets or sets sort Order - Ascending,Descending. */
    public var aPISortOrder: [APISortOrder]?
    /** Gets or sets the genres to return guide information for. */
    public var genres: [String]?
    /** Gets or sets the genre ids to return guide information for. */
    public var genreIds: [String]?
    /** Gets or sets include image information in output.  Optional. */
    public var enableImages: Bool?
    /** Gets or sets a value indicating whether retrieve total record count. */
    public var enableTotalRecordCount: Bool?
    /** Gets or sets the max number of images to return, per image type.  Optional. */
    public var imageTypeLimit: Int?
    /** Gets or sets the image types to include in the output.  Optional. */
    public var enableImageTypes: [ImageType]?
    /** Gets or sets include user data.  Optional. */
    public var enableUserData: Bool?
    /** Gets or sets filter by series timer id.  Optional. */
    public var seriesTimerId: String?
    /** Gets or sets filter by library series id.  Optional. */
    public var librarySeriesId: String?
    /** Gets or sets specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.  Optional. */
    public var fields: [ItemFields]?

    public init(channelIds: [String]? = nil, userId: String? = nil, minStartDate: Date? = nil, hasAired: Bool? = nil, isAiring: Bool? = nil, maxStartDate: Date? = nil, minEndDate: Date? = nil, maxEndDate: Date? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, startIndex: Int? = nil, limit: Int? = nil, sortBy: [String]? = nil, aPISortOrder: [APISortOrder]? = nil, genres: [String]? = nil, genreIds: [String]? = nil, enableImages: Bool? = nil, enableTotalRecordCount: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, enableUserData: Bool? = nil, seriesTimerId: String? = nil, librarySeriesId: String? = nil, fields: [ItemFields]? = nil) {
        self.channelIds = channelIds
        self.userId = userId
        self.minStartDate = minStartDate
        self.hasAired = hasAired
        self.isAiring = isAiring
        self.maxStartDate = maxStartDate
        self.minEndDate = minEndDate
        self.maxEndDate = maxEndDate
        self.isMovie = isMovie
        self.isSeries = isSeries
        self.isNews = isNews
        self.isKids = isKids
        self.isSports = isSports
        self.startIndex = startIndex
        self.limit = limit
        self.sortBy = sortBy
        self.aPISortOrder = aPISortOrder
        self.genres = genres
        self.genreIds = genreIds
        self.enableImages = enableImages
        self.enableTotalRecordCount = enableTotalRecordCount
        self.imageTypeLimit = imageTypeLimit
        self.enableImageTypes = enableImageTypes
        self.enableUserData = enableUserData
        self.seriesTimerId = seriesTimerId
        self.librarySeriesId = librarySeriesId
        self.fields = fields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case channelIds = "ChannelIds"
        case userId = "UserId"
        case minStartDate = "MinStartDate"
        case hasAired = "HasAired"
        case isAiring = "IsAiring"
        case maxStartDate = "MaxStartDate"
        case minEndDate = "MinEndDate"
        case maxEndDate = "MaxEndDate"
        case isMovie = "IsMovie"
        case isSeries = "IsSeries"
        case isNews = "IsNews"
        case isKids = "IsKids"
        case isSports = "IsSports"
        case startIndex = "StartIndex"
        case limit = "Limit"
        case sortBy = "SortBy"
        case aPISortOrder = "APISortOrder"
        case genres = "Genres"
        case genreIds = "GenreIds"
        case enableImages = "EnableImages"
        case enableTotalRecordCount = "EnableTotalRecordCount"
        case imageTypeLimit = "ImageTypeLimit"
        case enableImageTypes = "EnableImageTypes"
        case enableUserData = "EnableUserData"
        case seriesTimerId = "SeriesTimerId"
        case librarySeriesId = "LibrarySeriesId"
        case fields = "Fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CodingKeys.self)
        try encoderContainer.encodeIfPresent(channelIds, forKey: .channelIds)
        try encoderContainer.encodeIfPresent(userId, forKey: .userId)
        try encoderContainer.encodeIfPresent(minStartDate, forKey: .minStartDate)
        try encoderContainer.encodeIfPresent(hasAired, forKey: .hasAired)
        try encoderContainer.encodeIfPresent(isAiring, forKey: .isAiring)
        try encoderContainer.encodeIfPresent(maxStartDate, forKey: .maxStartDate)
        try encoderContainer.encodeIfPresent(minEndDate, forKey: .minEndDate)
        try encoderContainer.encodeIfPresent(maxEndDate, forKey: .maxEndDate)
        try encoderContainer.encodeIfPresent(isMovie, forKey: .isMovie)
        try encoderContainer.encodeIfPresent(isSeries, forKey: .isSeries)
        try encoderContainer.encodeIfPresent(isNews, forKey: .isNews)
        try encoderContainer.encodeIfPresent(isKids, forKey: .isKids)
        try encoderContainer.encodeIfPresent(isSports, forKey: .isSports)
        try encoderContainer.encodeIfPresent(startIndex, forKey: .startIndex)
        try encoderContainer.encodeIfPresent(limit, forKey: .limit)
        try encoderContainer.encodeIfPresent(sortBy, forKey: .sortBy)
        try encoderContainer.encodeIfPresent(aPISortOrder, forKey: .aPISortOrder)
        try encoderContainer.encodeIfPresent(genres, forKey: .genres)
        try encoderContainer.encodeIfPresent(genreIds, forKey: .genreIds)
        try encoderContainer.encodeIfPresent(enableImages, forKey: .enableImages)
        try encoderContainer.encodeIfPresent(enableTotalRecordCount, forKey: .enableTotalRecordCount)
        try encoderContainer.encodeIfPresent(imageTypeLimit, forKey: .imageTypeLimit)
        try encoderContainer.encodeIfPresent(enableImageTypes, forKey: .enableImageTypes)
        try encoderContainer.encodeIfPresent(enableUserData, forKey: .enableUserData)
        try encoderContainer.encodeIfPresent(seriesTimerId, forKey: .seriesTimerId)
        try encoderContainer.encodeIfPresent(librarySeriesId, forKey: .librarySeriesId)
        try encoderContainer.encodeIfPresent(fields, forKey: .fields)
    }
}
