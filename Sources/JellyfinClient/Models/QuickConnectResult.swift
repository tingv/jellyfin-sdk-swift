//
// QuickConnectResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Stores the result of an incoming quick connect request. */
public struct QuickConnectResult: Codable, Hashable {

    /** Gets a value indicating whether this request is authorized. */
    public var authenticated: Bool?
    /** Gets or sets the secret value used to uniquely identify this request. Can be used to retrieve authentication information. */
    public var secret: String?
    /** Gets or sets the user facing code used so the user can quickly differentiate this request from others. */
    public var code: String?
    /** Gets or sets the private access token. */
    public var authentication: String?
    /** Gets or sets an error message. */
    public var error: String?
    /** Gets or sets the DateTime that this request was created. */
    public var dateAdded: Date?

    public init(authenticated: Bool? = nil, secret: String? = nil, code: String? = nil, authentication: String? = nil, error: String? = nil, dateAdded: Date? = nil) {
        self.authenticated = authenticated
        self.secret = secret
        self.code = code
        self.authentication = authentication
        self.error = error
        self.dateAdded = dateAdded
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authenticated = "Authenticated"
        case secret = "Secret"
        case code = "Code"
        case authentication = "Authentication"
        case error = "Error"
        case dateAdded = "DateAdded"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CodingKeys.self)
        try encoderContainer.encodeIfPresent(authenticated, forKey: .authenticated)
        try encoderContainer.encodeIfPresent(secret, forKey: .secret)
        try encoderContainer.encodeIfPresent(code, forKey: .code)
        try encoderContainer.encodeIfPresent(authentication, forKey: .authentication)
        try encoderContainer.encodeIfPresent(error, forKey: .error)
        try encoderContainer.encodeIfPresent(dateAdded, forKey: .dateAdded)
    }
}
