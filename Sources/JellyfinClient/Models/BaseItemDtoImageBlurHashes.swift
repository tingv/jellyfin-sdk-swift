//
// BaseItemDtoImageBlurHashes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Gets or sets the blurhashes for the image tags.  Maps image type to dictionary mapping image tag to blurhash value. */
public struct BaseItemDtoImageBlurHashes: Codable, Hashable {

    public var primary: [String: String]?
    public var art: [String: String]?
    public var backdrop: [String: String]?
    public var banner: [String: String]?
    public var logo: [String: String]?
    public var thumb: [String: String]?
    public var disc: [String: String]?
    public var box: [String: String]?
    public var screenshot: [String: String]?
    public var menu: [String: String]?
    public var chapter: [String: String]?
    public var boxRear: [String: String]?
    public var profile: [String: String]?

    public init(primary: [String: String]? = nil, art: [String: String]? = nil, backdrop: [String: String]? = nil, banner: [String: String]? = nil, logo: [String: String]? = nil, thumb: [String: String]? = nil, disc: [String: String]? = nil, box: [String: String]? = nil, screenshot: [String: String]? = nil, menu: [String: String]? = nil, chapter: [String: String]? = nil, boxRear: [String: String]? = nil, profile: [String: String]? = nil) {
        self.primary = primary
        self.art = art
        self.backdrop = backdrop
        self.banner = banner
        self.logo = logo
        self.thumb = thumb
        self.disc = disc
        self.box = box
        self.screenshot = screenshot
        self.menu = menu
        self.chapter = chapter
        self.boxRear = boxRear
        self.profile = profile
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case profile = "Profile"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CodingKeys.self)
        try encoderContainer.encodeIfPresent(primary, forKey: .primary)
        try encoderContainer.encodeIfPresent(art, forKey: .art)
        try encoderContainer.encodeIfPresent(backdrop, forKey: .backdrop)
        try encoderContainer.encodeIfPresent(banner, forKey: .banner)
        try encoderContainer.encodeIfPresent(logo, forKey: .logo)
        try encoderContainer.encodeIfPresent(thumb, forKey: .thumb)
        try encoderContainer.encodeIfPresent(disc, forKey: .disc)
        try encoderContainer.encodeIfPresent(box, forKey: .box)
        try encoderContainer.encodeIfPresent(screenshot, forKey: .screenshot)
        try encoderContainer.encodeIfPresent(menu, forKey: .menu)
        try encoderContainer.encodeIfPresent(chapter, forKey: .chapter)
        try encoderContainer.encodeIfPresent(boxRear, forKey: .boxRear)
        try encoderContainer.encodeIfPresent(profile, forKey: .profile)
    }
}
