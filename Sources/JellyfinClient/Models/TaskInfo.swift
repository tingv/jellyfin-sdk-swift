//
// TaskInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Class TaskInfo. */
public struct TaskInfo: Codable, Hashable {

    /** Gets or sets the name. */
    public var name: String?
    public var state: TaskState?
    /** Gets or sets the progress. */
    public var currentProgressPercentage: Double?
    /** Gets or sets the id. */
    public var id: String?
    public var lastExecutionResult: TaskResult?
    /** Gets or sets the triggers. */
    public var triggers: [TaskTriggerInfo]?
    /** Gets or sets the description. */
    public var description: String?
    /** Gets or sets the category. */
    public var category: String?
    /** Gets or sets a value indicating whether this instance is hidden. */
    public var isHidden: Bool?
    /** Gets or sets the key. */
    public var key: String?

    public init(name: String? = nil, state: TaskState? = nil, currentProgressPercentage: Double? = nil, id: String? = nil, lastExecutionResult: TaskResult? = nil, triggers: [TaskTriggerInfo]? = nil, description: String? = nil, category: String? = nil, isHidden: Bool? = nil, key: String? = nil) {
        self.name = name
        self.state = state
        self.currentProgressPercentage = currentProgressPercentage
        self.id = id
        self.lastExecutionResult = lastExecutionResult
        self.triggers = triggers
        self.description = description
        self.category = category
        self.isHidden = isHidden
        self.key = key
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name = "Name"
        case state = "State"
        case currentProgressPercentage = "CurrentProgressPercentage"
        case id = "Id"
        case lastExecutionResult = "LastExecutionResult"
        case triggers = "Triggers"
        case description = "Description"
        case category = "Category"
        case isHidden = "IsHidden"
        case key = "Key"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CodingKeys.self)
        try encoderContainer.encodeIfPresent(name, forKey: .name)
        try encoderContainer.encodeIfPresent(state, forKey: .state)
        try encoderContainer.encodeIfPresent(currentProgressPercentage, forKey: .currentProgressPercentage)
        try encoderContainer.encodeIfPresent(id, forKey: .id)
        try encoderContainer.encodeIfPresent(lastExecutionResult, forKey: .lastExecutionResult)
        try encoderContainer.encodeIfPresent(triggers, forKey: .triggers)
        try encoderContainer.encodeIfPresent(description, forKey: .description)
        try encoderContainer.encodeIfPresent(category, forKey: .category)
        try encoderContainer.encodeIfPresent(isHidden, forKey: .isHidden)
        try encoderContainer.encodeIfPresent(key, forKey: .key)
    }
}
