//
// InstallationInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Class InstallationInfo. */
public struct InstallationInfo: Codable, Hashable {

    /** Gets or sets the Id. */
    public var guid: String?
    /** Gets or sets the name. */
    public var name: String?
    public var version: Version?
    /** Gets or sets the changelog for this version. */
    public var changelog: String?
    /** Gets or sets the source URL. */
    public var sourceUrl: String?
    /** Gets or sets a checksum for the binary. */
    public var checksum: String?
    public var packageInfo: PackageInfo?

    public init(guid: String? = nil, name: String? = nil, version: Version? = nil, changelog: String? = nil, sourceUrl: String? = nil, checksum: String? = nil, packageInfo: PackageInfo? = nil) {
        self.guid = guid
        self.name = name
        self.version = version
        self.changelog = changelog
        self.sourceUrl = sourceUrl
        self.checksum = checksum
        self.packageInfo = packageInfo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid = "Guid"
        case name = "Name"
        case version = "Version"
        case changelog = "Changelog"
        case sourceUrl = "SourceUrl"
        case checksum = "Checksum"
        case packageInfo = "PackageInfo"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CodingKeys.self)
        try encoderContainer.encodeIfPresent(guid, forKey: .guid)
        try encoderContainer.encodeIfPresent(name, forKey: .name)
        try encoderContainer.encodeIfPresent(version, forKey: .version)
        try encoderContainer.encodeIfPresent(changelog, forKey: .changelog)
        try encoderContainer.encodeIfPresent(sourceUrl, forKey: .sourceUrl)
        try encoderContainer.encodeIfPresent(checksum, forKey: .checksum)
        try encoderContainer.encodeIfPresent(packageInfo, forKey: .packageInfo)
    }
}
