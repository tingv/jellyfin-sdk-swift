//
// TranscodingProfile.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TranscodingProfile: Codable, Hashable {

    public var container: String?
    public var type: DlnaProfileType?
    public var videoCodec: String?
    public var audioCodec: String?
    public var _protocol: String?
    public var estimateContentLength: Bool?
    public var enableMpegtsM2TsMode: Bool?
    public var transcodeSeekInfo: TranscodeSeekInfo?
    public var copyTimestamps: Bool?
    public var context: EncodingContext?
    public var enableSubtitlesInManifest: Bool?
    public var maxAudioChannels: String?
    public var minSegments: Int?
    public var segmentLength: Int?
    public var breakOnNonKeyFrames: Bool?

    public init(container: String? = nil, type: DlnaProfileType? = nil, videoCodec: String? = nil, audioCodec: String? = nil, _protocol: String? = nil, estimateContentLength: Bool? = nil, enableMpegtsM2TsMode: Bool? = nil, transcodeSeekInfo: TranscodeSeekInfo? = nil, copyTimestamps: Bool? = nil, context: EncodingContext? = nil, enableSubtitlesInManifest: Bool? = nil, maxAudioChannels: String? = nil, minSegments: Int? = nil, segmentLength: Int? = nil, breakOnNonKeyFrames: Bool? = nil) {
        self.container = container
        self.type = type
        self.videoCodec = videoCodec
        self.audioCodec = audioCodec
        self._protocol = _protocol
        self.estimateContentLength = estimateContentLength
        self.enableMpegtsM2TsMode = enableMpegtsM2TsMode
        self.transcodeSeekInfo = transcodeSeekInfo
        self.copyTimestamps = copyTimestamps
        self.context = context
        self.enableSubtitlesInManifest = enableSubtitlesInManifest
        self.maxAudioChannels = maxAudioChannels
        self.minSegments = minSegments
        self.segmentLength = segmentLength
        self.breakOnNonKeyFrames = breakOnNonKeyFrames
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case container = "Container"
        case type = "Type"
        case videoCodec = "VideoCodec"
        case audioCodec = "AudioCodec"
        case _protocol = "Protocol"
        case estimateContentLength = "EstimateContentLength"
        case enableMpegtsM2TsMode = "EnableMpegtsM2TsMode"
        case transcodeSeekInfo = "TranscodeSeekInfo"
        case copyTimestamps = "CopyTimestamps"
        case context = "Context"
        case enableSubtitlesInManifest = "EnableSubtitlesInManifest"
        case maxAudioChannels = "MaxAudioChannels"
        case minSegments = "MinSegments"
        case segmentLength = "SegmentLength"
        case breakOnNonKeyFrames = "BreakOnNonKeyFrames"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CodingKeys.self)
        try encoderContainer.encodeIfPresent(container, forKey: .container)
        try encoderContainer.encodeIfPresent(type, forKey: .type)
        try encoderContainer.encodeIfPresent(videoCodec, forKey: .videoCodec)
        try encoderContainer.encodeIfPresent(audioCodec, forKey: .audioCodec)
        try encoderContainer.encodeIfPresent(_protocol, forKey: ._protocol)
        try encoderContainer.encodeIfPresent(estimateContentLength, forKey: .estimateContentLength)
        try encoderContainer.encodeIfPresent(enableMpegtsM2TsMode, forKey: .enableMpegtsM2TsMode)
        try encoderContainer.encodeIfPresent(transcodeSeekInfo, forKey: .transcodeSeekInfo)
        try encoderContainer.encodeIfPresent(copyTimestamps, forKey: .copyTimestamps)
        try encoderContainer.encodeIfPresent(context, forKey: .context)
        try encoderContainer.encodeIfPresent(enableSubtitlesInManifest, forKey: .enableSubtitlesInManifest)
        try encoderContainer.encodeIfPresent(maxAudioChannels, forKey: .maxAudioChannels)
        try encoderContainer.encodeIfPresent(minSegments, forKey: .minSegments)
        try encoderContainer.encodeIfPresent(segmentLength, forKey: .segmentLength)
        try encoderContainer.encodeIfPresent(breakOnNonKeyFrames, forKey: .breakOnNonKeyFrames)
    }
}
