//
// VersionInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Defines the MediaBrowser.Model.Updates.VersionInfo class. */
public struct VersionInfo: Codable, Hashable {

    /** Gets or sets the version. */
    public var version: String?
    public var versionNumber: Version?
    /** Gets or sets the changelog for this version. */
    public var changelog: String?
    /** Gets or sets the ABI that this version was built against. */
    public var targetAbi: String?
    /** Gets or sets the source URL. */
    public var sourceUrl: String?
    /** Gets or sets a checksum for the binary. */
    public var checksum: String?
    /** Gets or sets a timestamp of when the binary was built. */
    public var timestamp: String?
    /** Gets or sets the repository name. */
    public var repositoryName: String?
    /** Gets or sets the repository url. */
    public var repositoryUrl: String?

    public init(version: String? = nil, versionNumber: Version? = nil, changelog: String? = nil, targetAbi: String? = nil, sourceUrl: String? = nil, checksum: String? = nil, timestamp: String? = nil, repositoryName: String? = nil, repositoryUrl: String? = nil) {
        self.version = version
        self.versionNumber = versionNumber
        self.changelog = changelog
        self.targetAbi = targetAbi
        self.sourceUrl = sourceUrl
        self.checksum = checksum
        self.timestamp = timestamp
        self.repositoryName = repositoryName
        self.repositoryUrl = repositoryUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case version
        case versionNumber = "VersionNumber"
        case changelog
        case targetAbi
        case sourceUrl
        case checksum
        case timestamp
        case repositoryName
        case repositoryUrl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CodingKeys.self)
        try encoderContainer.encodeIfPresent(version, forKey: .version)
        try encoderContainer.encodeIfPresent(versionNumber, forKey: .versionNumber)
        try encoderContainer.encodeIfPresent(changelog, forKey: .changelog)
        try encoderContainer.encodeIfPresent(targetAbi, forKey: .targetAbi)
        try encoderContainer.encodeIfPresent(sourceUrl, forKey: .sourceUrl)
        try encoderContainer.encodeIfPresent(checksum, forKey: .checksum)
        try encoderContainer.encodeIfPresent(timestamp, forKey: .timestamp)
        try encoderContainer.encodeIfPresent(repositoryName, forKey: .repositoryName)
        try encoderContainer.encodeIfPresent(repositoryUrl, forKey: .repositoryUrl)
    }
}
