//
// RemoteSubtitleInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RemoteSubtitleInfo: Codable, Hashable {

    public var threeLetterISOLanguageName: String?
    public var id: String?
    public var providerName: String?
    public var name: String?
    public var format: String?
    public var author: String?
    public var comment: String?
    public var dateCreated: Date?
    public var communityRating: Float?
    public var downloadCount: Int?
    public var isHashMatch: Bool?

    public init(threeLetterISOLanguageName: String? = nil, id: String? = nil, providerName: String? = nil, name: String? = nil, format: String? = nil, author: String? = nil, comment: String? = nil, dateCreated: Date? = nil, communityRating: Float? = nil, downloadCount: Int? = nil, isHashMatch: Bool? = nil) {
        self.threeLetterISOLanguageName = threeLetterISOLanguageName
        self.id = id
        self.providerName = providerName
        self.name = name
        self.format = format
        self.author = author
        self.comment = comment
        self.dateCreated = dateCreated
        self.communityRating = communityRating
        self.downloadCount = downloadCount
        self.isHashMatch = isHashMatch
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case threeLetterISOLanguageName = "ThreeLetterISOLanguageName"
        case id = "Id"
        case providerName = "ProviderName"
        case name = "Name"
        case format = "Format"
        case author = "Author"
        case comment = "Comment"
        case dateCreated = "DateCreated"
        case communityRating = "CommunityRating"
        case downloadCount = "DownloadCount"
        case isHashMatch = "IsHashMatch"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CodingKeys.self)
        try encoderContainer.encodeIfPresent(threeLetterISOLanguageName, forKey: .threeLetterISOLanguageName)
        try encoderContainer.encodeIfPresent(id, forKey: .id)
        try encoderContainer.encodeIfPresent(providerName, forKey: .providerName)
        try encoderContainer.encodeIfPresent(name, forKey: .name)
        try encoderContainer.encodeIfPresent(format, forKey: .format)
        try encoderContainer.encodeIfPresent(author, forKey: .author)
        try encoderContainer.encodeIfPresent(comment, forKey: .comment)
        try encoderContainer.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try encoderContainer.encodeIfPresent(communityRating, forKey: .communityRating)
        try encoderContainer.encodeIfPresent(downloadCount, forKey: .downloadCount)
        try encoderContainer.encodeIfPresent(isHashMatch, forKey: .isHashMatch)
    }
}
