//
// PluginsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation

open class PluginsAPI {
    /**
     Disable a plugin.
     
     - parameter pluginId: (path) Plugin id. 
     - parameter version: (path) Plugin version. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func disablePlugin(pluginId: String, version: Version, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        disablePluginWithRequestBuilder(pluginId: pluginId, version: version).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Disable a plugin.
     - POST /Plugins/{pluginId}/{version}/Disable
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter pluginId: (path) Plugin id. 
     - parameter version: (path) Plugin version. 
     - returns: RequestBuilder<Void> 
     */
    open class func disablePluginWithRequestBuilder(pluginId: String, version: Version) -> RequestBuilder<Void> {
        var urlPath = "/Plugins/{pluginId}/{version}/Disable"
        let pluginIdPreEscape = "\(APIHelper.mapValueToPathItem(pluginId))"
        let pluginIdPostEscape = pluginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{pluginId}", with: pluginIdPostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Enables a disabled plugin.
     
     - parameter pluginId: (path) Plugin id. 
     - parameter version: (path) Plugin version. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func enablePlugin(pluginId: String, version: Version, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        enablePluginWithRequestBuilder(pluginId: pluginId, version: version).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Enables a disabled plugin.
     - POST /Plugins/{pluginId}/{version}/Enable
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter pluginId: (path) Plugin id. 
     - parameter version: (path) Plugin version. 
     - returns: RequestBuilder<Void> 
     */
    open class func enablePluginWithRequestBuilder(pluginId: String, version: Version) -> RequestBuilder<Void> {
        var urlPath = "/Plugins/{pluginId}/{version}/Enable"
        let pluginIdPreEscape = "\(APIHelper.mapValueToPathItem(pluginId))"
        let pluginIdPostEscape = pluginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{pluginId}", with: pluginIdPostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets plugin configuration.
     
     - parameter pluginId: (path) Plugin id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getPluginConfiguration(pluginId: String, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<AnyCodable, Error>) -> Void)) {
        getPluginConfigurationWithRequestBuilder(pluginId: pluginId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Gets plugin configuration.
     - GET /Plugins/{pluginId}/Configuration
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter pluginId: (path) Plugin id. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getPluginConfigurationWithRequestBuilder(pluginId: String) -> RequestBuilder<AnyCodable> {
        var urlPath = "/Plugins/{pluginId}/Configuration"
        let pluginIdPreEscape = "\(APIHelper.mapValueToPathItem(pluginId))"
        let pluginIdPostEscape = pluginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{pluginId}", with: pluginIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AnyCodable>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a plugin's image.
     
     - parameter pluginId: (path) Plugin id. 
     - parameter version: (path) Plugin version. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getPluginImage(pluginId: String, version: Version, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<URL, Error>) -> Void)) {
        getPluginImageWithRequestBuilder(pluginId: pluginId, version: version).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Gets a plugin's image.
     - GET /Plugins/{pluginId}/{version}/Image
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter pluginId: (path) Plugin id. 
     - parameter version: (path) Plugin version. 
     - returns: RequestBuilder<URL> 
     */
    open class func getPluginImageWithRequestBuilder(pluginId: String, version: Version) -> RequestBuilder<URL> {
        var urlPath = "/Plugins/{pluginId}/{version}/Image"
        let pluginIdPreEscape = "\(APIHelper.mapValueToPathItem(pluginId))"
        let pluginIdPostEscape = pluginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{pluginId}", with: pluginIdPostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a plugin's manifest.
     
     - parameter pluginId: (path) Plugin id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getPluginManifest(pluginId: String, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        getPluginManifestWithRequestBuilder(pluginId: pluginId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Gets a plugin's manifest.
     - POST /Plugins/{pluginId}/Manifest
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter pluginId: (path) Plugin id. 
     - returns: RequestBuilder<Void> 
     */
    open class func getPluginManifestWithRequestBuilder(pluginId: String) -> RequestBuilder<Void> {
        var urlPath = "/Plugins/{pluginId}/Manifest"
        let pluginIdPreEscape = "\(APIHelper.mapValueToPathItem(pluginId))"
        let pluginIdPostEscape = pluginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{pluginId}", with: pluginIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets a list of currently installed plugins.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getPlugins(apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[PluginInfo], Error>) -> Void)) {
        getPluginsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Gets a list of currently installed plugins.
     - GET /Plugins
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<[PluginInfo]> 
     */
    open class func getPluginsWithRequestBuilder() -> RequestBuilder<[PluginInfo]> {
        let urlPath = "/Plugins"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[PluginInfo]>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Uninstalls a plugin.
     
     - parameter pluginId: (path) Plugin id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func uninstallPlugin(pluginId: String, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        uninstallPluginWithRequestBuilder(pluginId: pluginId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Uninstalls a plugin.
     - DELETE /Plugins/{pluginId}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter pluginId: (path) Plugin id. 
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func uninstallPluginWithRequestBuilder(pluginId: String) -> RequestBuilder<Void> {
        var urlPath = "/Plugins/{pluginId}"
        let pluginIdPreEscape = "\(APIHelper.mapValueToPathItem(pluginId))"
        let pluginIdPostEscape = pluginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{pluginId}", with: pluginIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Uninstalls a plugin by version.
     
     - parameter pluginId: (path) Plugin id. 
     - parameter version: (path) Plugin version. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func uninstallPluginByVersion(pluginId: String, version: Version, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        uninstallPluginByVersionWithRequestBuilder(pluginId: pluginId, version: version).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Uninstalls a plugin by version.
     - DELETE /Plugins/{pluginId}/{version}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter pluginId: (path) Plugin id. 
     - parameter version: (path) Plugin version. 
     - returns: RequestBuilder<Void> 
     */
    open class func uninstallPluginByVersionWithRequestBuilder(pluginId: String, version: Version) -> RequestBuilder<Void> {
        var urlPath = "/Plugins/{pluginId}/{version}"
        let pluginIdPreEscape = "\(APIHelper.mapValueToPathItem(pluginId))"
        let pluginIdPostEscape = pluginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{pluginId}", with: pluginIdPostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Updates plugin configuration.
     
     - parameter pluginId: (path) Plugin id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func updatePluginConfiguration(pluginId: String, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        updatePluginConfigurationWithRequestBuilder(pluginId: pluginId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Updates plugin configuration.
     - POST /Plugins/{pluginId}/Configuration
     - Accepts plugin configuration as JSON body.
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter pluginId: (path) Plugin id. 
     - returns: RequestBuilder<Void> 
     */
    open class func updatePluginConfigurationWithRequestBuilder(pluginId: String) -> RequestBuilder<Void> {
        var urlPath = "/Plugins/{pluginId}/Configuration"
        let pluginIdPreEscape = "\(APIHelper.mapValueToPathItem(pluginId))"
        let pluginIdPostEscape = pluginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{pluginId}", with: pluginIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Updates plugin security info.
     
     - parameter pluginSecurityInfo: (body) Plugin security info. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func updatePluginSecurityInfo(pluginSecurityInfo: PluginSecurityInfo, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        updatePluginSecurityInfoWithRequestBuilder(pluginSecurityInfo: pluginSecurityInfo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Updates plugin security info.
     - POST /Plugins/SecurityInfo
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter pluginSecurityInfo: (body) Plugin security info. 
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func updatePluginSecurityInfoWithRequestBuilder(pluginSecurityInfo: PluginSecurityInfo) -> RequestBuilder<Void> {
        let urlPath = "/Plugins/SecurityInfo"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: pluginSecurityInfo)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
