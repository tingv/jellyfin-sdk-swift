//
// ChannelsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import PromiseKit

open class ChannelsAPI {
    /**
     Get all channel features.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[ChannelFeatures]>
     */
    open class func getAllChannelFeatures(apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue) -> Promise<[ChannelFeatures]> {
        let deferred = Promise<[ChannelFeatures]>.pending()
        getAllChannelFeaturesWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get all channel features.
     - GET /Channels/Features
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - returns: RequestBuilder<[ChannelFeatures]> 
     */
    open class func getAllChannelFeaturesWithRequestBuilder() -> RequestBuilder<[ChannelFeatures]> {
        let urlPath = "/Channels/Features"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[ChannelFeatures]>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get channel features.
     
     - parameter channelId: (path) Channel id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ChannelFeatures>
     */
    open class func getChannelFeatures( channelId: String, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue) -> Promise<ChannelFeatures> {
        let deferred = Promise<ChannelFeatures>.pending()
        getChannelFeaturesWithRequestBuilder(channelId: channelId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get channel features.
     - GET /Channels/{channelId}/Features
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter channelId: (path) Channel id. 
     - returns: RequestBuilder<ChannelFeatures> 
     */
    open class func getChannelFeaturesWithRequestBuilder(channelId: String) -> RequestBuilder<ChannelFeatures> {
        var urlPath = "/Channels/{channelId}/Features"
        let channelIdPreEscape = "\(APIHelper.mapValueToPathItem(channelId))"
        let channelIdPostEscape = channelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{channelId}", with: channelIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ChannelFeatures>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get channel items.
     
     - parameter channelId: (path) Channel Id. 
     - parameter folderId: (query) Optional. Folder Id. (optional)
     - parameter userId: (query) Optional. User Id. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter sortOrder: (query) Optional. Sort Order - Ascending,Descending. (optional)
     - parameter filters: (query) Optional. Specify additional filters to apply. (optional)
     - parameter sortBy: (query) Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BaseItemDtoQueryResult>
     */
    open class func getChannelItems( channelId: String,  folderId: String? = nil,  userId: String? = nil,  startIndex: Int? = nil,  limit: Int? = nil,  sortOrder: [APISortOrder]? = nil,  filters: [ItemFilter]? = nil,  sortBy: [String]? = nil,  fields: [ItemFields]? = nil, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue) -> Promise<BaseItemDtoQueryResult> {
        let deferred = Promise<BaseItemDtoQueryResult>.pending()
        getChannelItemsWithRequestBuilder(channelId: channelId, folderId: folderId, userId: userId, startIndex: startIndex, limit: limit, sortOrder: sortOrder, filters: filters, sortBy: sortBy, fields: fields).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get channel items.
     - GET /Channels/{channelId}/Items
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter channelId: (path) Channel Id. 
     - parameter folderId: (query) Optional. Folder Id. (optional)
     - parameter userId: (query) Optional. User Id. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter sortOrder: (query) Optional. Sort Order - Ascending,Descending. (optional)
     - parameter filters: (query) Optional. Specify additional filters to apply. (optional)
     - parameter sortBy: (query) Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. (optional)
     - returns: RequestBuilder<BaseItemDtoQueryResult> 
     */
    open class func getChannelItemsWithRequestBuilder(channelId: String, folderId: String? = nil, userId: String? = nil, startIndex: Int? = nil, limit: Int? = nil, sortOrder: [APISortOrder]? = nil, filters: [ItemFilter]? = nil, sortBy: [String]? = nil, fields: [ItemFields]? = nil) -> RequestBuilder<BaseItemDtoQueryResult> {
        var urlPath = "/Channels/{channelId}/Items"
        let channelIdPreEscape = "\(APIHelper.mapValueToPathItem(channelId))"
        let channelIdPostEscape = channelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{channelId}", with: channelIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "folderId": folderId?.encodeToJSON(),
            "userId": userId?.encodeToJSON(),
            "startIndex": startIndex?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sortOrder": sortOrder?.encodeToJSON(),
            "filters": filters?.encodeToJSON(),
            "sortBy": sortBy?.encodeToJSON(),
            "fields": fields?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BaseItemDtoQueryResult>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets available channels.
     
     - parameter userId: (query) User Id to filter by. Use System.Guid.Empty to not filter by user. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter supportsLatestItems: (query) Optional. Filter by channels that support getting latest items. (optional)
     - parameter supportsMediaDeletion: (query) Optional. Filter by channels that support media deletion. (optional)
     - parameter isFavorite: (query) Optional. Filter by channels that are favorite. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BaseItemDtoQueryResult>
     */
    open class func getChannels( userId: String? = nil,  startIndex: Int? = nil,  limit: Int? = nil,  supportsLatestItems: Bool? = nil,  supportsMediaDeletion: Bool? = nil,  isFavorite: Bool? = nil, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue) -> Promise<BaseItemDtoQueryResult> {
        let deferred = Promise<BaseItemDtoQueryResult>.pending()
        getChannelsWithRequestBuilder(userId: userId, startIndex: startIndex, limit: limit, supportsLatestItems: supportsLatestItems, supportsMediaDeletion: supportsMediaDeletion, isFavorite: isFavorite).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets available channels.
     - GET /Channels
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter userId: (query) User Id to filter by. Use System.Guid.Empty to not filter by user. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter supportsLatestItems: (query) Optional. Filter by channels that support getting latest items. (optional)
     - parameter supportsMediaDeletion: (query) Optional. Filter by channels that support media deletion. (optional)
     - parameter isFavorite: (query) Optional. Filter by channels that are favorite. (optional)
     - returns: RequestBuilder<BaseItemDtoQueryResult> 
     */
    open class func getChannelsWithRequestBuilder(userId: String? = nil, startIndex: Int? = nil, limit: Int? = nil, supportsLatestItems: Bool? = nil, supportsMediaDeletion: Bool? = nil, isFavorite: Bool? = nil) -> RequestBuilder<BaseItemDtoQueryResult> {
        let urlPath = "/Channels"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId?.encodeToJSON(),
            "startIndex": startIndex?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "supportsLatestItems": supportsLatestItems?.encodeToJSON(),
            "supportsMediaDeletion": supportsMediaDeletion?.encodeToJSON(),
            "isFavorite": isFavorite?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BaseItemDtoQueryResult>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Gets latest channel items.
     
     - parameter userId: (query) Optional. User Id. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter filters: (query) Optional. Specify additional filters to apply. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. (optional)
     - parameter channelIds: (query) Optional. Specify one or more channel id&#39;s, comma delimited. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BaseItemDtoQueryResult>
     */
    open class func getLatestChannelItems( userId: String? = nil,  startIndex: Int? = nil,  limit: Int? = nil,  filters: [ItemFilter]? = nil,  fields: [ItemFields]? = nil,  channelIds: [String]? = nil, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue) -> Promise<BaseItemDtoQueryResult> {
        let deferred = Promise<BaseItemDtoQueryResult>.pending()
        getLatestChannelItemsWithRequestBuilder(userId: userId, startIndex: startIndex, limit: limit, filters: filters, fields: fields, channelIds: channelIds).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets latest channel items.
     - GET /Channels/Items/Latest
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter userId: (query) Optional. User Id. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter filters: (query) Optional. Specify additional filters to apply. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. (optional)
     - parameter channelIds: (query) Optional. Specify one or more channel id&#39;s, comma delimited. (optional)
     - returns: RequestBuilder<BaseItemDtoQueryResult> 
     */
    open class func getLatestChannelItemsWithRequestBuilder(userId: String? = nil, startIndex: Int? = nil, limit: Int? = nil, filters: [ItemFilter]? = nil, fields: [ItemFields]? = nil, channelIds: [String]? = nil) -> RequestBuilder<BaseItemDtoQueryResult> {
        let urlPath = "/Channels/Items/Latest"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId?.encodeToJSON(),
            "startIndex": startIndex?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "filters": filters?.encodeToJSON(),
            "fields": fields?.encodeToJSON(),
            "channelIds": channelIds?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BaseItemDtoQueryResult>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
