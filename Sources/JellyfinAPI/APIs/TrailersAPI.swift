//
// TrailersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation

open class TrailersAPI {
    /**
     Finds movies and trailers similar to a given trailer.
     
     - parameter userId: (query) The user id. (optional)
     - parameter maxOfficialRating: (query) Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     - parameter hasThemeSong: (query) Optional filter by items with theme songs. (optional)
     - parameter hasThemeVideo: (query) Optional filter by items with theme videos. (optional)
     - parameter hasSubtitles: (query) Optional filter by items with subtitles. (optional)
     - parameter hasSpecialFeature: (query) Optional filter by items with special features. (optional)
     - parameter hasTrailer: (query) Optional filter by items with trailers. (optional)
     - parameter adjacentTo: (query) Optional. Return items that are siblings of a supplied item. (optional)
     - parameter parentIndexNumber: (query) Optional filter by parent index number. (optional)
     - parameter hasParentalRating: (query) Optional filter by items that have or do not have a parental rating. (optional)
     - parameter isHd: (query) Optional filter by items that are HD or not. (optional)
     - parameter is4K: (query) Optional filter by items that are 4K or not. (optional)
     - parameter locationTypes: (query) Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited. (optional)
     - parameter excludeLocationTypes: (query) Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited. (optional)
     - parameter isMissing: (query) Optional filter by items that are missing episodes or not. (optional)
     - parameter isUnaired: (query) Optional filter by items that are unaired episodes or not. (optional)
     - parameter minCommunityRating: (query) Optional filter by minimum community rating. (optional)
     - parameter minCriticRating: (query) Optional filter by minimum critic rating. (optional)
     - parameter minPremiereDate: (query) Optional. The minimum premiere date. Format &#x3D; ISO. (optional)
     - parameter minDateLastSaved: (query) Optional. The minimum last saved date. Format &#x3D; ISO. (optional)
     - parameter minDateLastSavedForUser: (query) Optional. The minimum last saved date for the current user. Format &#x3D; ISO. (optional)
     - parameter maxPremiereDate: (query) Optional. The maximum premiere date. Format &#x3D; ISO. (optional)
     - parameter hasOverview: (query) Optional filter by items that have an overview or not. (optional)
     - parameter hasImdbId: (query) Optional filter by items that have an imdb id or not. (optional)
     - parameter hasTmdbId: (query) Optional filter by items that have a tmdb id or not. (optional)
     - parameter hasTvdbId: (query) Optional filter by items that have a tvdb id or not. (optional)
     - parameter excludeItemIds: (query) Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter recursive: (query) When searching within folders, this determines whether or not the search will be recursive. true/false. (optional)
     - parameter searchTerm: (query) Optional. Filter based on a search term. (optional)
     - parameter sortOrder: (query) Sort Order - Ascending,Descending. (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     - parameter excludeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     - parameter filters: (query) Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes. (optional)
     - parameter isFavorite: (query) Optional filter by items that are marked as favorite, or not. (optional)
     - parameter mediaTypes: (query) Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     - parameter imageTypes: (query) Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     - parameter sortBy: (query) Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     - parameter isPlayed: (query) Optional filter by items that are played, or not. (optional)
     - parameter genres: (query) Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited. (optional)
     - parameter officialRatings: (query) Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited. (optional)
     - parameter tags: (query) Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited. (optional)
     - parameter years: (query) Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited. (optional)
     - parameter enableUserData: (query) Optional, include user data. (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type. (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter person: (query) Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     - parameter personIds: (query) Optional. If specified, results will be filtered to include only those containing the specified person id. (optional)
     - parameter personTypes: (query) Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited. (optional)
     - parameter studios: (query) Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited. (optional)
     - parameter artists: (query) Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited. (optional)
     - parameter excludeArtistIds: (query) Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited. (optional)
     - parameter artistIds: (query) Optional. If specified, results will be filtered to include only those containing the specified artist id. (optional)
     - parameter albumArtistIds: (query) Optional. If specified, results will be filtered to include only those containing the specified album artist id. (optional)
     - parameter contributingArtistIds: (query) Optional. If specified, results will be filtered to include only those containing the specified contributing artist id. (optional)
     - parameter albums: (query) Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited. (optional)
     - parameter albumIds: (query) Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited. (optional)
     - parameter ids: (query) Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     - parameter videoTypes: (query) Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited. (optional)
     - parameter minOfficialRating: (query) Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     - parameter isLocked: (query) Optional filter by items that are locked. (optional)
     - parameter isPlaceHolder: (query) Optional filter by items that are placeholders. (optional)
     - parameter hasOfficialRating: (query) Optional filter by items that have official ratings. (optional)
     - parameter collapseBoxSetItems: (query) Whether or not to hide items behind their boxsets. (optional)
     - parameter minWidth: (query) Optional. Filter by the minimum width of the item. (optional)
     - parameter minHeight: (query) Optional. Filter by the minimum height of the item. (optional)
     - parameter maxWidth: (query) Optional. Filter by the maximum width of the item. (optional)
     - parameter maxHeight: (query) Optional. Filter by the maximum height of the item. (optional)
     - parameter is3D: (query) Optional filter by items that are 3D, or not. (optional)
     - parameter seriesStatus: (query) Optional filter by Series Status. Allows multiple, comma delimited. (optional)
     - parameter nameStartsWithOrGreater: (query) Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     - parameter nameStartsWith: (query) Optional filter by items whose name is sorted equally than a given input string. (optional)
     - parameter nameLessThan: (query) Optional filter by items whose name is equally or lesser than a given input string. (optional)
     - parameter studioIds: (query) Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited. (optional)
     - parameter genreIds: (query) Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited. (optional)
     - parameter enableTotalRecordCount: (query) Optional. Enable the total record count. (optional, default to true)
     - parameter enableImages: (query) Optional, include image information in output. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getTrailers(userId: String? = nil, maxOfficialRating: String? = nil, hasThemeSong: Bool? = nil, hasThemeVideo: Bool? = nil, hasSubtitles: Bool? = nil, hasSpecialFeature: Bool? = nil, hasTrailer: Bool? = nil, adjacentTo: String? = nil, parentIndexNumber: Int? = nil, hasParentalRating: Bool? = nil, isHd: Bool? = nil, is4K: Bool? = nil, locationTypes: [LocationType]? = nil, excludeLocationTypes: [LocationType]? = nil, isMissing: Bool? = nil, isUnaired: Bool? = nil, minCommunityRating: Double? = nil, minCriticRating: Double? = nil, minPremiereDate: Date? = nil, minDateLastSaved: Date? = nil, minDateLastSavedForUser: Date? = nil, maxPremiereDate: Date? = nil, hasOverview: Bool? = nil, hasImdbId: Bool? = nil, hasTmdbId: Bool? = nil, hasTvdbId: Bool? = nil, excludeItemIds: [String]? = nil, startIndex: Int? = nil, limit: Int? = nil, recursive: Bool? = nil, searchTerm: String? = nil, sortOrder: [APISortOrder]? = nil, parentId: String? = nil, fields: [ItemFields]? = nil, excludeItemTypes: [String]? = nil, filters: [ItemFilter]? = nil, isFavorite: Bool? = nil, mediaTypes: [String]? = nil, imageTypes: [ImageType]? = nil, sortBy: [String]? = nil, isPlayed: Bool? = nil, genres: [String]? = nil, officialRatings: [String]? = nil, tags: [String]? = nil, years: [Int]? = nil, enableUserData: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, person: String? = nil, personIds: [String]? = nil, personTypes: [String]? = nil, studios: [String]? = nil, artists: [String]? = nil, excludeArtistIds: [String]? = nil, artistIds: [String]? = nil, albumArtistIds: [String]? = nil, contributingArtistIds: [String]? = nil, albums: [String]? = nil, albumIds: [String]? = nil, ids: [String]? = nil, videoTypes: [VideoType]? = nil, minOfficialRating: String? = nil, isLocked: Bool? = nil, isPlaceHolder: Bool? = nil, hasOfficialRating: Bool? = nil, collapseBoxSetItems: Bool? = nil, minWidth: Int? = nil, minHeight: Int? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, is3D: Bool? = nil, seriesStatus: [SeriesStatus]? = nil, nameStartsWithOrGreater: String? = nil, nameStartsWith: String? = nil, nameLessThan: String? = nil, studioIds: [String]? = nil, genreIds: [String]? = nil, enableTotalRecordCount: Bool? = nil, enableImages: Bool? = nil, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<BaseItemDtoQueryResult, Error>) -> Void)) {
        getTrailersWithRequestBuilder(userId: userId, maxOfficialRating: maxOfficialRating, hasThemeSong: hasThemeSong, hasThemeVideo: hasThemeVideo, hasSubtitles: hasSubtitles, hasSpecialFeature: hasSpecialFeature, hasTrailer: hasTrailer, adjacentTo: adjacentTo, parentIndexNumber: parentIndexNumber, hasParentalRating: hasParentalRating, isHd: isHd, is4K: is4K, locationTypes: locationTypes, excludeLocationTypes: excludeLocationTypes, isMissing: isMissing, isUnaired: isUnaired, minCommunityRating: minCommunityRating, minCriticRating: minCriticRating, minPremiereDate: minPremiereDate, minDateLastSaved: minDateLastSaved, minDateLastSavedForUser: minDateLastSavedForUser, maxPremiereDate: maxPremiereDate, hasOverview: hasOverview, hasImdbId: hasImdbId, hasTmdbId: hasTmdbId, hasTvdbId: hasTvdbId, excludeItemIds: excludeItemIds, startIndex: startIndex, limit: limit, recursive: recursive, searchTerm: searchTerm, sortOrder: sortOrder, parentId: parentId, fields: fields, excludeItemTypes: excludeItemTypes, filters: filters, isFavorite: isFavorite, mediaTypes: mediaTypes, imageTypes: imageTypes, sortBy: sortBy, isPlayed: isPlayed, genres: genres, officialRatings: officialRatings, tags: tags, years: years, enableUserData: enableUserData, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, person: person, personIds: personIds, personTypes: personTypes, studios: studios, artists: artists, excludeArtistIds: excludeArtistIds, artistIds: artistIds, albumArtistIds: albumArtistIds, contributingArtistIds: contributingArtistIds, albums: albums, albumIds: albumIds, ids: ids, videoTypes: videoTypes, minOfficialRating: minOfficialRating, isLocked: isLocked, isPlaceHolder: isPlaceHolder, hasOfficialRating: hasOfficialRating, collapseBoxSetItems: collapseBoxSetItems, minWidth: minWidth, minHeight: minHeight, maxWidth: maxWidth, maxHeight: maxHeight, is3D: is3D, seriesStatus: seriesStatus, nameStartsWithOrGreater: nameStartsWithOrGreater, nameStartsWith: nameStartsWith, nameLessThan: nameLessThan, studioIds: studioIds, genreIds: genreIds, enableTotalRecordCount: enableTotalRecordCount, enableImages: enableImages).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Finds movies and trailers similar to a given trailer.
     - GET /Trailers
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter userId: (query) The user id. (optional)
     - parameter maxOfficialRating: (query) Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     - parameter hasThemeSong: (query) Optional filter by items with theme songs. (optional)
     - parameter hasThemeVideo: (query) Optional filter by items with theme videos. (optional)
     - parameter hasSubtitles: (query) Optional filter by items with subtitles. (optional)
     - parameter hasSpecialFeature: (query) Optional filter by items with special features. (optional)
     - parameter hasTrailer: (query) Optional filter by items with trailers. (optional)
     - parameter adjacentTo: (query) Optional. Return items that are siblings of a supplied item. (optional)
     - parameter parentIndexNumber: (query) Optional filter by parent index number. (optional)
     - parameter hasParentalRating: (query) Optional filter by items that have or do not have a parental rating. (optional)
     - parameter isHd: (query) Optional filter by items that are HD or not. (optional)
     - parameter is4K: (query) Optional filter by items that are 4K or not. (optional)
     - parameter locationTypes: (query) Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited. (optional)
     - parameter excludeLocationTypes: (query) Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited. (optional)
     - parameter isMissing: (query) Optional filter by items that are missing episodes or not. (optional)
     - parameter isUnaired: (query) Optional filter by items that are unaired episodes or not. (optional)
     - parameter minCommunityRating: (query) Optional filter by minimum community rating. (optional)
     - parameter minCriticRating: (query) Optional filter by minimum critic rating. (optional)
     - parameter minPremiereDate: (query) Optional. The minimum premiere date. Format &#x3D; ISO. (optional)
     - parameter minDateLastSaved: (query) Optional. The minimum last saved date. Format &#x3D; ISO. (optional)
     - parameter minDateLastSavedForUser: (query) Optional. The minimum last saved date for the current user. Format &#x3D; ISO. (optional)
     - parameter maxPremiereDate: (query) Optional. The maximum premiere date. Format &#x3D; ISO. (optional)
     - parameter hasOverview: (query) Optional filter by items that have an overview or not. (optional)
     - parameter hasImdbId: (query) Optional filter by items that have an imdb id or not. (optional)
     - parameter hasTmdbId: (query) Optional filter by items that have a tmdb id or not. (optional)
     - parameter hasTvdbId: (query) Optional filter by items that have a tvdb id or not. (optional)
     - parameter excludeItemIds: (query) Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter recursive: (query) When searching within folders, this determines whether or not the search will be recursive. true/false. (optional)
     - parameter searchTerm: (query) Optional. Filter based on a search term. (optional)
     - parameter sortOrder: (query) Sort Order - Ascending,Descending. (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines. (optional)
     - parameter excludeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     - parameter filters: (query) Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes. (optional)
     - parameter isFavorite: (query) Optional filter by items that are marked as favorite, or not. (optional)
     - parameter mediaTypes: (query) Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     - parameter imageTypes: (query) Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     - parameter sortBy: (query) Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime. (optional)
     - parameter isPlayed: (query) Optional filter by items that are played, or not. (optional)
     - parameter genres: (query) Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited. (optional)
     - parameter officialRatings: (query) Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited. (optional)
     - parameter tags: (query) Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited. (optional)
     - parameter years: (query) Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited. (optional)
     - parameter enableUserData: (query) Optional, include user data. (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type. (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter person: (query) Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     - parameter personIds: (query) Optional. If specified, results will be filtered to include only those containing the specified person id. (optional)
     - parameter personTypes: (query) Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited. (optional)
     - parameter studios: (query) Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited. (optional)
     - parameter artists: (query) Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited. (optional)
     - parameter excludeArtistIds: (query) Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited. (optional)
     - parameter artistIds: (query) Optional. If specified, results will be filtered to include only those containing the specified artist id. (optional)
     - parameter albumArtistIds: (query) Optional. If specified, results will be filtered to include only those containing the specified album artist id. (optional)
     - parameter contributingArtistIds: (query) Optional. If specified, results will be filtered to include only those containing the specified contributing artist id. (optional)
     - parameter albums: (query) Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited. (optional)
     - parameter albumIds: (query) Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited. (optional)
     - parameter ids: (query) Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     - parameter videoTypes: (query) Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited. (optional)
     - parameter minOfficialRating: (query) Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     - parameter isLocked: (query) Optional filter by items that are locked. (optional)
     - parameter isPlaceHolder: (query) Optional filter by items that are placeholders. (optional)
     - parameter hasOfficialRating: (query) Optional filter by items that have official ratings. (optional)
     - parameter collapseBoxSetItems: (query) Whether or not to hide items behind their boxsets. (optional)
     - parameter minWidth: (query) Optional. Filter by the minimum width of the item. (optional)
     - parameter minHeight: (query) Optional. Filter by the minimum height of the item. (optional)
     - parameter maxWidth: (query) Optional. Filter by the maximum width of the item. (optional)
     - parameter maxHeight: (query) Optional. Filter by the maximum height of the item. (optional)
     - parameter is3D: (query) Optional filter by items that are 3D, or not. (optional)
     - parameter seriesStatus: (query) Optional filter by Series Status. Allows multiple, comma delimited. (optional)
     - parameter nameStartsWithOrGreater: (query) Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     - parameter nameStartsWith: (query) Optional filter by items whose name is sorted equally than a given input string. (optional)
     - parameter nameLessThan: (query) Optional filter by items whose name is equally or lesser than a given input string. (optional)
     - parameter studioIds: (query) Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited. (optional)
     - parameter genreIds: (query) Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited. (optional)
     - parameter enableTotalRecordCount: (query) Optional. Enable the total record count. (optional, default to true)
     - parameter enableImages: (query) Optional, include image information in output. (optional, default to true)
     - returns: RequestBuilder<BaseItemDtoQueryResult> 
     */
    open class func getTrailersWithRequestBuilder(userId: String? = nil, maxOfficialRating: String? = nil, hasThemeSong: Bool? = nil, hasThemeVideo: Bool? = nil, hasSubtitles: Bool? = nil, hasSpecialFeature: Bool? = nil, hasTrailer: Bool? = nil, adjacentTo: String? = nil, parentIndexNumber: Int? = nil, hasParentalRating: Bool? = nil, isHd: Bool? = nil, is4K: Bool? = nil, locationTypes: [LocationType]? = nil, excludeLocationTypes: [LocationType]? = nil, isMissing: Bool? = nil, isUnaired: Bool? = nil, minCommunityRating: Double? = nil, minCriticRating: Double? = nil, minPremiereDate: Date? = nil, minDateLastSaved: Date? = nil, minDateLastSavedForUser: Date? = nil, maxPremiereDate: Date? = nil, hasOverview: Bool? = nil, hasImdbId: Bool? = nil, hasTmdbId: Bool? = nil, hasTvdbId: Bool? = nil, excludeItemIds: [String]? = nil, startIndex: Int? = nil, limit: Int? = nil, recursive: Bool? = nil, searchTerm: String? = nil, sortOrder: [APISortOrder]? = nil, parentId: String? = nil, fields: [ItemFields]? = nil, excludeItemTypes: [String]? = nil, filters: [ItemFilter]? = nil, isFavorite: Bool? = nil, mediaTypes: [String]? = nil, imageTypes: [ImageType]? = nil, sortBy: [String]? = nil, isPlayed: Bool? = nil, genres: [String]? = nil, officialRatings: [String]? = nil, tags: [String]? = nil, years: [Int]? = nil, enableUserData: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: [ImageType]? = nil, person: String? = nil, personIds: [String]? = nil, personTypes: [String]? = nil, studios: [String]? = nil, artists: [String]? = nil, excludeArtistIds: [String]? = nil, artistIds: [String]? = nil, albumArtistIds: [String]? = nil, contributingArtistIds: [String]? = nil, albums: [String]? = nil, albumIds: [String]? = nil, ids: [String]? = nil, videoTypes: [VideoType]? = nil, minOfficialRating: String? = nil, isLocked: Bool? = nil, isPlaceHolder: Bool? = nil, hasOfficialRating: Bool? = nil, collapseBoxSetItems: Bool? = nil, minWidth: Int? = nil, minHeight: Int? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, is3D: Bool? = nil, seriesStatus: [SeriesStatus]? = nil, nameStartsWithOrGreater: String? = nil, nameStartsWith: String? = nil, nameLessThan: String? = nil, studioIds: [String]? = nil, genreIds: [String]? = nil, enableTotalRecordCount: Bool? = nil, enableImages: Bool? = nil) -> RequestBuilder<BaseItemDtoQueryResult> {
        let urlPath = "/Trailers"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId?.encodeToJSON(),
            "maxOfficialRating": maxOfficialRating?.encodeToJSON(),
            "hasThemeSong": hasThemeSong?.encodeToJSON(),
            "hasThemeVideo": hasThemeVideo?.encodeToJSON(),
            "hasSubtitles": hasSubtitles?.encodeToJSON(),
            "hasSpecialFeature": hasSpecialFeature?.encodeToJSON(),
            "hasTrailer": hasTrailer?.encodeToJSON(),
            "adjacentTo": adjacentTo?.encodeToJSON(),
            "parentIndexNumber": parentIndexNumber?.encodeToJSON(),
            "hasParentalRating": hasParentalRating?.encodeToJSON(),
            "isHd": isHd?.encodeToJSON(),
            "is4K": is4K?.encodeToJSON(),
            "locationTypes": locationTypes?.encodeToJSON(),
            "excludeLocationTypes": excludeLocationTypes?.encodeToJSON(),
            "isMissing": isMissing?.encodeToJSON(),
            "isUnaired": isUnaired?.encodeToJSON(),
            "minCommunityRating": minCommunityRating?.encodeToJSON(),
            "minCriticRating": minCriticRating?.encodeToJSON(),
            "minPremiereDate": minPremiereDate?.encodeToJSON(),
            "minDateLastSaved": minDateLastSaved?.encodeToJSON(),
            "minDateLastSavedForUser": minDateLastSavedForUser?.encodeToJSON(),
            "maxPremiereDate": maxPremiereDate?.encodeToJSON(),
            "hasOverview": hasOverview?.encodeToJSON(),
            "hasImdbId": hasImdbId?.encodeToJSON(),
            "hasTmdbId": hasTmdbId?.encodeToJSON(),
            "hasTvdbId": hasTvdbId?.encodeToJSON(),
            "excludeItemIds": excludeItemIds?.encodeToJSON(),
            "startIndex": startIndex?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "recursive": recursive?.encodeToJSON(),
            "searchTerm": searchTerm?.encodeToJSON(),
            "sortOrder": sortOrder?.encodeToJSON(),
            "parentId": parentId?.encodeToJSON(),
            "fields": fields?.encodeToJSON(),
            "excludeItemTypes": excludeItemTypes?.encodeToJSON(),
            "filters": filters?.encodeToJSON(),
            "isFavorite": isFavorite?.encodeToJSON(),
            "mediaTypes": mediaTypes?.encodeToJSON(),
            "imageTypes": imageTypes?.encodeToJSON(),
            "sortBy": sortBy?.encodeToJSON(),
            "isPlayed": isPlayed?.encodeToJSON(),
            "genres": genres?.encodeToJSON(),
            "officialRatings": officialRatings?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
            "years": years?.encodeToJSON(),
            "enableUserData": enableUserData?.encodeToJSON(),
            "imageTypeLimit": imageTypeLimit?.encodeToJSON(),
            "enableImageTypes": enableImageTypes?.encodeToJSON(),
            "person": person?.encodeToJSON(),
            "personIds": personIds?.encodeToJSON(),
            "personTypes": personTypes?.encodeToJSON(),
            "studios": studios?.encodeToJSON(),
            "artists": artists?.encodeToJSON(),
            "excludeArtistIds": excludeArtistIds?.encodeToJSON(),
            "artistIds": artistIds?.encodeToJSON(),
            "albumArtistIds": albumArtistIds?.encodeToJSON(),
            "contributingArtistIds": contributingArtistIds?.encodeToJSON(),
            "albums": albums?.encodeToJSON(),
            "albumIds": albumIds?.encodeToJSON(),
            "ids": ids?.encodeToJSON(),
            "videoTypes": videoTypes?.encodeToJSON(),
            "minOfficialRating": minOfficialRating?.encodeToJSON(),
            "isLocked": isLocked?.encodeToJSON(),
            "isPlaceHolder": isPlaceHolder?.encodeToJSON(),
            "hasOfficialRating": hasOfficialRating?.encodeToJSON(),
            "collapseBoxSetItems": collapseBoxSetItems?.encodeToJSON(),
            "minWidth": minWidth?.encodeToJSON(),
            "minHeight": minHeight?.encodeToJSON(),
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON(),
            "is3D": is3D?.encodeToJSON(),
            "seriesStatus": seriesStatus?.encodeToJSON(),
            "nameStartsWithOrGreater": nameStartsWithOrGreater?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "nameLessThan": nameLessThan?.encodeToJSON(),
            "studioIds": studioIds?.encodeToJSON(),
            "genreIds": genreIds?.encodeToJSON(),
            "enableTotalRecordCount": enableTotalRecordCount?.encodeToJSON(),
            "enableImages": enableImages?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BaseItemDtoQueryResult>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
