//
// MoviesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import PromiseKit

open class MoviesAPI {
    /**
     Gets movie recommendations.
     
     - parameter userId: (query) Optional. Filter by user id, and attach user data. (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     - parameter fields: (query) Optional. The fields to return. (optional)
     - parameter categoryLimit: (query) The max number of categories to return. (optional, default to 5)
     - parameter itemLimit: (query) The max number of items to return per category. (optional, default to 8)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[RecommendationDto]>
     */
    open class func getMovieRecommendations( userId: String? = nil,  parentId: String? = nil,  fields: [ItemFields]? = nil,  categoryLimit: Int? = nil,  itemLimit: Int? = nil, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue) -> Promise<[RecommendationDto]> {
        let deferred = Promise<[RecommendationDto]>.pending()
        getMovieRecommendationsWithRequestBuilder(userId: userId, parentId: parentId, fields: fields, categoryLimit: categoryLimit, itemLimit: itemLimit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Gets movie recommendations.
     - GET /Movies/Recommendations
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter userId: (query) Optional. Filter by user id, and attach user data. (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     - parameter fields: (query) Optional. The fields to return. (optional)
     - parameter categoryLimit: (query) The max number of categories to return. (optional, default to 5)
     - parameter itemLimit: (query) The max number of items to return per category. (optional, default to 8)
     - returns: RequestBuilder<[RecommendationDto]> 
     */
    open class func getMovieRecommendationsWithRequestBuilder(userId: String? = nil, parentId: String? = nil, fields: [ItemFields]? = nil, categoryLimit: Int? = nil, itemLimit: Int? = nil) -> RequestBuilder<[RecommendationDto]> {
        let urlPath = "/Movies/Recommendations"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId?.encodeToJSON(),
            "parentId": parentId?.encodeToJSON(),
            "fields": fields?.encodeToJSON(),
            "categoryLimit": categoryLimit?.encodeToJSON(),
            "itemLimit": itemLimit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[RecommendationDto]>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
