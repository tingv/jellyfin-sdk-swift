//
// ItemLookupAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation

open class ItemLookupAPI {
    /**
     Applies search criteria to an item and refreshes metadata.
     
     - parameter itemId: (path) Item id. 
     - parameter remoteSearchResult: (body) The remote search result. 
     - parameter replaceAllImages: (query) Optional. Whether or not to replace all images. Default: True. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func applySearchCriteria(itemId: String, remoteSearchResult: RemoteSearchResult, replaceAllImages: Bool? = nil, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        applySearchCriteriaWithRequestBuilder(itemId: itemId, remoteSearchResult: remoteSearchResult, replaceAllImages: replaceAllImages).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Applies search criteria to an item and refreshes metadata.
     - POST /Items/RemoteSearch/Apply/{itemId}
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) Item id. 
     - parameter remoteSearchResult: (body) The remote search result. 
     - parameter replaceAllImages: (query) Optional. Whether or not to replace all images. Default: True. (optional, default to true)
     - returns: RequestBuilder<Void> 
     */
    open class func applySearchCriteriaWithRequestBuilder(itemId: String, remoteSearchResult: RemoteSearchResult, replaceAllImages: Bool? = nil) -> RequestBuilder<Void> {
        var urlPath = "/Items/RemoteSearch/Apply/{itemId}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: remoteSearchResult)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "replaceAllImages": replaceAllImages?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = JellyfinAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get book remote search.
     
     - parameter bookInfoRemoteSearchQuery: (body) Remote search query. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getBookRemoteSearchResults(bookInfoRemoteSearchQuery: BookInfoRemoteSearchQuery, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[RemoteSearchResult], Error>) -> Void)) {
        getBookRemoteSearchResultsWithRequestBuilder(bookInfoRemoteSearchQuery: bookInfoRemoteSearchQuery).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get book remote search.
     - POST /Items/RemoteSearch/Book
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter bookInfoRemoteSearchQuery: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getBookRemoteSearchResultsWithRequestBuilder(bookInfoRemoteSearchQuery: BookInfoRemoteSearchQuery) -> RequestBuilder<[RemoteSearchResult]> {
        let urlPath = "/Items/RemoteSearch/Book"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bookInfoRemoteSearchQuery)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get box set remote search.
     
     - parameter boxSetInfoRemoteSearchQuery: (body) Remote search query. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getBoxSetRemoteSearchResults(boxSetInfoRemoteSearchQuery: BoxSetInfoRemoteSearchQuery, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[RemoteSearchResult], Error>) -> Void)) {
        getBoxSetRemoteSearchResultsWithRequestBuilder(boxSetInfoRemoteSearchQuery: boxSetInfoRemoteSearchQuery).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get box set remote search.
     - POST /Items/RemoteSearch/BoxSet
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter boxSetInfoRemoteSearchQuery: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getBoxSetRemoteSearchResultsWithRequestBuilder(boxSetInfoRemoteSearchQuery: BoxSetInfoRemoteSearchQuery) -> RequestBuilder<[RemoteSearchResult]> {
        let urlPath = "/Items/RemoteSearch/BoxSet"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: boxSetInfoRemoteSearchQuery)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get the item's external id info.
     
     - parameter itemId: (path) Item id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getExternalIdInfos(itemId: String, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[ExternalIdInfo], Error>) -> Void)) {
        getExternalIdInfosWithRequestBuilder(itemId: itemId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get the item's external id info.
     - GET /Items/{itemId}/ExternalIdInfos
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) Item id. 
     - returns: RequestBuilder<[ExternalIdInfo]> 
     */
    open class func getExternalIdInfosWithRequestBuilder(itemId: String) -> RequestBuilder<[ExternalIdInfo]> {
        var urlPath = "/Items/{itemId}/ExternalIdInfos"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        urlPath = urlPath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[ExternalIdInfo]>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get movie remote search.
     
     - parameter movieInfoRemoteSearchQuery: (body) Remote search query. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getMovieRemoteSearchResults(movieInfoRemoteSearchQuery: MovieInfoRemoteSearchQuery, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[RemoteSearchResult], Error>) -> Void)) {
        getMovieRemoteSearchResultsWithRequestBuilder(movieInfoRemoteSearchQuery: movieInfoRemoteSearchQuery).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get movie remote search.
     - POST /Items/RemoteSearch/Movie
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter movieInfoRemoteSearchQuery: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getMovieRemoteSearchResultsWithRequestBuilder(movieInfoRemoteSearchQuery: MovieInfoRemoteSearchQuery) -> RequestBuilder<[RemoteSearchResult]> {
        let urlPath = "/Items/RemoteSearch/Movie"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: movieInfoRemoteSearchQuery)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get music album remote search.
     
     - parameter albumInfoRemoteSearchQuery: (body) Remote search query. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getMusicAlbumRemoteSearchResults(albumInfoRemoteSearchQuery: AlbumInfoRemoteSearchQuery, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[RemoteSearchResult], Error>) -> Void)) {
        getMusicAlbumRemoteSearchResultsWithRequestBuilder(albumInfoRemoteSearchQuery: albumInfoRemoteSearchQuery).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get music album remote search.
     - POST /Items/RemoteSearch/MusicAlbum
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter albumInfoRemoteSearchQuery: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getMusicAlbumRemoteSearchResultsWithRequestBuilder(albumInfoRemoteSearchQuery: AlbumInfoRemoteSearchQuery) -> RequestBuilder<[RemoteSearchResult]> {
        let urlPath = "/Items/RemoteSearch/MusicAlbum"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: albumInfoRemoteSearchQuery)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get music artist remote search.
     
     - parameter artistInfoRemoteSearchQuery: (body) Remote search query. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getMusicArtistRemoteSearchResults(artistInfoRemoteSearchQuery: ArtistInfoRemoteSearchQuery, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[RemoteSearchResult], Error>) -> Void)) {
        getMusicArtistRemoteSearchResultsWithRequestBuilder(artistInfoRemoteSearchQuery: artistInfoRemoteSearchQuery).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get music artist remote search.
     - POST /Items/RemoteSearch/MusicArtist
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter artistInfoRemoteSearchQuery: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getMusicArtistRemoteSearchResultsWithRequestBuilder(artistInfoRemoteSearchQuery: ArtistInfoRemoteSearchQuery) -> RequestBuilder<[RemoteSearchResult]> {
        let urlPath = "/Items/RemoteSearch/MusicArtist"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: artistInfoRemoteSearchQuery)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get music video remote search.
     
     - parameter musicVideoInfoRemoteSearchQuery: (body) Remote search query. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getMusicVideoRemoteSearchResults(musicVideoInfoRemoteSearchQuery: MusicVideoInfoRemoteSearchQuery, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[RemoteSearchResult], Error>) -> Void)) {
        getMusicVideoRemoteSearchResultsWithRequestBuilder(musicVideoInfoRemoteSearchQuery: musicVideoInfoRemoteSearchQuery).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get music video remote search.
     - POST /Items/RemoteSearch/MusicVideo
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter musicVideoInfoRemoteSearchQuery: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getMusicVideoRemoteSearchResultsWithRequestBuilder(musicVideoInfoRemoteSearchQuery: MusicVideoInfoRemoteSearchQuery) -> RequestBuilder<[RemoteSearchResult]> {
        let urlPath = "/Items/RemoteSearch/MusicVideo"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: musicVideoInfoRemoteSearchQuery)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get person remote search.
     
     - parameter personLookupInfoRemoteSearchQuery: (body) Remote search query. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getPersonRemoteSearchResults(personLookupInfoRemoteSearchQuery: PersonLookupInfoRemoteSearchQuery, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[RemoteSearchResult], Error>) -> Void)) {
        getPersonRemoteSearchResultsWithRequestBuilder(personLookupInfoRemoteSearchQuery: personLookupInfoRemoteSearchQuery).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get person remote search.
     - POST /Items/RemoteSearch/Person
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter personLookupInfoRemoteSearchQuery: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getPersonRemoteSearchResultsWithRequestBuilder(personLookupInfoRemoteSearchQuery: PersonLookupInfoRemoteSearchQuery) -> RequestBuilder<[RemoteSearchResult]> {
        let urlPath = "/Items/RemoteSearch/Person"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: personLookupInfoRemoteSearchQuery)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get series remote search.
     
     - parameter seriesInfoRemoteSearchQuery: (body) Remote search query. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getSeriesRemoteSearchResults(seriesInfoRemoteSearchQuery: SeriesInfoRemoteSearchQuery, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[RemoteSearchResult], Error>) -> Void)) {
        getSeriesRemoteSearchResultsWithRequestBuilder(seriesInfoRemoteSearchQuery: seriesInfoRemoteSearchQuery).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get series remote search.
     - POST /Items/RemoteSearch/Series
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter seriesInfoRemoteSearchQuery: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getSeriesRemoteSearchResultsWithRequestBuilder(seriesInfoRemoteSearchQuery: SeriesInfoRemoteSearchQuery) -> RequestBuilder<[RemoteSearchResult]> {
        let urlPath = "/Items/RemoteSearch/Series"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: seriesInfoRemoteSearchQuery)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get trailer remote search.
     
     - parameter trailerInfoRemoteSearchQuery: (body) Remote search query. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getTrailerRemoteSearchResults(trailerInfoRemoteSearchQuery: TrailerInfoRemoteSearchQuery, apiResponseQueue: DispatchQueue = JellyfinAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[RemoteSearchResult], Error>) -> Void)) {
        getTrailerRemoteSearchResultsWithRequestBuilder(trailerInfoRemoteSearchQuery: trailerInfoRemoteSearchQuery).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get trailer remote search.
     - POST /Items/RemoteSearch/Trailer
     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter trailerInfoRemoteSearchQuery: (body) Remote search query. 
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func getTrailerRemoteSearchResultsWithRequestBuilder(trailerInfoRemoteSearchQuery: TrailerInfoRemoteSearchQuery) -> RequestBuilder<[RemoteSearchResult]> {
        let urlPath = "/Items/RemoteSearch/Trailer"
        let URLString = JellyfinAPI.basePath + urlPath
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: trailerInfoRemoteSearchQuery)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = JellyfinAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
